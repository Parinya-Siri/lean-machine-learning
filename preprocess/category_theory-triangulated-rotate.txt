import category_theory.preadditive.additive_functor
import category_theory.triangulated.basic
noncomputable theory
open category_theory
open category_theory.preadditive
open category_theory.limits
universes v v‚ÇÄ v‚ÇÅ v‚ÇÇ u u‚ÇÄ u‚ÇÅ u‚ÇÇ
namespace category_theory.triangulated
open category_theory.category
variables {C : Type u} [category.{v} C] [preadditive C]
variables [has_shift C ‚Ñ§]
variables (X : C)
@[simps]
def triangle.rotate (T : triangle C) : triangle C := triangle.mk _ T.mor‚ÇÇ T.mor‚ÇÉ (-T.mor‚ÇÅ‚ü¶1‚üß')
section
local attribute [semireducible] shift_shift_neg shift_neg_shift
@[simps]
def triangle.inv_rotate (T : triangle C) : triangle C :=
triangle.mk _ (-T.mor‚ÇÉ‚ü¶(-1:‚Ñ§)‚üß' ‚â´ (shift_shift_neg _ _).hom) T.mor‚ÇÅ
  (T.mor‚ÇÇ ‚â´ (shift_neg_shift _ _).inv)
end
namespace triangle_morphism
variables {T‚ÇÅ T‚ÇÇ T‚ÇÉ T‚ÇÑ: triangle C}
open triangle
@[simps]
def rotate (f : triangle_morphism T‚ÇÅ T‚ÇÇ) :
  triangle_morphism (T‚ÇÅ.rotate) (T‚ÇÇ.rotate):=
{ hom‚ÇÅ := f.hom‚ÇÇ,
  hom‚ÇÇ := f.hom‚ÇÉ,
  hom‚ÇÉ := f.hom‚ÇÅ‚ü¶1‚üß',
  comm‚ÇÉ' := begin
    dsimp,
    simp only [rotate_mor‚ÇÉ, comp_neg, neg_comp, ‚Üê functor.map_comp, f.comm‚ÇÅ]
  end }
@[simps]
def inv_rotate (f : triangle_morphism T‚ÇÅ T‚ÇÇ) :
  triangle_morphism (T‚ÇÅ.inv_rotate) (T‚ÇÇ.inv_rotate) :=
{ hom‚ÇÅ := f.hom‚ÇÉ‚ü¶-1‚üß',
  hom‚ÇÇ := f.hom‚ÇÅ,
  hom‚ÇÉ := f.hom‚ÇÇ,
  comm‚ÇÅ' := begin
    dsimp [inv_rotate_mor‚ÇÅ],
    simp only [discrete.functor_map_id, id_comp, preadditive.comp_neg, assoc,
      neg_inj, nat_trans.id_app, preadditive.neg_comp],
    rw [‚Üê functor.map_comp_assoc, ‚Üê f.comm‚ÇÉ, functor.map_comp_assoc, Œº_naturality_assoc,
      nat_trans.naturality, functor.id_map],
  end,
  comm‚ÇÉ' := begin
    dsimp,
    simp only [discrete.functor_map_id, id_comp, Œº_inv_naturality,
      category.assoc, nat_trans.id_app, unit_of_tensor_iso_unit_inv_app],
    erw Œµ_naturality_assoc,
    rw comm‚ÇÇ_assoc
  end }
end triangle_morphism
variables (C)
@[simps]
def rotate : triangle C ‚•§ triangle C :=
{ obj := triangle.rotate,
  map := Œª _ _ f, f.rotate }
@[simps]
def inv_rotate : triangle C ‚•§ triangle C :=
{ obj := triangle.inv_rotate,
  map := Œª _ _ f, f.inv_rotate }
variables {C}
variables [‚àÄ n : ‚Ñ§, functor.additive (shift_functor C n)]
@[simps]
def to_inv_rotate_rotate (T : triangle C) : T ‚ü∂ (inv_rotate C).obj ((rotate C).obj T) :=
{ hom‚ÇÅ := (shift_shift_neg _ _).inv,
    hom‚ÇÇ := ùüô T.obj‚ÇÇ,
    hom‚ÇÉ := ùüô T.obj‚ÇÉ,
    comm‚ÇÉ' := begin
      dsimp,
      simp only [Œµ_app_obj, eq_to_iso.hom, discrete.functor_map_id, id_comp, eq_to_iso.inv,
        category.assoc, obj_Œº_inv_app, functor.map_comp, nat_trans.id_app, obj_Œµ_app,
        unit_of_tensor_iso_unit_inv_app],
      erw Œº_inv_hom_app_assoc,
      refl
    end }
@[simps]
def rot_comp_inv_rot_hom : ùü≠ (triangle C) ‚ü∂ rotate C ‚ãô inv_rotate C :=
{ app := to_inv_rotate_rotate,
  naturality' := begin
    introv, ext,
    { dsimp,
      simp only [nat_iso.cancel_nat_iso_inv_right_assoc, discrete.functor_map_id, id_comp,
        Œº_inv_naturality, assoc, nat_trans.id_app, unit_of_tensor_iso_unit_inv_app],
      erw Œµ_naturality },
    { dsimp, rw [comp_id, id_comp] },
    { dsimp, rw [comp_id, id_comp] },
  end }
@[simps]
def from_inv_rotate_rotate (T : triangle C) : (inv_rotate C).obj ((rotate C).obj T) ‚ü∂ T :=
{ hom‚ÇÅ := (shift_equiv C 1).unit_inv.app T.obj‚ÇÅ,
    hom‚ÇÇ := ùüô T.obj‚ÇÇ,
    hom‚ÇÉ := ùüô T.obj‚ÇÉ,
    comm‚ÇÉ' := begin
      dsimp,
      rw [unit_of_tensor_iso_unit_inv_app, Œµ_app_obj],
      simp only [discrete.functor_map_id, nat_trans.id_app, id_comp, assoc, functor.map_comp,
        obj_Œº_app, obj_Œµ_inv_app, comp_id, Œº_inv_hom_app_assoc],
      erw [Œº_inv_hom_app, Œº_inv_hom_app_assoc, category.comp_id]
    end }
@[simps]
def rot_comp_inv_rot_inv : rotate C ‚ãô inv_rotate C ‚ü∂ ùü≠ (triangle C) :=
{ app := from_inv_rotate_rotate }
@[simps]
def rot_comp_inv_rot : ùü≠ (triangle C) ‚âÖ rotate C ‚ãô inv_rotate C :=
{ hom := rot_comp_inv_rot_hom,
  inv := rot_comp_inv_rot_inv }
@[simps]
def from_rotate_inv_rotate (T : triangle C) : (rotate C).obj ((inv_rotate C).obj T) ‚ü∂ T :=
{ hom‚ÇÅ := ùüô T.obj‚ÇÅ,
    hom‚ÇÇ := ùüô T.obj‚ÇÇ,
    hom‚ÇÉ := (shift_equiv C 1).counit.app T.obj‚ÇÉ,
    comm‚ÇÇ' := begin
      dsimp,
      rw unit_of_tensor_iso_unit_inv_app,
      simp only [discrete.functor_map_id, nat_trans.id_app,
        id_comp, add_neg_equiv_counit_iso_hom, eq_to_hom_refl, nat_trans.comp_app, assoc,
        Œº_inv_hom_app_assoc, Œµ_hom_inv_app],
      exact category.comp_id _,
    end,
    comm‚ÇÉ' := begin
      dsimp,
      simp only [discrete.functor_map_id, nat_trans.id_app, id_comp, functor.map_neg,
        functor.map_comp, obj_Œº_app, obj_Œµ_inv_app, comp_id, assoc, Œº_naturality_assoc, neg_neg,
        category_theory.functor.map_id, add_neg_equiv_counit_iso_hom, eq_to_hom_refl,
        nat_trans.comp_app],
      erw [Œº_inv_hom_app, category.comp_id, obj_zero_map_Œº_app],
      rw [discrete.functor_map_id, nat_trans.id_app, comp_id],
    end }
@[simps]
def inv_rot_comp_rot_hom : inv_rotate C ‚ãô rotate C ‚ü∂ ùü≠ (triangle C) :=
{ app := from_rotate_inv_rotate }
@[simps]
def to_rotate_inv_rotate (T : triangle C) : T ‚ü∂ (rotate C).obj ((inv_rotate C).obj T) :=
{ hom‚ÇÅ := ùüô T.obj‚ÇÅ,
    hom‚ÇÇ := ùüô T.obj‚ÇÇ,
    hom‚ÇÉ := (shift_equiv C 1).counit_inv.app T.obj‚ÇÉ,
    comm‚ÇÉ' := begin
      dsimp,
      rw category_theory.functor.map_id,
      simp only [comp_id, add_neg_equiv_counit_iso_inv, eq_to_hom_refl, id_comp, nat_trans.comp_app,
        discrete.functor_map_id, nat_trans.id_app, functor.map_neg, functor.map_comp, obj_Œº_app,
        obj_Œµ_inv_app, assoc, Œº_naturality_assoc, neg_neg, Œº_inv_hom_app_assoc],
      erw [Œº_inv_hom_app, category.comp_id, obj_zero_map_Œº_app],
      simp only [discrete.functor_map_id, nat_trans.id_app, comp_id, Œµ_hom_inv_app_assoc],
    end }
@[simps]
def inv_rot_comp_rot_inv : ùü≠ (triangle C) ‚ü∂ inv_rotate C ‚ãô rotate C :=
{ app := to_rotate_inv_rotate,
  naturality' := begin
    introv, ext,
    { dsimp, rw [comp_id, id_comp] },
    { dsimp, rw [comp_id, id_comp] },
    { dsimp,
      rw [add_neg_equiv_counit_iso_inv, eq_to_hom_map, eq_to_hom_refl, id_comp],
      simp only [nat_trans.comp_app, assoc],
      erw [Œº_inv_naturality, Œµ_naturality_assoc] },
  end }
@[simps]
def inv_rot_comp_rot : inv_rotate C ‚ãô rotate C ‚âÖ ùü≠ (triangle C) :=
{ hom := inv_rot_comp_rot_hom,
  inv := inv_rot_comp_rot_inv }
variables (C)
@[simps]
def triangle_rotation : equivalence (triangle C) (triangle C) :=
{ functor := rotate C,
  inverse := inv_rotate C,
  unit_iso := rot_comp_inv_rot,
  counit_iso := inv_rot_comp_rot,
  functor_unit_iso_comp' := begin
    introv, ext,
    { dsimp, rw comp_id },
    { dsimp, rw comp_id },
    { dsimp,
      rw unit_of_tensor_iso_unit_inv_app,
      simp only [discrete.functor_map_id, nat_trans.id_app, id_comp, functor.map_comp, obj_Œµ_app,
        obj_Œº_inv_app, assoc, add_neg_equiv_counit_iso_hom, eq_to_hom_refl, nat_trans.comp_app,
        Œµ_inv_app_obj, comp_id, Œº_inv_hom_app_assoc],
      erw [Œº_inv_hom_app_assoc, Œº_inv_hom_app],
      refl }
  end }
variables {C}
instance : is_equivalence (rotate C) :=
by { change is_equivalence (triangle_rotation C).functor, apply_instance, }
instance : is_equivalence (inv_rotate C) :=
by { change is_equivalence (triangle_rotation C).inverse, apply_instance, }
end category_theory.triangulated
