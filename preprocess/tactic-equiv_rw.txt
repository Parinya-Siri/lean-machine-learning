import logic.equiv.basic
import tactic.clear
import tactic.simp_result
import tactic.apply
namespace tactic
meta structure equiv_rw_cfg :=
(max_depth : ℕ := 10)
meta def equiv_rw_type_core (eq : expr) (cfg : equiv_rw_cfg) : tactic unit :=
do
  solve_by_elim
  { use_symmetry := false,
    use_exfalso := false,
    lemma_thunks := some (pure eq :: equiv_congr_lemmas),
    ctx_thunk := pure [],
    max_depth := cfg.max_depth,
meta def equiv_rw_type (eqv : expr) (ty : expr) (cfg : equiv_rw_cfg) : tactic expr :=
do
  when_tracing `equiv_rw_type (do
    ty_pp ← pp ty,
    eqv_pp ← pp eqv,
    eqv_ty_pp ← infer_type eqv >>= pp,
    trace format!"Attempting to rewrite the type `{ty_pp}` using `{eqv_pp} : {eqv_ty_pp}`."),
  `(_ ≃ _) ← infer_type eqv | fail format!"{eqv} must be an `equiv`",
meta def equiv_rw_hyp (x : name) (e : expr) (cfg : equiv_rw_cfg := {}) : tactic unit :=
meta def equiv_rw_target (e : expr) (cfg : equiv_rw_cfg := {}) : tactic unit :=
do
  t ← target,
  e ← equiv_rw_type e t cfg,
  s ← to_expr ``(equiv.inv_fun %%e),
  tactic.eapply s,
  skip
end tactic
namespace tactic.interactive
open tactic
setup_tactic_parser
meta def equiv_rw_hyp_aux (hyp : name) (cfg : equiv_rw_cfg) (permissive : bool := ff) :
  list expr → itactic
| []       := skip
| (e :: t) := do
  if permissive then equiv_rw_hyp hyp e cfg <|> skip
  else equiv_rw_hyp hyp e cfg,
  equiv_rw_hyp_aux t
meta def equiv_rw_target_aux (cfg : equiv_rw_cfg) (permissive : bool) :
  list expr → itactic
| []       := skip
| (e :: t) := do
  if permissive then equiv_rw_target e cfg <|> skip
  else equiv_rw_target e cfg,
  equiv_rw_target_aux t
meta def equiv_rw
  (l : parse pexpr_list_or_texpr)
  (locat : parse location)
  (cfg : equiv_rw_cfg := {}) : itactic := do
es ← l.mmap (λ e, to_expr e),
match locat with
| loc.wildcard := do
  equiv_rw_target_aux cfg tt es,
  ctx ← local_context,
  ctx.mmap (λ e, if e ∈ es then skip else equiv_rw_hyp_aux e.local_pp_name cfg tt es),
  skip
| loc.ns names := do
  names.mmap
    (λ hyp', match hyp' with
    | some hyp := equiv_rw_hyp_aux hyp cfg ff es
    | none     := equiv_rw_target_aux cfg ff es
    end),
  skip
end
add_tactic_doc
{ name        := "equiv_rw",
  category    := doc_category.tactic,
  decl_names  := [`tactic.interactive.equiv_rw],
  tags        := ["rewriting", "equiv", "transport"] }
meta def equiv_rw_type (e : parse texpr) (cfg : equiv_rw_cfg := {}) : itactic :=
do
 `(%%t ≃ _) ← target | fail "`equiv_rw_type` solves goals of the form `t ≃ _`.",
 e ← to_expr e,
 tactic.equiv_rw_type e t cfg >>= tactic.exact
add_tactic_doc
{ name        := "equiv_rw_type",
  category    := doc_category.tactic,
  decl_names  := [`tactic.interactive.equiv_rw_type],
  tags        := ["rewriting", "equiv", "transport"] }
end tactic.interactive
