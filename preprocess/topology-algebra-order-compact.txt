import topology.algebra.order.intermediate_value
open filter order_dual topological_space function set
open_locale filter topological_space
class compact_Icc_space (Œ± : Type*) [topological_space Œ±] [preorder Œ±] : Prop :=
(is_compact_Icc : ‚àÄ {a b : Œ±}, is_compact (Icc a b))
export compact_Icc_space (is_compact_Icc)
@[priority 100]
instance conditionally_complete_linear_order.to_compact_Icc_space
  (Œ± : Type*) [conditionally_complete_linear_order Œ±] [topological_space Œ±] [order_topology Œ±] :
  compact_Icc_space Œ± :=
begin
  refine ‚ü®Œª a b, _‚ü©,
  cases le_or_lt a b with hab hab, swap, { simp [hab] },
  refine is_compact_iff_ultrafilter_le_nhds.2 (Œª f hf, _),
  contrapose! hf,
  rw [le_principal_iff],
  have hpt : ‚àÄ x ‚àà Icc a b, {x} ‚àâ f,
    from Œª x hx hxf, hf x hx ((le_pure_iff.2 hxf).trans (pure_le_nhds x)),
  set s := {x ‚àà Icc a b | Icc a x ‚àâ f},
  have hsb : b ‚àà upper_bounds s, from Œª x hx, hx.1.2,
  have sbd : bdd_above s, from ‚ü®b, hsb‚ü©,
  have ha : a ‚àà s, by simp [hpt, hab],
  rcases hab.eq_or_lt with rfl|hlt, { exact ha.2 },
  set c := Sup s,
  have hsc : is_lub s c, from is_lub_cSup ‚ü®a, ha‚ü© sbd,
  have hc : c ‚àà Icc a b, from ‚ü®hsc.1 ha, hsc.2 hsb‚ü©,
  specialize hf c hc,
  have hcs : c ‚àà s,
  { cases hc.1.eq_or_lt with heq hlt, { rwa ‚Üê heq },
    refine ‚ü®hc, Œª hcf, hf (Œª U hU, _)‚ü©,
    rcases (mem_nhds_within_Iic_iff_exists_Ioc_subset' hlt).1 (mem_nhds_within_of_mem_nhds hU)
      with ‚ü®x, hxc, hxU‚ü©,
    rcases ((hsc.frequently_mem ‚ü®a, ha‚ü©).and_eventually
      (Ioc_mem_nhds_within_Iic ‚ü®hxc, le_rfl‚ü©)).exists
      with ‚ü®y, ‚ü®hyab, hyf‚ü©, hy‚ü©,
    refine mem_of_superset(f.diff_mem_iff.2 ‚ü®hcf, hyf‚ü©) (subset.trans _ hxU),
    rw diff_subset_iff,
    exact subset.trans Icc_subset_Icc_union_Ioc
      (union_subset_union subset.rfl $ Ioc_subset_Ioc_left hy.1.le) },
  cases hc.2.eq_or_lt with heq hlt, { rw ‚Üê heq, exact hcs.2 },
  contrapose! hf,
  intros U hU,
  rcases (mem_nhds_within_Ici_iff_exists_mem_Ioc_Ico_subset hlt).1 (mem_nhds_within_of_mem_nhds hU)
    with ‚ü®y, hxy, hyU‚ü©,
  refine mem_of_superset _ hyU, clear_dependent U,
  have hy : y ‚àà Icc a b, from ‚ü®hc.1.trans hxy.1.le, hxy.2‚ü©,
  by_cases hay : Icc a y ‚àà f,
  { refine mem_of_superset (f.diff_mem_iff.2 ‚ü®f.diff_mem_iff.2 ‚ü®hay, hcs.2‚ü©, hpt y hy‚ü©) _,
    rw [diff_subset_iff, union_comm, Ico_union_right hxy.1.le, diff_subset_iff],
    exact Icc_subset_Icc_union_Icc },
  { exact ((hsc.1 ‚ü®hy, hay‚ü©).not_lt hxy.1).elim },
end
instance {Œπ : Type*} {Œ± : Œπ ‚Üí Type*} [Œ† i, preorder (Œ± i)] [Œ† i, topological_space (Œ± i)]
  [Œ† i, compact_Icc_space (Œ± i)] : compact_Icc_space (Œ† i, Œ± i) :=
‚ü®Œª a b, pi_univ_Icc a b ‚ñ∏ is_compact_univ_pi $ Œª i, is_compact_Icc‚ü©
instance pi.compact_Icc_space' {Œ± Œ≤ : Type*} [preorder Œ≤] [topological_space Œ≤]
  [compact_Icc_space Œ≤] : compact_Icc_space (Œ± ‚Üí Œ≤) :=
pi.compact_Icc_space
instance {Œ± Œ≤ : Type*} [preorder Œ±] [topological_space Œ±] [compact_Icc_space Œ±]
  [preorder Œ≤] [topological_space Œ≤] [compact_Icc_space Œ≤] :
  compact_Icc_space (Œ± √ó Œ≤) :=
‚ü®Œª a b, (Icc_prod_eq a b).symm ‚ñ∏ is_compact_Icc.prod is_compact_Icc‚ü©
lemma is_compact_interval {Œ± : Type*} [linear_order Œ±] [topological_space Œ±] [compact_Icc_space Œ±]
  {a b : Œ±} : is_compact (interval a b) :=
is_compact_Icc
variables {Œ± Œ≤ Œ≥ : Type*} [conditionally_complete_linear_order Œ±] [topological_space Œ±]
  [order_topology Œ±] [topological_space Œ≤] [topological_space Œ≥]
lemma is_compact.Inf_mem {s : set Œ±} (hs : is_compact s) (ne_s : s.nonempty) :
  Inf s ‚àà s :=
hs.is_closed.cInf_mem ne_s hs.bdd_below
lemma is_compact.Sup_mem {s : set Œ±} (hs : is_compact s) (ne_s : s.nonempty) : Sup s ‚àà s :=
@is_compact.Inf_mem Œ±·µí·µà _ _ _ _ hs ne_s
lemma is_compact.is_glb_Inf {s : set Œ±} (hs : is_compact s) (ne_s : s.nonempty) :
  is_glb s (Inf s) :=
is_glb_cInf ne_s hs.bdd_below
lemma is_compact.is_lub_Sup {s : set Œ±} (hs : is_compact s) (ne_s : s.nonempty) :
  is_lub s (Sup s) :=
@is_compact.is_glb_Inf Œ±·µí·µà _ _ _ _ hs ne_s
lemma is_compact.is_least_Inf {s : set Œ±} (hs : is_compact s) (ne_s : s.nonempty) :
  is_least s (Inf s) :=
‚ü®hs.Inf_mem ne_s, (hs.is_glb_Inf ne_s).1‚ü©
lemma is_compact.is_greatest_Sup {s : set Œ±} (hs : is_compact s) (ne_s : s.nonempty) :
  is_greatest s (Sup s) :=
@is_compact.is_least_Inf Œ±·µí·µà _ _ _ _ hs ne_s
lemma is_compact.exists_is_least {s : set Œ±} (hs : is_compact s) (ne_s : s.nonempty) :
  ‚àÉ x, is_least s x :=
‚ü®_, hs.is_least_Inf ne_s‚ü©
lemma is_compact.exists_is_greatest {s : set Œ±} (hs : is_compact s) (ne_s : s.nonempty) :
  ‚àÉ x, is_greatest s x :=
‚ü®_, hs.is_greatest_Sup ne_s‚ü©
lemma is_compact.exists_is_glb {s : set Œ±} (hs : is_compact s) (ne_s : s.nonempty) :
  ‚àÉ x ‚àà s, is_glb s x :=
‚ü®_, hs.Inf_mem ne_s, hs.is_glb_Inf ne_s‚ü©
lemma is_compact.exists_is_lub {s : set Œ±} (hs : is_compact s) (ne_s : s.nonempty) :
  ‚àÉ x ‚àà s, is_lub s x :=
‚ü®_, hs.Sup_mem ne_s, hs.is_lub_Sup ne_s‚ü©
lemma is_compact.exists_Inf_image_eq_and_le {s : set Œ≤} (hs : is_compact s) (ne_s : s.nonempty)
  {f : Œ≤ ‚Üí Œ±} (hf : continuous_on f s) :
  ‚àÉ x ‚àà s, Inf (f '' s) = f x ‚àß ‚àÄ y ‚àà s, f x ‚â§ f y :=
let ‚ü®x, hxs, hx‚ü© := (hs.image_of_continuous_on hf).Inf_mem (ne_s.image f)
in ‚ü®x, hxs, hx.symm, Œª y hy,
  hx.trans_le $ cInf_le (hs.image_of_continuous_on hf).bdd_below $ mem_image_of_mem f hy‚ü©
lemma is_compact.exists_Sup_image_eq_and_ge {s : set Œ≤} (hs : is_compact s) (ne_s : s.nonempty)
  {f : Œ≤ ‚Üí Œ±} (hf : continuous_on f s) :
  ‚àÉ x ‚àà s, Sup (f '' s) = f x ‚àß ‚àÄ y ‚àà s, f y ‚â§ f x :=
@is_compact.exists_Inf_image_eq_and_le Œ±·µí·µà _ _ _ _ _ _ hs ne_s _ hf
lemma is_compact.exists_Inf_image_eq {s : set Œ≤} (hs : is_compact s) (ne_s : s.nonempty)
  {f : Œ≤ ‚Üí Œ±} (hf : continuous_on f s) :
  ‚àÉ x ‚àà s,  Inf (f '' s) = f x :=
let ‚ü®x, hxs, hx, _‚ü© := hs.exists_Inf_image_eq_and_le ne_s hf in ‚ü®x, hxs, hx‚ü©
lemma is_compact.exists_Sup_image_eq :
  ‚àÄ {s : set Œ≤}, is_compact s ‚Üí s.nonempty ‚Üí ‚àÄ {f : Œ≤ ‚Üí Œ±}, continuous_on f s ‚Üí
  ‚àÉ x ‚àà s, Sup (f '' s) = f x :=
@is_compact.exists_Inf_image_eq Œ±·µí·µà _ _ _ _ _
lemma eq_Icc_of_connected_compact {s : set Œ±} (h‚ÇÅ : is_connected s) (h‚ÇÇ : is_compact s) :
  s = Icc (Inf s) (Sup s) :=
eq_Icc_cInf_cSup_of_connected_bdd_closed h‚ÇÅ h‚ÇÇ.bdd_below h‚ÇÇ.bdd_above h‚ÇÇ.is_closed
lemma is_compact.exists_forall_le {s : set Œ≤} (hs : is_compact s) (ne_s : s.nonempty)
  {f : Œ≤ ‚Üí Œ±} (hf : continuous_on f s) :
  ‚àÉx‚ààs, ‚àÄy‚ààs, f x ‚â§ f y :=
begin
  rcases (hs.image_of_continuous_on hf).exists_is_least (ne_s.image f)
    with ‚ü®_, ‚ü®x, hxs, rfl‚ü©, hx‚ü©,
  exact ‚ü®x, hxs, ball_image_iff.1 hx‚ü©
end
lemma is_compact.exists_forall_ge :
  ‚àÄ {s : set Œ≤}, is_compact s ‚Üí s.nonempty ‚Üí ‚àÄ {f : Œ≤ ‚Üí Œ±}, continuous_on f s ‚Üí
  ‚àÉx‚ààs, ‚àÄy‚ààs, f y ‚â§ f x :=
@is_compact.exists_forall_le Œ±·µí·µà _ _ _ _ _
lemma continuous_on.exists_forall_le' {s : set Œ≤} {f : Œ≤ ‚Üí Œ±} (hf : continuous_on f s)
  (hsc : is_closed s) {x‚ÇÄ : Œ≤} (h‚ÇÄ : x‚ÇÄ ‚àà s) (hc : ‚àÄ·∂† x in cocompact Œ≤ ‚äì ùìü s, f x‚ÇÄ ‚â§ f x) :
  ‚àÉ x ‚àà s, ‚àÄ y ‚àà s, f x ‚â§ f y :=
begin
  rcases (has_basis_cocompact.inf_principal _).eventually_iff.1 hc with ‚ü®K, hK, hKf‚ü©,
  have hsub : insert x‚ÇÄ (K ‚à© s) ‚äÜ s, from insert_subset.2 ‚ü®h‚ÇÄ, inter_subset_right _ _‚ü©,
  obtain ‚ü®x, hx, hxf‚ü© : ‚àÉ x ‚àà insert x‚ÇÄ (K ‚à© s), ‚àÄ y ‚àà insert x‚ÇÄ (K ‚à© s), f x ‚â§ f y :=
    ((hK.inter_right hsc).insert x‚ÇÄ).exists_forall_le (insert_nonempty _ _) (hf.mono hsub),
  refine ‚ü®x, hsub hx, Œª y hy, _‚ü©,
  by_cases hyK : y ‚àà K,
  exacts [hxf _ (or.inr ‚ü®hyK, hy‚ü©), (hxf _ (or.inl rfl)).trans (hKf ‚ü®hyK, hy‚ü©)]
end
lemma continuous_on.exists_forall_ge' {s : set Œ≤} {f : Œ≤ ‚Üí Œ±} (hf : continuous_on f s)
  (hsc : is_closed s) {x‚ÇÄ : Œ≤} (h‚ÇÄ : x‚ÇÄ ‚àà s) (hc : ‚àÄ·∂† x in cocompact Œ≤ ‚äì ùìü s, f x ‚â§ f x‚ÇÄ) :
  ‚àÉ x ‚àà s, ‚àÄ y ‚àà s, f y ‚â§ f x :=
@continuous_on.exists_forall_le' Œ±·µí·µà _ _ _ _ _ _ _ hf hsc _ h‚ÇÄ hc
lemma _root_.continuous.exists_forall_le' {f : Œ≤ ‚Üí Œ±} (hf : continuous f) (x‚ÇÄ : Œ≤)
  (h : ‚àÄ·∂† x in cocompact Œ≤, f x‚ÇÄ ‚â§ f x) : ‚àÉ (x : Œ≤), ‚àÄ (y : Œ≤), f x ‚â§ f y :=
let ‚ü®x, _, hx‚ü© := hf.continuous_on.exists_forall_le' is_closed_univ (mem_univ x‚ÇÄ)
  (by rwa [principal_univ, inf_top_eq])
in ‚ü®x, Œª y, hx y (mem_univ y)‚ü©
lemma _root_.continuous.exists_forall_ge' {f : Œ≤ ‚Üí Œ±} (hf : continuous f) (x‚ÇÄ : Œ≤)
  (h : ‚àÄ·∂† x in cocompact Œ≤, f x ‚â§ f x‚ÇÄ) : ‚àÉ (x : Œ≤), ‚àÄ (y : Œ≤), f y ‚â§ f x :=
@continuous.exists_forall_le' Œ±·µí·µà _ _ _ _ _ _ hf x‚ÇÄ h
lemma _root_.continuous.exists_forall_le [nonempty Œ≤] {f : Œ≤ ‚Üí Œ±}
  (hf : continuous f) (hlim : tendsto f (cocompact Œ≤) at_top) :
  ‚àÉ x, ‚àÄ y, f x ‚â§ f y :=
by { inhabit Œ≤, exact hf.exists_forall_le' default (hlim.eventually $ eventually_ge_at_top _) }
lemma continuous.exists_forall_ge [nonempty Œ≤] {f : Œ≤ ‚Üí Œ±}
  (hf : continuous f) (hlim : tendsto f (cocompact Œ≤) at_bot) :
  ‚àÉ x, ‚àÄ y, f y ‚â§ f x :=
@continuous.exists_forall_le Œ±·µí·µà _ _ _ _ _ _ _ hf hlim
lemma is_compact.Sup_lt_iff_of_continuous {f : Œ≤ ‚Üí Œ±}
  {K : set Œ≤} (hK : is_compact K) (h0K : K.nonempty) (hf : continuous_on f K) (y : Œ±) :
  Sup (f '' K) < y ‚Üî ‚àÄ x ‚àà K, f x < y :=
begin
  refine ‚ü®Œª h x hx, (le_cSup (hK.bdd_above_image hf) $ mem_image_of_mem f hx).trans_lt h, Œª h, _‚ü©,
  obtain ‚ü®x, hx, h2x‚ü© := hK.exists_forall_ge h0K hf,
  refine (cSup_le (h0K.image f) _).trans_lt (h x hx),
  rintro _ ‚ü®x', hx', rfl‚ü©, exact h2x x' hx'
end
lemma is_compact.lt_Inf_iff_of_continuous {Œ± Œ≤ : Type*}
  [conditionally_complete_linear_order Œ±] [topological_space Œ±]
  [order_topology Œ±] [topological_space Œ≤] {f : Œ≤ ‚Üí Œ±}
  {K : set Œ≤} (hK : is_compact K) (h0K : K.nonempty) (hf : continuous_on f K) (y : Œ±) :
  y < Inf (f '' K) ‚Üî ‚àÄ x ‚àà K, y < f x :=
@is_compact.Sup_lt_iff_of_continuous Œ±·µí·µà Œ≤ _ _ _ _ _ _ hK h0K hf y
@[to_additive]
lemma _root_.continuous.exists_forall_le_of_has_compact_mul_support [nonempty Œ≤] [has_one Œ±]
  {f : Œ≤ ‚Üí Œ±} (hf : continuous f) (h : has_compact_mul_support f) :
  ‚àÉ (x : Œ≤), ‚àÄ (y : Œ≤), f x ‚â§ f y :=
begin
  obtain ‚ü®_, ‚ü®x, rfl‚ü©, hx‚ü© := (h.is_compact_range hf).exists_is_least (range_nonempty _),
  rw [mem_lower_bounds, forall_range_iff] at hx,
  exact ‚ü®x, hx‚ü©,
end
@[to_additive]
lemma continuous.exists_forall_ge_of_has_compact_mul_support [nonempty Œ≤] [has_one Œ±]
  {f : Œ≤ ‚Üí Œ±} (hf : continuous f) (h : has_compact_mul_support f) :
  ‚àÉ (x : Œ≤), ‚àÄ (y : Œ≤), f y ‚â§ f x :=
@continuous.exists_forall_le_of_has_compact_mul_support Œ±·µí·µà _ _ _ _ _ _ _ _ hf h
lemma is_compact.continuous_Sup {f : Œ≥ ‚Üí Œ≤ ‚Üí Œ±}
  {K : set Œ≤} (hK : is_compact K) (hf : continuous ‚Üøf) :
    continuous (Œª x, Sup (f x '' K)) :=
begin
  rcases eq_empty_or_nonempty K with rfl|h0K,
  { simp_rw [image_empty], exact continuous_const },
  rw [continuous_iff_continuous_at],
  intro x,
  obtain ‚ü®y, hyK, h2y, hy‚ü© :=
    hK.exists_Sup_image_eq_and_ge h0K
      (show continuous (Œª y, f x y), from hf.comp $ continuous.prod.mk x).continuous_on,
  rw [continuous_at, h2y, tendsto_order],
  have := tendsto_order.mp ((show continuous (Œª x, f x y), from
    hf.comp $ continuous_id.prod_mk continuous_const).tendsto x),
  refine ‚ü®Œª z hz, _, Œª z hz, _‚ü©,
  { refine (this.1 z hz).mono (Œª x' hx', hx'.trans_le $ le_cSup _ $ mem_image_of_mem (f x') hyK),
    exact hK.bdd_above_image (hf.comp $ continuous.prod.mk x').continuous_on },
  { have h : ({x} : set Œ≥) √óÀ¢ K ‚äÜ ‚Üøf ‚Åª¬π' (Iio z),
    { rintro ‚ü®x', y'‚ü© ‚ü®hx', hy'‚ü©, cases hx', exact (hy y' hy').trans_lt hz },
    obtain ‚ü®u, v, hu, hv, hxu, hKv, huv‚ü© :=
      generalized_tube_lemma is_compact_singleton hK (is_open_Iio.preimage hf) h,
    refine eventually_of_mem (hu.mem_nhds (singleton_subset_iff.mp hxu)) (Œª x' hx', _),
    rw [hK.Sup_lt_iff_of_continuous h0K
      (show continuous (f x'), from (hf.comp $ continuous.prod.mk x')).continuous_on],
    exact Œª y' hy', huv (mk_mem_prod hx' (hKv hy')) }
end
lemma is_compact.continuous_Inf {f : Œ≥ ‚Üí Œ≤ ‚Üí Œ±}
  {K : set Œ≤} (hK : is_compact K) (hf : continuous ‚Üøf) :
    continuous (Œª x, Inf (f x '' K)) :=
@is_compact.continuous_Sup Œ±·µí·µà Œ≤ Œ≥ _ _ _ _ _ _ _ hK hf
namespace continuous_on
variables [densely_ordered Œ±] [conditionally_complete_linear_order Œ≤] [order_topology Œ≤]
  {f : Œ± ‚Üí Œ≤} {a b c : Œ±}
open_locale interval
lemma image_Icc (hab : a ‚â§ b) (h : continuous_on f $ Icc a b) :
  f '' Icc a b = Icc (Inf $ f '' Icc a b) (Sup $ f '' Icc a b) :=
eq_Icc_of_connected_compact ‚ü®(nonempty_Icc.2 hab).image f, is_preconnected_Icc.image f h‚ü©
  (is_compact_Icc.image_of_continuous_on h)
lemma image_interval_eq_Icc (h : continuous_on f $ [a, b]) :
  f '' [a, b] = Icc (Inf (f '' [a, b])) (Sup (f '' [a, b])) :=
begin
  cases le_total a b with h2 h2,
  { simp_rw [interval_of_le h2] at h ‚ä¢, exact h.image_Icc h2 },
  { simp_rw [interval_of_ge h2] at h ‚ä¢, exact h.image_Icc h2 },
end
lemma image_interval (h : continuous_on f $ [a, b]) :
  f '' [a, b] = [Inf (f '' [a, b]), Sup (f '' [a, b])] :=
begin
  refine h.image_interval_eq_Icc.trans (interval_of_le _).symm,
  refine cInf_le_cSup _ _ (nonempty_interval.image _); rw h.image_interval_eq_Icc,
  exacts [bdd_below_Icc, bdd_above_Icc]
end
lemma Inf_image_Icc_le (h : continuous_on f $ Icc a b) (hc : c ‚àà Icc a b) :
  Inf (f '' (Icc a b)) ‚â§ f c :=
begin
  rw h.image_Icc (nonempty_Icc.mp (set.nonempty_of_mem hc)),
  exact cInf_le bdd_below_Icc (mem_Icc.mpr ‚ü®cInf_le (is_compact_Icc.bdd_below_image h) ‚ü®c, hc, rfl‚ü©,
     le_cSup (is_compact_Icc.bdd_above_image h) ‚ü®c, hc, rfl‚ü©‚ü©),
end
lemma le_Sup_image_Icc (h : continuous_on f $ Icc a b) (hc : c ‚àà Icc a b) :
  f c ‚â§ Sup (f '' (Icc a b)) :=
begin
  rw h.image_Icc (nonempty_Icc.mp (set.nonempty_of_mem hc)),
  exact le_cSup bdd_above_Icc (mem_Icc.mpr ‚ü®cInf_le (is_compact_Icc.bdd_below_image h) ‚ü®c, hc, rfl‚ü©,
     le_cSup (is_compact_Icc.bdd_above_image h) ‚ü®c, hc, rfl‚ü©‚ü©),
end
end continuous_on
