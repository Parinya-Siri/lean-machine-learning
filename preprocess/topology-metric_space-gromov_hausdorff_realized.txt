import topology.metric_space.gluing
import topology.metric_space.hausdorff_distance
import topology.continuous_function.bounded
noncomputable theory
open_locale classical topological_space nnreal
universes u v w
open classical set function topological_space filter metric quotient
open bounded_continuous_function
open sum (inl inr)
local attribute [instance] metric_space_sum
namespace Gromov_Hausdorff
section Gromov_Hausdorff_realized
section definitions
variables (X : Type u) (Y : Type v)
  [metric_space X] [compact_space X] [nonempty X]
  [metric_space Y] [compact_space Y] [nonempty Y]
@[reducible] private def prod_space_fun : Type* := ((X ‚äï Y) √ó (X ‚äï Y)) ‚Üí ‚Ñù
@[reducible] private def Cb : Type* := bounded_continuous_function ((X ‚äï Y) √ó (X ‚äï Y)) ‚Ñù
private def max_var : ‚Ñù‚â•0 :=
2 * ‚ü®diam (univ : set X), diam_nonneg‚ü© + 1 + 2 * ‚ü®diam (univ : set Y), diam_nonneg‚ü©
private lemma one_le_max_var : 1 ‚â§ max_var X Y := calc
  (1 : real) = 2 * 0 + 1 + 2 * 0 : by simp
  ... ‚â§ 2 * diam (univ : set X) + 1 + 2 * diam (univ : set Y) :
  by apply_rules [add_le_add, mul_le_mul_of_nonneg_left, diam_nonneg]; norm_num
def candidates : set (prod_space_fun X Y) :=
  {f | (((((‚àÄ x y : X, f (sum.inl x, sum.inl y) = dist x y)
    ‚àß (‚àÄ x y : Y, f (sum.inr x, sum.inr y) = dist x y))
    ‚àß (‚àÄ x y,     f (x, y) = f (y, x)))
    ‚àß (‚àÄ x y z,   f (x, z) ‚â§ f (x, y) + f (y, z)))
    ‚àß (‚àÄ x,       f (x, x) = 0))
    ‚àß (‚àÄ x y,     f (x, y) ‚â§ max_var X Y) }
private def candidates_b : set (Cb X Y) := {f : Cb X Y | (f : _ ‚Üí ‚Ñù) ‚àà candidates X Y}
private lemma candidates_dist_bound  (fA : f ‚àà candidates X Y) :
  ‚àÄ {x y : X ‚äï Y}, f (x, y) ‚â§ max_var X Y * dist x y
| (inl x) (inl y) := calc
    f (inl x, inl y) = dist x y : candidates_dist_inl fA x y
    ... = dist (inl x) (inl y) : by { rw @sum.dist_eq X Y, refl }
    ... = 1 * dist (inl x) (inl y) : by simp
    ... ‚â§ max_var X Y * dist (inl x) (inl y) :
      mul_le_mul_of_nonneg_right (one_le_max_var X Y) dist_nonneg
| (inl x) (inr y) := calc
    f (inl x, inr y) ‚â§ max_var X Y : candidates_le_max_var fA
    ... = max_var X Y * 1 : by simp
    ... ‚â§ max_var X Y * dist (inl x) (inr y) :
      mul_le_mul_of_nonneg_left sum.one_dist_le (le_trans (zero_le_one) (one_le_max_var X Y))
| (inr x) (inl y) := calc
    f (inr x, inl y) ‚â§ max_var X Y : candidates_le_max_var fA
    ... = max_var X Y * 1 : by simp
    ... ‚â§ max_var X Y * dist (inl x) (inr y) :
      mul_le_mul_of_nonneg_left sum.one_dist_le (le_trans (zero_le_one) (one_le_max_var X Y))
| (inr x) (inr y) := calc
    f (inr x, inr y) = dist x y : candidates_dist_inr fA x y
    ... = dist (inr x) (inr y) : by { rw @sum.dist_eq X Y, refl }
    ... = 1 * dist (inr x) (inr y) : by simp
    ... ‚â§ max_var X Y * dist (inr x) (inr y) :
      mul_le_mul_of_nonneg_right (one_le_max_var X Y) dist_nonneg
private lemma candidates_lipschitz_aux (fA : f ‚àà candidates X Y) :
  f (x, y) - f (z, t) ‚â§ 2 * max_var X Y * dist (x, y) (z, t) :=
calc
  f (x, y) - f(z, t) ‚â§ f (x, t) + f (t, y) - f (z, t) : sub_le_sub_right (candidates_triangle fA) _
  ... ‚â§ (f (x, z) + f (z, t) + f(t, y)) - f (z, t) :
    sub_le_sub_right (add_le_add_right (candidates_triangle fA) _ ) _
  ... = f (x, z) + f (t, y) : by simp [sub_eq_add_neg, add_assoc]
  ... ‚â§ max_var X Y * dist x z + max_var X Y * dist t y :
    add_le_add (candidates_dist_bound fA) (candidates_dist_bound fA)
  ... ‚â§ max_var X Y * max (dist x z) (dist t y) + max_var X Y * max (dist x z) (dist t y) :
  begin
    apply add_le_add,
    apply mul_le_mul_of_nonneg_left (le_max_left (dist x z) (dist t y))
      (zero_le_one.trans (one_le_max_var X Y)),
    apply mul_le_mul_of_nonneg_left (le_max_right (dist x z) (dist t y))
      (zero_le_one.trans (one_le_max_var X Y)),
  end
  ... = 2 * max_var X Y * max (dist x z) (dist y t) :
    by { simp [dist_comm], ring }
  ... = 2 * max_var X Y * dist (x, y) (z, t) : by refl
private lemma candidates_lipschitz (fA : f ‚àà candidates X Y) :
  lipschitz_with (2 * max_var X Y) f :=
begin
  apply lipschitz_with.of_dist_le_mul,
  rintros ‚ü®x, y‚ü© ‚ü®z, t‚ü©,
  rw [real.dist_eq, abs_sub_le_iff],
  use candidates_lipschitz_aux fA,
  rw [dist_comm],
  exact candidates_lipschitz_aux fA
end
def candidates_b_of_candidates (f : prod_space_fun X Y) (fA : f ‚àà candidates X Y) : Cb X Y :=
bounded_continuous_function.mk_of_compact ‚ü®f, (candidates_lipschitz fA).continuous‚ü©
lemma candidates_b_of_candidates_mem (f : prod_space_fun X Y) (fA : f ‚àà candidates X Y) :
  candidates_b_of_candidates f fA ‚àà candidates_b X Y := fA
private lemma dist_mem_candidates : (Œªp : (X ‚äï Y) √ó (X ‚äï Y), dist p.1 p.2) ‚àà candidates X Y :=
begin
  simp only [candidates, dist_comm, forall_const, and_true, add_comm, eq_self_iff_true,
             and_self, sum.forall, set.mem_set_of_eq, dist_self],
  repeat { split
    <|> exact (Œªa y z, dist_triangle_left _ _ _)
    <|> exact (Œªx y, by refl)
    <|> exact (Œªx y, max_var_bound) }
end
def candidates_b_dist (X : Type u) (Y : Type v) [metric_space X] [compact_space X] [inhabited X]
  [metric_space Y] [compact_space Y] [inhabited Y] : Cb X Y :=
candidates_b_of_candidates _ dist_mem_candidates
lemma candidates_b_dist_mem_candidates_b : candidates_b_dist X Y ‚àà candidates_b X Y :=
candidates_b_of_candidates_mem _ _
private lemma candidates_b_nonempty : (candidates_b X Y).nonempty :=
‚ü®_,  candidates_b_dist_mem_candidates_b‚ü©
private lemma closed_candidates_b : is_closed (candidates_b X Y) :=
begin
  have I1 : ‚àÄ x y, is_closed {f : Cb X Y | f (inl x, inl y) = dist x y} :=
    Œªx y, is_closed_eq continuous_eval_const continuous_const,
  have I2 : ‚àÄ x y, is_closed {f : Cb X Y | f (inr x, inr y) = dist x y } :=
    Œªx y, is_closed_eq continuous_eval_const continuous_const,
  have I3 : ‚àÄ x y, is_closed {f : Cb X Y | f (x, y) = f (y, x)} :=
    Œªx y, is_closed_eq continuous_eval_const continuous_eval_const,
  have I4 : ‚àÄ x y z, is_closed {f : Cb X Y | f (x, z) ‚â§ f (x, y) + f (y, z)} :=
    Œªx y z, is_closed_le continuous_eval_const (continuous_eval_const.add continuous_eval_const),
  have I5 : ‚àÄ x, is_closed {f : Cb X Y | f (x, x) = 0} :=
    Œªx, is_closed_eq continuous_eval_const continuous_const,
  have I6 : ‚àÄ x y, is_closed {f : Cb X Y | f (x, y) ‚â§ max_var X Y} :=
    Œªx y, is_closed_le continuous_eval_const continuous_const,
  have : candidates_b X Y = (‚ãÇx y, {f : Cb X Y | f ((@inl X Y x), (@inl X Y y)) = dist x y})
               ‚à© (‚ãÇx y, {f : Cb X Y | f ((@inr X Y x), (@inr X Y y)) = dist x y})
               ‚à© (‚ãÇx y, {f : Cb X Y | f (x, y) = f (y, x)})
               ‚à© (‚ãÇx y z, {f : Cb X Y | f (x, z) ‚â§ f (x, y) + f (y, z)})
               ‚à© (‚ãÇx, {f : Cb X Y | f (x, x) = 0})
               ‚à© (‚ãÇx y, {f : Cb X Y | f (x, y) ‚â§ max_var X Y}),
  { ext, simp only [candidates_b, candidates, mem_inter_eq, mem_Inter, mem_set_of_eq] },
  rw this,
  repeat { apply is_closed.inter _ _
       <|> apply is_closed_Inter _
       <|> apply I1 _ _
       <|> apply I2 _ _
       <|> apply I3 _ _
       <|> apply I4 _ _ _
       <|> apply I5 _
       <|> apply I6 _ _
       <|> assume x },
end
private lemma compact_candidates_b : is_compact (candidates_b X Y) :=
begin
  refine arzela_ascoli‚ÇÇ (Icc 0 (max_var X Y)) is_compact_Icc (candidates_b X Y)
  closed_candidates_b _ _,
  { rintros f ‚ü®x1, x2‚ü© hf,
    simp only [set.mem_Icc],
    exact ‚ü®candidates_nonneg hf, candidates_le_max_var hf‚ü© },
  { refine equicontinuous_of_continuity_modulus (Œªt, 2 * max_var X Y * t) _ _ _,
    { have : tendsto (Œª (t : ‚Ñù), 2 * (max_var X Y : ‚Ñù) * t) (ùìù 0) (ùìù (2 * max_var X Y * 0)) :=
        tendsto_const_nhds.mul tendsto_id,
      simpa using this },
    { assume x y f hf,
      exact (candidates_lipschitz hf).dist_le_mul _ _ } }
end
def HD (f : Cb X Y) := max (‚®Ü x, ‚®Ö y, f (inl x, inr y)) (‚®Ü y, ‚®Ö x, f (inl x, inr y))
lemma HD_below_aux1 {f : Cb X Y} (C : ‚Ñù) {x : X} :
  bdd_below (range (Œª (y : Y), f (inl x, inr y) + C)) :=
let ‚ü®cf, hcf‚ü© := (real.bounded_iff_bdd_below_bdd_above.1 f.bounded_range).1 in
‚ü®cf + C, forall_range_iff.2 (Œªi, add_le_add_right ((Œªx, hcf (mem_range_self x)) _) _)‚ü©
private lemma HD_bound_aux1 (f : Cb X Y) (C : ‚Ñù) :
  bdd_above (range (Œª (x : X), ‚®Ö y, f (inl x, inr y) + C)) :=
begin
  rcases (real.bounded_iff_bdd_below_bdd_above.1 f.bounded_range).2 with ‚ü®Cf, hCf‚ü©,
  refine ‚ü®Cf + C, forall_range_iff.2 (Œªx, _)‚ü©,
  calc (‚®Ö y, f (inl x, inr y) + C) ‚â§ f (inl x, inr default) + C :
    cinfi_le (HD_below_aux1 C) default
    ... ‚â§ Cf + C : add_le_add ((Œªx, hCf (mem_range_self x)) _) le_rfl
end
lemma HD_below_aux2 {f : Cb X Y} (C : ‚Ñù) {y : Y} :
  bdd_below (range (Œª (x : X), f (inl x, inr y) + C)) :=
let ‚ü®cf, hcf‚ü© := (real.bounded_iff_bdd_below_bdd_above.1 f.bounded_range).1 in
‚ü®cf + C, forall_range_iff.2 (Œªi, add_le_add_right ((Œªx, hcf (mem_range_self x)) _) _)‚ü©
private lemma HD_bound_aux2 (f : Cb X Y) (C : ‚Ñù) :
  bdd_above (range (Œª (y : Y), ‚®Ö x, f (inl x, inr y) + C)) :=
begin
  rcases (real.bounded_iff_bdd_below_bdd_above.1 f.bounded_range).2 with ‚ü®Cf, hCf‚ü©,
  refine ‚ü®Cf + C, forall_range_iff.2 (Œªy, _)‚ü©,
  calc (‚®Ö x, f (inl x, inr y) + C) ‚â§ f (inl default, inr y) + C :
    cinfi_le (HD_below_aux2 C) default
  ... ‚â§ Cf + C : add_le_add ((Œªx, hCf (mem_range_self x)) _) le_rfl
end
lemma HD_candidates_b_dist_le :
  HD (candidates_b_dist X Y) ‚â§ diam (univ : set X) + 1 + diam (univ : set Y) :=
begin
  refine max_le (csupr_le (Œªx, _)) (csupr_le (Œªy, _)),
  { have A : (‚®Ö y, candidates_b_dist X Y (inl x, inr y)) ‚â§
      candidates_b_dist X Y (inl x, inr default) :=
      cinfi_le (by simpa using HD_below_aux1 0) default,
    have B : dist (inl x) (inr default) ‚â§ diam (univ : set X) + 1 + diam (univ : set Y) := calc
      dist (inl x) (inr (default : Y)) = dist x (default : X) + 1 + dist default default : rfl
      ... ‚â§ diam (univ : set X) + 1 + diam (univ : set Y) :
      begin
        apply add_le_add (add_le_add _ le_rfl),
        exact dist_le_diam_of_mem bounded_of_compact_space (mem_univ _) (mem_univ _),
        any_goals { exact ordered_add_comm_monoid.to_covariant_class_left ‚Ñù },
        any_goals { exact ordered_add_comm_monoid.to_covariant_class_right ‚Ñù },
        exact dist_le_diam_of_mem bounded_of_compact_space (mem_univ _) (mem_univ _),
      end,
    exact le_trans A B },
  { have A : (‚®Ö x, candidates_b_dist X Y (inl x, inr y)) ‚â§
      candidates_b_dist X Y (inl default, inr y) :=
      cinfi_le (by simpa using HD_below_aux2 0) default,
    have B : dist (inl default) (inr y) ‚â§ diam (univ : set X) + 1 + diam (univ : set Y) := calc
      dist (inl (default : X)) (inr y) = dist default default + 1 + dist default y : rfl
      ... ‚â§ diam (univ : set X) + 1 + diam (univ : set Y) :
      begin
        apply add_le_add (add_le_add _ le_rfl),
        exact dist_le_diam_of_mem bounded_of_compact_space (mem_univ _) (mem_univ _),
        any_goals { exact ordered_add_comm_monoid.to_covariant_class_left ‚Ñù },
        any_goals { exact ordered_add_comm_monoid.to_covariant_class_right ‚Ñù },
        exact dist_le_diam_of_mem bounded_of_compact_space (mem_univ _) (mem_univ _)
      end,
    exact le_trans A B },
end
private lemma HD_lipschitz_aux1 (f g : Cb X Y) :
  (‚®Ü x, ‚®Ö y, f (inl x, inr y)) ‚â§ (‚®Ü x, ‚®Ö y, g (inl x, inr y)) + dist f g :=
begin
  rcases (real.bounded_iff_bdd_below_bdd_above.1 g.bounded_range).1 with ‚ü®cg, hcg‚ü©,
  have Hcg : ‚àÄ x, cg ‚â§ g x := Œªx, hcg (mem_range_self x),
  rcases (real.bounded_iff_bdd_below_bdd_above.1 f.bounded_range).1 with ‚ü®cf, hcf‚ü©,
  have Hcf : ‚àÄ x, cf ‚â§ f x := Œªx, hcf (mem_range_self x),
private lemma HD_continuous : continuous (HD : Cb X Y ‚Üí ‚Ñù) :=
lipschitz_with.continuous (lipschitz_with.of_le_add HD_lipschitz_aux3)
private lemma exists_minimizer : ‚àÉ f ‚àà candidates_b X Y, ‚àÄ g ‚àà candidates_b X Y, HD f ‚â§ HD g :=
compact_candidates_b.exists_forall_le candidates_b_nonempty HD_continuous.continuous_on
private definition optimal_GH_dist : Cb X Y := classical.some (exists_minimizer X Y)
private lemma optimal_GH_dist_mem_candidates_b : optimal_GH_dist X Y ‚àà candidates_b X Y :=
by cases (classical.some_spec (exists_minimizer X Y)); assumption
private lemma HD_optimal_GH_dist_le (g : Cb X Y) (hg : g ‚àà candidates_b X Y) :
  HD (optimal_GH_dist X Y) ‚â§ HD g :=
let ‚ü®Z1, Z2‚ü© := classical.some_spec (exists_minimizer X Y) in Z2 g hg
def premetric_optimal_GH_dist : pseudo_metric_space (X ‚äï Y) :=
{ dist := Œªp q, optimal_GH_dist X Y (p, q),
  dist_self := Œªx, candidates_refl (optimal_GH_dist_mem_candidates_b X Y),
  dist_comm := Œªx y, candidates_symm (optimal_GH_dist_mem_candidates_b X Y),
  dist_triangle := Œªx y z, candidates_triangle (optimal_GH_dist_mem_candidates_b X Y) }
local attribute [instance] premetric_optimal_GH_dist pseudo_metric.dist_setoid
@[derive metric_space, nolint has_inhabited_instance]
definition optimal_GH_coupling : Type* :=
pseudo_metric_quot (X ‚äï Y)
def optimal_GH_injl (x : X) : optimal_GH_coupling X Y := ‚ü¶inl x‚üß
lemma isometry_optimal_GH_injl : isometry (optimal_GH_injl X Y) :=
begin
  refine isometry_emetric_iff_metric.2 (Œªx y, _),
  change dist ‚ü¶inl x‚üß ‚ü¶inl y‚üß = dist x y,
  exact candidates_dist_inl (optimal_GH_dist_mem_candidates_b X Y) _ _,
end
def optimal_GH_injr (y : Y) : optimal_GH_coupling X Y := ‚ü¶inr y‚üß
lemma isometry_optimal_GH_injr : isometry (optimal_GH_injr X Y) :=
begin
  refine isometry_emetric_iff_metric.2 (Œªx y, _),
  change dist ‚ü¶inr x‚üß ‚ü¶inr y‚üß = dist x y,
  exact candidates_dist_inr (optimal_GH_dist_mem_candidates_b X Y) _ _,
end
instance compact_space_optimal_GH_coupling : compact_space (optimal_GH_coupling X Y) :=
‚ü®begin
  have : (univ : set (optimal_GH_coupling X Y)) =
           (optimal_GH_injl X Y '' univ) ‚à™ (optimal_GH_injr X Y '' univ),
  { refine subset.antisymm (Œªxc hxc, _) (subset_univ _),
    rcases quotient.exists_rep xc with ‚ü®x, hx‚ü©,
    cases x; rw ‚Üê hx,
    { have : ‚ü¶inl x‚üß = optimal_GH_injl X Y x := rfl,
      rw this,
      exact mem_union_left _ (mem_image_of_mem _ (mem_univ _)) },
    { have : ‚ü¶inr x‚üß = optimal_GH_injr X Y x := rfl,
      rw this,
      exact mem_union_right _ (mem_image_of_mem _ (mem_univ _)) } },
  rw this,
  exact (compact_univ.image (isometry_optimal_GH_injl X Y).continuous).union
    (compact_univ.image (isometry_optimal_GH_injr X Y).continuous)
end‚ü©
lemma Hausdorff_dist_optimal_le_HD {f} (h : f ‚àà candidates_b X Y) :
  Hausdorff_dist (range (optimal_GH_injl X Y)) (range (optimal_GH_injr X Y)) ‚â§ HD f :=
begin
  refine le_trans (le_of_forall_le_of_dense (Œªr hr, _)) (HD_optimal_GH_dist_le X Y f h),
  have A : ‚àÄ x ‚àà range (optimal_GH_injl X Y), ‚àÉ y ‚àà range (optimal_GH_injr X Y), dist x y ‚â§ r,
  { assume x hx,
    rcases mem_range.1 hx with ‚ü®z, hz‚ü©,
    rw ‚Üê hz,
    have I1 : (‚®Ü x, ‚®Ö y, optimal_GH_dist X Y (inl x, inr y)) < r :=
      lt_of_le_of_lt (le_max_left _ _) hr,
    have I2 : (‚®Ö y, optimal_GH_dist X Y (inl z, inr y)) ‚â§
        ‚®Ü x, ‚®Ö y, optimal_GH_dist X Y (inl x, inr y) :=
      le_cSup (by simpa using HD_bound_aux1 _ 0) (mem_range_self _),
    have I : (‚®Ö y, optimal_GH_dist X Y (inl z, inr y)) < r := lt_of_le_of_lt I2 I1,
    rcases exists_lt_of_cInf_lt (range_nonempty _) I with ‚ü®r', r'range, hr'‚ü©,
    rcases mem_range.1 r'range with ‚ü®z', hz'‚ü©,
    existsi [optimal_GH_injr X Y z', mem_range_self _],
    have : (optimal_GH_dist X Y) (inl z, inr z') ‚â§ r, by { rw hz', exact le_of_lt hr' },
    exact this },
  refine Hausdorff_dist_le_of_mem_dist _ A _,
  { rcases exists_mem_of_nonempty X with ‚ü®xX, _‚ü©,
    have : optimal_GH_injl X Y xX ‚àà range (optimal_GH_injl X Y) := mem_range_self _,
    rcases A _ this with ‚ü®y, yrange, hy‚ü©,
    exact le_trans dist_nonneg hy },
  { assume y hy,
    rcases mem_range.1 hy with ‚ü®z, hz‚ü©,
    rw ‚Üê hz,
    have I1 : (‚®Ü y, ‚®Ö x, optimal_GH_dist X Y (inl x, inr y)) < r :=
      lt_of_le_of_lt (le_max_right _ _) hr,
    have I2 : (‚®Ö x, optimal_GH_dist X Y (inl x, inr z)) ‚â§
        ‚®Ü y, ‚®Ö x, optimal_GH_dist X Y (inl x, inr y) :=
      le_cSup (by simpa using HD_bound_aux2 _ 0) (mem_range_self _),
    have I : (‚®Ö x, optimal_GH_dist X Y (inl x, inr z)) < r := lt_of_le_of_lt I2 I1,
    rcases exists_lt_of_cInf_lt (range_nonempty _) I with ‚ü®r', r'range, hr'‚ü©,
    rcases mem_range.1 r'range with ‚ü®z', hz'‚ü©,
    existsi [optimal_GH_injl X Y z', mem_range_self _],
    have : (optimal_GH_dist X Y) (inl z', inr z) ‚â§ r, by { rw hz', exact le_of_lt hr' },
    rw dist_comm,
    exact this }
end
end consequences
end Gromov_Hausdorff_realized
end Gromov_Hausdorff
