import category_theory.abelian.injective_resolution
import algebra.homology.additive
import category_theory.limits.constructions.epi_mono
import category_theory.abelian.homology
import category_theory.abelian.exact
noncomputable theory
open category_theory
open category_theory.limits
namespace category_theory
universes v u
variables {C : Type u} [category.{v} C] {D : Type*} [category D]
variables [abelian C] [has_injective_resolutions C] [abelian D]
def functor.right_derived (F : C ‚•§ D) [F.additive] (n : ‚Ñï) : C ‚•§ D :=
injective_resolutions C ‚ãô F.map_homotopy_category _ ‚ãô homotopy_category.homology_functor D _ n
@[simps]
def functor.right_derived_obj_iso (F : C ‚•§ D) [F.additive] (n : ‚Ñï)
  {X : C} (P : InjectiveResolution X) :
  (F.right_derived n).obj X ‚âÖ
    (homology_functor D _ n).obj ((F.map_homological_complex _).obj P.cocomplex) :=
(homotopy_category.homology_functor D _ n).map_iso
  (homotopy_category.iso_of_homotopy_equiv
    (F.map_homotopy_equiv (InjectiveResolution.homotopy_equiv _ P)))
  ‚â™‚â´ (homotopy_category.homology_factors D _ n).app _
@[simps]
def functor.right_derived_obj_injective_zero (F : C ‚•§ D) [F.additive]
  (X : C) [injective X] :
  (F.right_derived 0).obj X ‚âÖ F.obj X :=
F.right_derived_obj_iso 0 (InjectiveResolution.self X) ‚â™‚â´
  (homology_functor _ _ _).map_iso ((cochain_complex.single‚ÇÄ_map_homological_complex F).app X) ‚â™‚â´
  (cochain_complex.homology_functor_0_single‚ÇÄ D).app (F.obj X)
open_locale zero_object
@[simps inv]
def functor.right_derived_obj_injective_succ (F : C ‚•§ D) [F.additive] (n : ‚Ñï)
  (X : C) [injective X] :
  (F.right_derived (n+1)).obj X ‚âÖ 0 :=
F.right_derived_obj_iso (n+1) (InjectiveResolution.self X) ‚â™‚â´
  (homology_functor _ _ _).map_iso ((cochain_complex.single‚ÇÄ_map_homological_complex F).app X) ‚â™‚â´
  (cochain_complex.homology_functor_succ_single‚ÇÄ D n).app (F.obj X) ‚â™‚â´
  (functor.zero_obj _).iso_zero
lemma functor.right_derived_map_eq (F : C ‚•§ D) [F.additive] (n : ‚Ñï) {X Y : C} (f : Y ‚ü∂ X)
  {P : InjectiveResolution X} {Q : InjectiveResolution Y} (g : Q.cocomplex ‚ü∂ P.cocomplex)
  (w : Q.Œπ ‚â´ g = (cochain_complex.single‚ÇÄ C).map f ‚â´ P.Œπ) :
  (F.right_derived n).map f =
  (F.right_derived_obj_iso n Q).hom ‚â´
    (homology_functor D _ n).map ((F.map_homological_complex _).map g) ‚â´
    (F.right_derived_obj_iso n P).inv :=
begin
  dsimp only [functor.right_derived, functor.right_derived_obj_iso],
  dsimp, simp only [category.comp_id, category.id_comp],
  rw [‚Üêhomology_functor_map, homotopy_category.homology_functor_map_factors],
  simp only [‚Üêfunctor.map_comp],
  congr' 1,
  apply homotopy_category.eq_of_homotopy,
  apply functor.map_homotopy,
  apply homotopy.trans,
  exact homotopy_category.homotopy_out_map _,
  apply InjectiveResolution.desc_homotopy f,
  { simp, },
  { simp only [InjectiveResolution.homotopy_equiv_hom_Œπ_assoc],
    rw [‚Üêcategory.assoc, w, category.assoc],
    simp only [InjectiveResolution.homotopy_equiv_inv_Œπ], },
end
@[simps]
def nat_trans.right_derived {F G : C ‚•§ D} [F.additive] [G.additive] (Œ± : F ‚ü∂ G) (n : ‚Ñï) :
  F.right_derived n ‚ü∂ G.right_derived n :=
whisker_left (injective_resolutions C)
  (whisker_right (nat_trans.map_homotopy_category Œ± _)
    (homotopy_category.homology_functor D _ n))
@[simp] lemma nat_trans.right_derived_id (F : C ‚•§ D) [F.additive] (n : ‚Ñï) :
  nat_trans.right_derived (ùüô F) n = ùüô (F.right_derived n) :=
by { simp [nat_trans.right_derived], refl, }
@[simp, nolint simp_nf] lemma nat_trans.right_derived_comp
  {F G H : C ‚•§ D} [F.additive] [G.additive] [H.additive]
  (Œ± : F ‚ü∂ G) (Œ≤ : G ‚ü∂ H) (n : ‚Ñï) :
  nat_trans.right_derived (Œ± ‚â´ Œ≤) n = nat_trans.right_derived Œ± n ‚â´ nat_trans.right_derived Œ≤ n :=
by simp [nat_trans.right_derived]
lemma nat_trans.right_derived_eq {F G : C ‚•§ D} [F.additive] [G.additive] (Œ± : F ‚ü∂ G) (n : ‚Ñï)
  {X : C} (P : InjectiveResolution X) :
  (nat_trans.right_derived Œ± n).app X =
    (F.right_derived_obj_iso n P).hom ‚â´
      (homology_functor D _ n).map ((nat_trans.map_homological_complex Œ± _).app P.cocomplex) ‚â´
        (G.right_derived_obj_iso n P).inv :=
begin
  symmetry,
  dsimp [nat_trans.right_derived, functor.right_derived_obj_iso],
  simp only [category.comp_id, category.id_comp],
  rw [‚Üêhomology_functor_map, homotopy_category.homology_functor_map_factors],
  simp only [‚Üêfunctor.map_comp],
  congr' 1,
  apply homotopy_category.eq_of_homotopy,
  simp only [nat_trans.map_homological_complex_naturality_assoc,
    ‚Üêfunctor.map_comp],
  apply homotopy.comp_left_id,
  rw [‚Üêfunctor.map_id],
  apply functor.map_homotopy,
  apply homotopy_equiv.homotopy_hom_inv_id,
end
end category_theory
section
universes w v u
open category_theory.limits category_theory category_theory.functor
variables {C : Type u} [category.{w} C] {D : Type u} [category.{w} D]
variables (F : C ‚•§ D) {X Y Z : C} {f : X ‚ü∂ Y} {g : Y ‚ü∂ Z}
namespace category_theory.abelian.functor
open category_theory.preadditive
variables [abelian C] [abelian D] [additive F]
lemma preserves_exact_of_preserves_finite_limits_of_mono [preserves_finite_limits F] [mono f]
  (ex : exact f g) : exact (F.map f) (F.map g) :=
abelian.exact_of_is_kernel _ _ (by simp [‚Üê functor.map_comp, ex.w]) $
  limits.is_limit_fork_map_of_is_limit' _ ex.w (abelian.is_limit_of_exact_of_mono _ _ ex)
lemma exact_of_map_injective_resolution (P: InjectiveResolution X) [preserves_finite_limits F] :
  exact (F.map (P.Œπ.f 0))
    (((F.map_homological_complex (complex_shape.up ‚Ñï)).obj P.cocomplex).d_from 0) :=
preadditive.exact_of_iso_of_exact' (F.map (P.Œπ.f 0)) (F.map (P.cocomplex.d 0 1)) _ _
  (iso.refl _) (iso.refl _)
  (homological_complex.X_next_iso ((F.map_homological_complex _).obj P.cocomplex) rfl).symm
  (by simp)
  (by rw [iso.refl_hom, category.id_comp, iso.symm_hom, homological_complex.d_from_eq]; congr')
  (preserves_exact_of_preserves_finite_limits_of_mono _ (P.exact‚ÇÄ))
def right_derived_zero_to_self_app [enough_injectives C] [preserves_finite_limits F] {X : C}
  (P : InjectiveResolution X) :
  (F.right_derived 0).obj X ‚ü∂ F.obj X :=
(right_derived_obj_iso F 0 P).hom ‚â´ (homology_iso_kernel_desc _ _ _).hom ‚â´
  kernel.map _ _ (cokernel.desc _ (ùüô _) (by simp)) (ùüô _) (by { ext, simp }) ‚â´
  (as_iso (kernel.lift _ _ (exact_of_map_injective_resolution F P).w)).inv
def right_derived_zero_to_self_app_inv [enough_injectives C] {X : C}
  (P : InjectiveResolution X) :
  F.obj X ‚ü∂ (F.right_derived 0).obj X :=
homology.lift _ _ _ (F.map (P.Œπ.f 0) ‚â´ cokernel.œÄ _) begin
  have : (complex_shape.up ‚Ñï).rel 0 1 := rfl,
  rw [category.assoc, cokernel.œÄ_desc, homological_complex.d_from_eq _ this,
    map_homological_complex_obj_d, ‚Üê category.assoc, ‚Üê functor.map_comp],
  simp only [InjectiveResolution.Œπ_f_zero_comp_complex_d, functor.map_zero, zero_comp],
end ‚â´ (right_derived_obj_iso F 0 P).inv
lemma right_derived_zero_to_self_app_comp_inv [enough_injectives C] [preserves_finite_limits F]
  {X : C} (P : InjectiveResolution X) : right_derived_zero_to_self_app F P ‚â´
  right_derived_zero_to_self_app_inv F P = ùüô _ :=
begin
  dsimp [right_derived_zero_to_self_app, right_derived_zero_to_self_app_inv],
  rw [‚Üê category.assoc, iso.comp_inv_eq, category.id_comp, category.assoc, category.assoc,
    ‚Üê iso.eq_inv_comp, iso.inv_hom_id],
  ext,
  rw [category.assoc, category.assoc, homology.lift_Œπ, category.id_comp,
    homology.œÄ'_Œπ, category.assoc, ‚Üêcategory.assoc _ _ (cokernel.œÄ _), abelian.kernel.lift.inv,
    ‚Üê category.assoc, ‚Üê category.assoc _ (kernel.Œπ _), limits.kernel.lift_Œπ, category.assoc,
    category.assoc, ‚Üê category.assoc (homology_iso_kernel_desc _ _ _).hom _ _, ‚Üê homology.Œπ,
    ‚Üêcategory.assoc, homology.œÄ'_Œπ, category.assoc, ‚Üêcategory.assoc (cokernel.œÄ _), cokernel.œÄ_desc,
    whisker_eq],
  convert category.id_comp (cokernel.œÄ _),
end
lemma right_derived_zero_to_self_app_inv_comp [enough_injectives C] [preserves_finite_limits F]
  {X : C} (P : InjectiveResolution X) : right_derived_zero_to_self_app_inv F P ‚â´
  right_derived_zero_to_self_app F P = ùüô _ :=
begin
  dsimp [right_derived_zero_to_self_app, right_derived_zero_to_self_app_inv],
  rw [‚Üê category.assoc _ (F.right_derived_obj_iso 0 P).hom,
    category.assoc _ _ (F.right_derived_obj_iso 0 P).hom, iso.inv_hom_id, category.comp_id,
    ‚Üê category.assoc, ‚Üê category.assoc, is_iso.comp_inv_eq, category.id_comp],
  ext,
  simp only [limits.kernel.lift_Œπ_assoc, category.assoc, limits.kernel.lift_Œπ, homology.lift],
  rw [‚Üê category.assoc, ‚Üê category.assoc, category.assoc _ _ (homology_iso_kernel_desc _ _ _).hom],
  simp,
end
def right_derived_zero_to_self_app_iso [enough_injectives C] [preserves_finite_limits F]
  {X : C} (P : InjectiveResolution X) : (F.right_derived 0).obj X ‚âÖ F.obj X :=
{ hom := right_derived_zero_to_self_app _ P,
  inv := right_derived_zero_to_self_app_inv _ P,
  hom_inv_id' := right_derived_zero_to_self_app_comp_inv _ P,
  inv_hom_id' := right_derived_zero_to_self_app_inv_comp _ P }
lemma right_derived_zero_to_self_natural [enough_injectives C]
  {X : C} {Y : C} (f : X ‚ü∂ Y)
  (P : InjectiveResolution X) (Q : InjectiveResolution Y) :
  F.map f ‚â´ right_derived_zero_to_self_app_inv F Q =
  right_derived_zero_to_self_app_inv F P ‚â´ (F.right_derived 0).map f :=
begin
  dsimp [right_derived_zero_to_self_app_inv],
  simp only [category_theory.functor.map_id, category.id_comp, ‚Üê category.assoc],
  rw [iso.comp_inv_eq, right_derived_map_eq F 0 f (InjectiveResolution.desc f Q P) (by simp),
    category.assoc, category.assoc, category.assoc, category.assoc, iso.inv_hom_id,
    category.comp_id, ‚Üê category.assoc (F.right_derived_obj_iso 0 P).inv, iso.inv_hom_id,
    category.id_comp],
  dsimp only [homology_functor_map],
  ext,
  rw [category.assoc, homology.lift_Œπ, category.assoc, homology.map_Œπ,
    ‚Üêcategory.assoc (homology.lift _ _ _ _ _) _ _, homology.lift_Œπ, category.assoc, cokernel.œÄ_desc,
    ‚Üêcategory.assoc, ‚Üê functor.map_comp, ‚Üê category.assoc, homological_complex.hom.sq_from_left,
    map_homological_complex_map_f, ‚Üê functor.map_comp,
    show f ‚â´ Q.Œπ.f 0 = P.Œπ.f 0 ‚â´ (InjectiveResolution.desc f Q P).f 0,
    from homological_complex.congr_hom (InjectiveResolution.desc_commutes f Q P).symm 0],
end
def right_derived_zero_iso_self [enough_injectives C] [preserves_finite_limits F] :
  (F.right_derived 0) ‚âÖ F := iso.symm $
nat_iso.of_components (Œª X, (right_derived_zero_to_self_app_iso _ (InjectiveResolution.of X)).symm)
  (Œª X Y f, right_derived_zero_to_self_natural _ _ _ _)
end category_theory.abelian.functor
end
