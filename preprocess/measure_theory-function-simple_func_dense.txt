import measure_theory.integral.mean_inequalities
import topology.continuous_function.compact
import topology.metric_space.metrizable
open set function filter topological_space ennreal emetric finset
open_locale classical topological_space ennreal measure_theory big_operators
variables {Œ± Œ≤ Œπ E F ùïú : Type*}
noncomputable theory
namespace measure_theory
local infixr ` ‚Üí‚Çõ `:25 := simple_func
namespace simple_func
variables [measurable_space Œ±] [pseudo_emetric_space Œ±] [opens_measurable_space Œ±]
noncomputable def nearest_pt_ind (e : ‚Ñï ‚Üí Œ±) : ‚Ñï ‚Üí Œ± ‚Üí‚Çõ ‚Ñï
| 0 := const Œ± 0
| (N + 1) := piecewise (‚ãÇ k ‚â§ N, {x | edist (e (N + 1)) x < edist (e k) x})
    (measurable_set.Inter $ Œª k, measurable_set.Inter_Prop $ Œª hk,
      measurable_set_lt measurable_edist_right measurable_edist_right)
    (const Œ± $ N + 1) (nearest_pt_ind N)
noncomputable def nearest_pt (e : ‚Ñï ‚Üí Œ±) (N : ‚Ñï) : Œ± ‚Üí‚Çõ Œ± :=
(nearest_pt_ind e N).map e
@[simp] lemma nearest_pt_ind_zero (e : ‚Ñï ‚Üí Œ±) : nearest_pt_ind e 0 = const Œ± 0 := rfl
@[simp] lemma nearest_pt_zero (e : ‚Ñï ‚Üí Œ±) : nearest_pt e 0 = const Œ± (e 0) := rfl
lemma nearest_pt_ind_succ (e : ‚Ñï ‚Üí Œ±) (N : ‚Ñï) (x : Œ±) :
  nearest_pt_ind e (N + 1) x =
    if ‚àÄ k ‚â§ N, edist (e (N + 1)) x < edist (e k) x
    then N + 1 else nearest_pt_ind e N x :=
by { simp only [nearest_pt_ind, coe_piecewise, set.piecewise], congr, simp }
lemma nearest_pt_ind_le (e : ‚Ñï ‚Üí Œ±) (N : ‚Ñï) (x : Œ±) : nearest_pt_ind e N x ‚â§ N :=
begin
  induction N with N ihN, { simp },
  simp only [nearest_pt_ind_succ],
  split_ifs,
  exacts [le_rfl, ihN.trans N.le_succ]
end
lemma edist_nearest_pt_le (e : ‚Ñï ‚Üí Œ±) (x : Œ±) {k N : ‚Ñï} (hk : k ‚â§ N) :
  edist (nearest_pt e N x) x ‚â§ edist (e k) x :=
begin
  induction N with N ihN generalizing k,
  { simp [nonpos_iff_eq_zero.1 hk, le_refl] },
  { simp only [nearest_pt, nearest_pt_ind_succ, map_apply],
    split_ifs,
    { rcases hk.eq_or_lt with rfl|hk,
      exacts [le_rfl, (h k (nat.lt_succ_iff.1 hk)).le] },
    { push_neg at h,
      rcases h with ‚ü®l, hlN, hxl‚ü©,
      rcases hk.eq_or_lt with rfl|hk,
      exacts [(ihN hlN).trans hxl, ihN (nat.lt_succ_iff.1 hk)] } }
end
lemma tendsto_nearest_pt {e : ‚Ñï ‚Üí Œ±} {x : Œ±} (hx : x ‚àà closure (range e)) :
  tendsto (Œª N, nearest_pt e N x) at_top (ùìù x) :=
begin
  refine (at_top_basis.tendsto_iff nhds_basis_eball).2 (Œª Œµ hŒµ, _),
  rcases emetric.mem_closure_iff.1 hx Œµ hŒµ with ‚ü®_, ‚ü®N, rfl‚ü©, hN‚ü©,
  rw [edist_comm] at hN,
  exact ‚ü®N, trivial, Œª n hn, (edist_nearest_pt_le e x hn).trans_lt hN‚ü©
end
variables [measurable_space Œ≤] {f : Œ≤ ‚Üí Œ±}
noncomputable def approx_on (f : Œ≤ ‚Üí Œ±) (hf : measurable f) (s : set Œ±) (y‚ÇÄ : Œ±) (h‚ÇÄ : y‚ÇÄ ‚àà s)
  [separable_space s] (n : ‚Ñï) :
  Œ≤ ‚Üí‚Çõ Œ± :=
by haveI : nonempty s := ‚ü®‚ü®y‚ÇÄ, h‚ÇÄ‚ü©‚ü©;
  exact comp (nearest_pt (Œª k, nat.cases_on k y‚ÇÄ (coe ‚àò dense_seq s) : ‚Ñï ‚Üí Œ±) n) f hf
@[simp] lemma approx_on_zero {f : Œ≤ ‚Üí Œ±} (hf : measurable f) {s : set Œ±} {y‚ÇÄ : Œ±} (h‚ÇÄ : y‚ÇÄ ‚àà s)
  [separable_space s] (x : Œ≤) :
  approx_on f hf s y‚ÇÄ h‚ÇÄ 0 x = y‚ÇÄ :=
rfl
lemma approx_on_mem {f : Œ≤ ‚Üí Œ±} (hf : measurable f) {s : set Œ±} {y‚ÇÄ : Œ±} (h‚ÇÄ : y‚ÇÄ ‚àà s)
  [separable_space s] (n : ‚Ñï) (x : Œ≤) :
  approx_on f hf s y‚ÇÄ h‚ÇÄ n x ‚àà s :=
begin
  haveI : nonempty s := ‚ü®‚ü®y‚ÇÄ, h‚ÇÄ‚ü©‚ü©,
  suffices : ‚àÄ n, (nat.cases_on n y‚ÇÄ (coe ‚àò dense_seq s) : Œ±) ‚àà s, { apply this },
  rintro (_|n),
  exacts [h‚ÇÄ, subtype.mem _]
end
@[simp] lemma approx_on_comp {Œ≥ : Type*} [measurable_space Œ≥] {f : Œ≤ ‚Üí Œ±} (hf : measurable f)
  {g : Œ≥ ‚Üí Œ≤} (hg : measurable g) {s : set Œ±} {y‚ÇÄ : Œ±} (h‚ÇÄ : y‚ÇÄ ‚àà s) [separable_space s] (n : ‚Ñï) :
  approx_on (f ‚àò g) (hf.comp hg) s y‚ÇÄ h‚ÇÄ n = (approx_on f hf s y‚ÇÄ h‚ÇÄ n).comp g hg :=
rfl
lemma tendsto_approx_on {f : Œ≤ ‚Üí Œ±} (hf : measurable f) {s : set Œ±} {y‚ÇÄ : Œ±} (h‚ÇÄ : y‚ÇÄ ‚àà s)
  [separable_space s] {x : Œ≤} (hx : f x ‚àà closure s) :
  tendsto (Œª n, approx_on f hf s y‚ÇÄ h‚ÇÄ n x) at_top (ùìù $ f x) :=
begin
  haveI : nonempty s := ‚ü®‚ü®y‚ÇÄ, h‚ÇÄ‚ü©‚ü©,
  rw [‚Üê @subtype.range_coe _ s, ‚Üê image_univ, ‚Üê (dense_range_dense_seq s).closure_eq] at hx,
  simp only [approx_on, coe_comp],
  refine tendsto_nearest_pt (closure_minimal _ is_closed_closure hx),
  simp only [nat.range_cases_on, closure_union, range_comp coe],
  exact subset.trans (image_closure_subset_closure_image continuous_subtype_coe)
    (subset_union_right _ _)
end
lemma edist_approx_on_mono {f : Œ≤ ‚Üí Œ±} (hf : measurable f) {s : set Œ±} {y‚ÇÄ : Œ±} (h‚ÇÄ : y‚ÇÄ ‚àà s)
  [separable_space s] (x : Œ≤) {m n : ‚Ñï} (h : m ‚â§ n) :
  edist (approx_on f hf s y‚ÇÄ h‚ÇÄ n x) (f x) ‚â§ edist (approx_on f hf s y‚ÇÄ h‚ÇÄ m x) (f x) :=
begin
  dsimp only [approx_on, coe_comp, (‚àò)],
  exact edist_nearest_pt_le _ _ ((nearest_pt_ind_le _ _ _).trans h)
end
lemma edist_approx_on_le {f : Œ≤ ‚Üí Œ±} (hf : measurable f) {s : set Œ±} {y‚ÇÄ : Œ±} (h‚ÇÄ : y‚ÇÄ ‚àà s)
  [separable_space s] (x : Œ≤) (n : ‚Ñï) :
  edist (approx_on f hf s y‚ÇÄ h‚ÇÄ n x) (f x) ‚â§ edist y‚ÇÄ (f x) :=
edist_approx_on_mono hf h‚ÇÄ x (zero_le n)
lemma edist_approx_on_y0_le {f : Œ≤ ‚Üí Œ±} (hf : measurable f) {s : set Œ±} {y‚ÇÄ : Œ±} (h‚ÇÄ : y‚ÇÄ ‚àà s)
  [separable_space s] (x : Œ≤) (n : ‚Ñï) :
  edist y‚ÇÄ (approx_on f hf s y‚ÇÄ h‚ÇÄ n x) ‚â§ edist y‚ÇÄ (f x) + edist y‚ÇÄ (f x) :=
calc edist y‚ÇÄ (approx_on f hf s y‚ÇÄ h‚ÇÄ n x) ‚â§
  edist y‚ÇÄ (f x) + edist (approx_on f hf s y‚ÇÄ h‚ÇÄ n x) (f x) : edist_triangle_right _ _ _
... ‚â§ edist y‚ÇÄ (f x) + edist y‚ÇÄ (f x) : add_le_add_left (edist_approx_on_le hf h‚ÇÄ x n) _
end simple_func
end measure_theory
