import data.set.finite
import data.nat.modeq
import algebra.big_operators.order
universes u v w
variables {α : Type u} {β : Type v} {M : Type w} [decidable_eq β]
open nat
open_locale big_operators
namespace finset
variables {s : finset α} {t : finset β} {f : α → β} {w : α → M} {b : M} {n : ℕ}
section
variables [linear_ordered_cancel_add_comm_monoid M]
lemma exists_lt_sum_fiber_of_maps_to_of_nsmul_lt_sum (hf : ∀ a ∈ s, f a ∈ t)
  (hb : t.card • b < ∑ x in s, w x) :
  ∃ y ∈ t, b < ∑ x in s.filter (λ x, f x = y), w x :=
exists_lt_of_sum_lt $ by simpa only [sum_fiberwise_of_maps_to hf, sum_const]
lemma exists_sum_fiber_lt_of_maps_to_of_sum_lt_nsmul (hf : ∀ a ∈ s, f a ∈ t)
  (hb : (∑ x in s, w x) < t.card • b) :
  ∃ y ∈ t, (∑ x in s.filter (λ x, f x = y), w x) < b :=
@exists_lt_sum_fiber_of_maps_to_of_nsmul_lt_sum α β Mᵒᵈ _ _ _ _ _ _ _ hf hb
lemma exists_lt_sum_fiber_of_sum_fiber_nonpos_of_nsmul_lt_sum
  (ht : ∀ y ∉ t, (∑ x in s.filter (λ x, f x = y), w x) ≤ 0) (hb : t.card • b < ∑ x in s, w x) :
  ∃ y ∈ t, b < ∑ x in s.filter (λ x, f x = y), w x :=
exists_lt_of_sum_lt $
calc (∑ y in t, b) < ∑ x in s, w x : by simpa
... ≤ ∑ y in t, ∑ x in s.filter (λ x, f x = y), w x :
  sum_le_sum_fiberwise_of_sum_fiber_nonpos ht
lemma exists_sum_fiber_lt_of_sum_fiber_nonneg_of_sum_lt_nsmul
  (ht : ∀ y ∉ t, (0:M) ≤ ∑ x in s.filter (λ x, f x = y), w x) (hb : (∑ x in s, w x) < t.card • b) :
  ∃ y ∈ t, (∑ x in s.filter (λ x, f x = y), w x) < b :=
@exists_lt_sum_fiber_of_sum_fiber_nonpos_of_nsmul_lt_sum α β Mᵒᵈ _ _ _ _ _ _ _ ht hb
lemma exists_le_sum_fiber_of_maps_to_of_nsmul_le_sum (hf : ∀ a ∈ s, f a ∈ t) (ht : t.nonempty)
  (hb : t.card • b ≤ ∑ x in s, w x) :
  ∃ y ∈ t, b ≤ ∑ x in s.filter (λ x, f x = y), w x :=
exists_le_of_sum_le ht $ by simpa only [sum_fiberwise_of_maps_to hf, sum_const]
lemma exists_sum_fiber_le_of_maps_to_of_sum_le_nsmul (hf : ∀ a ∈ s, f a ∈ t) (ht : t.nonempty)
  (hb : (∑ x in s, w x) ≤ t.card • b) :
  ∃ y ∈ t, (∑ x in s.filter (λ x, f x = y), w x) ≤ b :=
@exists_le_sum_fiber_of_maps_to_of_nsmul_le_sum α β Mᵒᵈ _ _ _ _ _ _ _ hf ht hb
lemma exists_le_sum_fiber_of_sum_fiber_nonpos_of_nsmul_le_sum
  (hf : ∀ y ∉ t, (∑ x in s.filter (λ x, f x = y), w x) ≤ 0) (ht : t.nonempty)
  (hb : t.card • b ≤ ∑ x in s, w x) :
  ∃ y ∈ t, b ≤ ∑ x in s.filter (λ x, f x = y), w x :=
exists_le_of_sum_le ht $
calc (∑ y in t, b) ≤ ∑ x in s, w x : by simpa
... ≤ ∑ y in t, ∑ x in s.filter (λ x, f x = y), w x :
  sum_le_sum_fiberwise_of_sum_fiber_nonpos hf
lemma exists_sum_fiber_le_of_sum_fiber_nonneg_of_sum_le_nsmul
  (hf : ∀ y ∉ t, (0:M) ≤ ∑ x in s.filter (λ x, f x = y), w x) (ht : t.nonempty)
  (hb : (∑ x in s, w x) ≤ t.card • b) :
  ∃ y ∈ t, (∑ x in s.filter (λ x, f x = y), w x) ≤ b :=
@exists_le_sum_fiber_of_sum_fiber_nonpos_of_nsmul_le_sum α β Mᵒᵈ _ _ _ _ _ _ _ hf ht hb
end
variables [linear_ordered_comm_ring M]
lemma exists_lt_card_fiber_of_nsmul_lt_card_of_maps_to (hf : ∀ a ∈ s, f a ∈ t)
  (ht : t.card • b < s.card) :
  ∃ y ∈ t, b < (s.filter $ λ x, f x = y).card :=
begin
  simp_rw cast_card at ⊢ ht,
  exact exists_lt_sum_fiber_of_maps_to_of_nsmul_lt_sum hf ht,
end
lemma exists_lt_card_fiber_of_mul_lt_card_of_maps_to (hf : ∀ a ∈ s, f a ∈ t)
  (hn : t.card * n < s.card) :
  ∃ y ∈ t, n < (s.filter (λ x, f x = y)).card :=
begin
  simp only [card_eq_sum_ones],
  apply exists_lt_sum_fiber_of_maps_to_of_nsmul_lt_sum hf,
  simpa
end
lemma exists_card_fiber_lt_of_card_lt_nsmul (ht : ↑(s.card) < t.card • b) :
  ∃ y ∈ t, ↑((s.filter $ λ x, f x = y).card) < b :=
begin
  simp_rw cast_card at ⊢ ht,
  exact exists_sum_fiber_lt_of_sum_fiber_nonneg_of_sum_lt_nsmul
    (λ _ _, sum_nonneg $ λ _ _, zero_le_one) ht,
end
lemma exists_card_fiber_lt_of_card_lt_mul (hn : s.card < t.card * n) :
  ∃ y ∈ t, (s.filter (λ x, f x = y)).card < n:=
begin
  simp only [card_eq_sum_ones],
  apply exists_sum_fiber_lt_of_sum_fiber_nonneg_of_sum_lt_nsmul (λ _ _, nat.zero_le _),
  simpa
end
lemma exists_le_card_fiber_of_nsmul_le_card_of_maps_to (hf : ∀ a ∈ s, f a ∈ t) (ht : t.nonempty)
  (hb : t.card • b ≤ s.card) :
  ∃ y ∈ t, b ≤ (s.filter $ λ x, f x = y).card :=
begin
  simp_rw cast_card at ⊢ hb,
  exact exists_le_sum_fiber_of_maps_to_of_nsmul_le_sum hf ht hb,
end
lemma exists_le_card_fiber_of_mul_le_card_of_maps_to (hf : ∀ a ∈ s, f a ∈ t) (ht : t.nonempty)
  (hn : t.card * n ≤ s.card) :
  ∃ y ∈ t, n ≤ (s.filter (λ x, f x = y)).card :=
begin
  simp only [card_eq_sum_ones],
  apply exists_le_sum_fiber_of_maps_to_of_nsmul_le_sum hf ht,
  simpa
end
lemma exists_card_fiber_le_of_card_le_nsmul (ht : t.nonempty) (hb : ↑(s.card) ≤ t.card • b) :
  ∃ y ∈ t, ↑((s.filter $ λ x, f x = y).card) ≤ b :=
begin
  simp_rw cast_card at ⊢ hb,
  refine exists_sum_fiber_le_of_sum_fiber_nonneg_of_sum_le_nsmul
    (λ _ _, sum_nonneg $ λ _ _, zero_le_one) ht hb,
end
lemma exists_card_fiber_le_of_card_le_mul (ht : t.nonempty) (hn : s.card ≤ t.card * n) :
  ∃ y ∈ t, (s.filter (λ x, f x = y)).card ≤ n:=
begin
  simp only [card_eq_sum_ones],
  apply exists_sum_fiber_le_of_sum_fiber_nonneg_of_sum_le_nsmul (λ _ _, nat.zero_le _) ht,
  simpa
end
end finset
namespace fintype
open finset
variables [fintype α] [fintype β] (f : α → β) {w : α → M} {b : M} {n : ℕ}
section
variables [linear_ordered_cancel_add_comm_monoid M]
lemma exists_lt_sum_fiber_of_nsmul_lt_sum (hb : card β • b < ∑ x, w x) :
  ∃ y, b < ∑ x in univ.filter (λ x, f x = y), w x :=
let ⟨y, _, hy⟩ := exists_lt_sum_fiber_of_maps_to_of_nsmul_lt_sum (λ _ _, mem_univ _) hb in ⟨y, hy⟩
lemma exists_le_sum_fiber_of_nsmul_le_sum [nonempty β] (hb : card β • b ≤ ∑ x, w x) :
  ∃ y, b ≤ ∑ x in univ.filter (λ x, f x = y), w x :=
let ⟨y, _, hy⟩ :=
  exists_le_sum_fiber_of_maps_to_of_nsmul_le_sum (λ _ _, mem_univ _) univ_nonempty hb
in ⟨y, hy⟩
lemma exists_sum_fiber_lt_of_sum_lt_nsmul (hb : (∑ x, w x) < card β • b) :
  ∃ y, (∑ x in univ.filter (λ x, f x = y), w x) < b :=
@exists_lt_sum_fiber_of_nsmul_lt_sum α β Mᵒᵈ _ _ _ _ _ _ _ hb
lemma exists_sum_fiber_le_of_sum_le_nsmul [nonempty β] (hb : (∑ x, w x) ≤ card β • b) :
  ∃ y, (∑ x in univ.filter (λ x, f x = y), w x) ≤ b :=
@exists_le_sum_fiber_of_nsmul_le_sum α β Mᵒᵈ _ _ _ _ _ _ _ _ hb
end
variables [linear_ordered_comm_ring M]
lemma exists_lt_card_fiber_of_nsmul_lt_card (hb : card β • b < card α) :
  ∃ y : β, b < (univ.filter (λ x, f x = y)).card :=
let ⟨y, _, h⟩ := exists_lt_card_fiber_of_nsmul_lt_card_of_maps_to (λ _ _, mem_univ _) hb in ⟨y, h⟩
lemma exists_lt_card_fiber_of_mul_lt_card (hn : card β * n < card α) :
  ∃ y : β, n < (univ.filter (λ x, f x = y)).card :=
let ⟨y, _, h⟩ := exists_lt_card_fiber_of_mul_lt_card_of_maps_to (λ _ _, mem_univ _) hn in ⟨y, h⟩
lemma exists_card_fiber_lt_of_card_lt_nsmul (hb : ↑(card α) < card β • b) :
  ∃ y : β, ↑((univ.filter $ λ x, f x = y).card) < b :=
let ⟨y, _, h⟩ := exists_card_fiber_lt_of_card_lt_nsmul hb in ⟨y, h⟩
lemma exists_card_fiber_lt_of_card_lt_mul (hn : card α < card β * n) :
  ∃ y : β, (univ.filter (λ x, f x = y)).card < n :=
let ⟨y, _, h⟩ := exists_card_fiber_lt_of_card_lt_mul hn in ⟨y, h⟩
lemma exists_le_card_fiber_of_nsmul_le_card [nonempty β] (hb : card β • b ≤ card α) :
  ∃ y : β, b ≤ (univ.filter $ λ x, f x = y).card :=
let ⟨y, _, h⟩ := exists_le_card_fiber_of_nsmul_le_card_of_maps_to (λ _ _, mem_univ _) univ_nonempty
  hb in ⟨y, h⟩
lemma exists_le_card_fiber_of_mul_le_card [nonempty β] (hn : card β * n ≤ card α) :
  ∃ y : β, n ≤ (univ.filter (λ x, f x = y)).card :=
let ⟨y, _, h⟩ := exists_le_card_fiber_of_mul_le_card_of_maps_to (λ _ _, mem_univ _) univ_nonempty hn
in ⟨y, h⟩
lemma exists_card_fiber_le_of_card_le_nsmul [nonempty β] (hb : ↑(card α) ≤ card β • b) :
  ∃ y : β, ↑((univ.filter $ λ x, f x = y).card) ≤ b :=
let ⟨y, _, h⟩ := exists_card_fiber_le_of_card_le_nsmul univ_nonempty hb in ⟨y, h⟩
lemma exists_card_fiber_le_of_card_le_mul [nonempty β] (hn : card α ≤ card β * n) :
  ∃ y : β, (univ.filter (λ x, f x = y)).card ≤ n :=
let ⟨y, _, h⟩ := exists_card_fiber_le_of_card_le_mul univ_nonempty hn in ⟨y, h⟩
end fintype
namespace nat
open set
theorem exists_lt_modeq_of_infinite {s : set ℕ} (hs : s.infinite) {k : ℕ} (hk : 0 < k) :
  ∃ (m ∈ s) (n ∈ s), m < n ∧ m ≡ n [MOD k] :=
hs.exists_lt_map_eq_of_maps_to (λ n _, show n % k ∈ Iio k, from nat.mod_lt n hk) $
  finite_lt_nat k
end nat
