import category_theory.monoidal.braided
import category_theory.concrete_category.basic
universes u v
namespace category_theory
namespace monoidal_category
open iso
variables {C : Type u} [category.{v} C] [monoidal_category C] (P : C ‚Üí Prop)
class monoidal_predicate :=
(prop_id' : P (ùüô_ C) . obviously)
(prop_tensor' : ‚àÄ {X Y}, P X ‚Üí P Y ‚Üí P (X ‚äó Y) . obviously)
restate_axiom monoidal_predicate.prop_id'
restate_axiom monoidal_predicate.prop_tensor'
open monoidal_predicate
variables [monoidal_predicate P]
instance full_monoidal_subcategory : monoidal_category {X : C // P X} :=
{ tensor_obj := Œª X Y, ‚ü®X ‚äó Y, prop_tensor X.2 Y.2‚ü©,
  tensor_hom := Œª X‚ÇÅ Y‚ÇÅ X‚ÇÇ Y‚ÇÇ f g, by { change X‚ÇÅ.1 ‚äó X‚ÇÇ.1 ‚ü∂ Y‚ÇÅ.1 ‚äó Y‚ÇÇ.1,
    change X‚ÇÅ.1 ‚ü∂ Y‚ÇÅ.1 at f, change X‚ÇÇ.1 ‚ü∂ Y‚ÇÇ.1 at g, exact f ‚äó g },
  tensor_unit := ‚ü®ùüô_ C, prop_id‚ü©,
  associator := Œª X Y Z,
    ‚ü®(Œ±_ X.1 Y.1 Z.1).hom, (Œ±_ X.1 Y.1 Z.1).inv,
     hom_inv_id (Œ±_ X.1 Y.1 Z.1), inv_hom_id (Œ±_ X.1 Y.1 Z.1)‚ü©,
  left_unitor := Œª X, ‚ü®(Œª_ X.1).hom, (Œª_ X.1).inv, hom_inv_id (Œª_ X.1), inv_hom_id (Œª_ X.1)‚ü©,
  right_unitor := Œª X, ‚ü®(œÅ_ X.1).hom, (œÅ_ X.1).inv, hom_inv_id (œÅ_ X.1), inv_hom_id (œÅ_ X.1)‚ü©,
  tensor_id' := Œª X Y, tensor_id X.1 Y.1,
  tensor_comp' := Œª X‚ÇÅ Y‚ÇÅ Z‚ÇÅ X‚ÇÇ Y‚ÇÇ Z‚ÇÇ f‚ÇÅ f‚ÇÇ g‚ÇÅ g‚ÇÇ, tensor_comp f‚ÇÅ f‚ÇÇ g‚ÇÅ g‚ÇÇ,
  associator_naturality' := Œª X‚ÇÅ X‚ÇÇ X‚ÇÉ Y‚ÇÅ Y‚ÇÇ Y‚ÇÉ f‚ÇÅ f‚ÇÇ f‚ÇÉ, associator_naturality f‚ÇÅ f‚ÇÇ f‚ÇÉ,
  left_unitor_naturality' := Œª X Y f, left_unitor_naturality f,
  right_unitor_naturality' := Œª X Y f, right_unitor_naturality f,
  pentagon' := Œª W X Y Z, pentagon W.1 X.1 Y.1 Z.1,
  triangle' := Œª X Y, triangle X.1 Y.1 }
@[simps]
def full_monoidal_subcategory_inclusion : monoidal_functor {X : C // P X} C :=
{ to_functor := full_subcategory_inclusion P,
  Œµ := ùüô _,
  Œº := Œª X Y, ùüô _ }
instance full_monoidal_subcategory.full :
  full (full_monoidal_subcategory_inclusion P).to_functor := full_subcategory.full P
instance full_monoidal_subcategory.faithful :
  faithful (full_monoidal_subcategory_inclusion P).to_functor := full_subcategory.faithful P
variables {P} {P' : C ‚Üí Prop} [monoidal_predicate P']
@[simps]
def full_monoidal_subcategory.map (h : ‚àÄ ‚¶ÉX‚¶Ñ, P X ‚Üí P' X) :
  monoidal_functor {X : C // P X} {X : C // P' X}  :=
{ to_functor := full_subcategory.map h,
  Œµ := ùüô _,
  Œº := Œª X Y, ùüô _ }
instance full_monoidal_subcategory.map_full (h : ‚àÄ ‚¶ÉX‚¶Ñ, P X ‚Üí P' X) :
  full (full_monoidal_subcategory.map h).to_functor := { preimage := Œª X Y f, f }
instance full_monoidal_subcategory.map_faithful (h : ‚àÄ ‚¶ÉX‚¶Ñ, P X ‚Üí P' X) :
  faithful (full_monoidal_subcategory.map h).to_functor := {}
section braided
variables (P) [braided_category C]
instance full_braided_subcategory : braided_category {X : C // P X} :=
braided_category_of_faithful (full_monoidal_subcategory_inclusion P)
  (Œª X Y, ‚ü®(Œ≤_ X.1 Y.1).hom, (Œ≤_ X.1 Y.1).inv, (Œ≤_ X.1 Y.1).hom_inv_id, (Œ≤_ X.1 Y.1).inv_hom_id‚ü©)
  (Œª X Y, by tidy)
@[simps]
def full_braided_subcategory_inclusion : braided_functor {X : C // P X} C :=
{ to_monoidal_functor := full_monoidal_subcategory_inclusion P,
  braided' := Œª X Y, by { rw [is_iso.eq_inv_comp], tidy } }
instance full_braided_subcategory.full :
  full (full_braided_subcategory_inclusion P).to_functor := full_monoidal_subcategory.full P
instance full_braided_subcategory.faithful :
  faithful (full_braided_subcategory_inclusion P).to_functor := full_monoidal_subcategory.faithful P
variables {P}
@[simps]
def full_braided_subcategory.map (h : ‚àÄ ‚¶ÉX‚¶Ñ, P X ‚Üí P' X) :
  braided_functor {X : C // P X} {X : C // P' X}  :=
{ to_monoidal_functor := full_monoidal_subcategory.map h,
  braided' := Œª X Y, by { rw [is_iso.eq_inv_comp], tidy }  }
instance full_braided_subcategory.map_full (h : ‚àÄ ‚¶ÉX‚¶Ñ, P X ‚Üí P' X) :
  full (full_braided_subcategory.map h).to_functor := full_monoidal_subcategory.map_full h
instance full_braided_subcategory.map_faithful (h : ‚àÄ ‚¶ÉX‚¶Ñ, P X ‚Üí P' X) :
  faithful (full_braided_subcategory.map h).to_functor := full_monoidal_subcategory.map_faithful h
end braided
section symmetric
variables (P) [symmetric_category C]
instance full_symmetric_subcategory : symmetric_category {X : C // P X} :=
symmetric_category_of_faithful (full_braided_subcategory_inclusion P)
end symmetric
end monoidal_category
end category_theory
