import category_theory.sites.sheaf
import category_theory.limits.kan_extension
import category_theory.sites.cover_preserving
universes w v v‚ÇÅ v‚ÇÇ v‚ÇÉ u u‚ÇÅ u‚ÇÇ u‚ÇÉ
noncomputable theory
open category_theory
open opposite
open category_theory.presieve.family_of_elements
open category_theory.presieve
open category_theory.limits
namespace category_theory
section cover_lifting
variables {C : Type*} [category C] {D : Type*} [category D] {E : Type*} [category E]
variables (J : grothendieck_topology C) (K : grothendieck_topology D)
variables {L : grothendieck_topology E}
@[nolint has_inhabited_instance]
structure cover_lifting (G : C ‚•§ D) : Prop :=
(cover_lift : ‚àÄ {U : C} {S : sieve (G.obj U)} (hS : S ‚àà K (G.obj U)), S.functor_pullback G ‚àà J U)
lemma id_cover_lifting : cover_lifting J J (ùü≠ _) := ‚ü®Œª _ _ h, by simpa using h‚ü©
variables {J K}
lemma comp_cover_lifting {F : C ‚•§ D} (hu : cover_lifting J K F) {G : D ‚•§ E}
  (hv : cover_lifting K L G) : cover_lifting J L (F ‚ãô G) :=
‚ü®Œª _ S h, hu.cover_lift (hv.cover_lift h)‚ü©
end cover_lifting
variables {C D : Type u} [category.{v} C] [category.{v} D]
variables {A : Type w} [category.{max u v} A] [has_limits A]
variables {J : grothendieck_topology C} {K : grothendieck_topology D}
namespace Ran_is_sheaf_of_cover_lifting
variables {G : C ‚•§ D} (hu : cover_lifting J K G) (‚Ñ± : Sheaf J A)
variables {X : A} {U : D} (S : sieve U) (hS : S ‚àà K U)
instance (X : D·µí·µñ) : has_limits_of_shape (structured_arrow X G.op) A :=
begin
  haveI := limits.has_limits_of_size_shrink.{v (max u v) (max u v) (max u v)} A,
  exact has_limits_of_size.has_limits_of_shape _
end
variables (x : S.arrows.family_of_elements ((Ran G.op).obj ‚Ñ±.val ‚ãô coyoneda.obj (op X)))
variables (hx : x.compatible)
def pulledback_family (Y : structured_arrow (op U) G.op) :=
(((x.pullback Y.hom.unop).functor_pullback G).comp_presheaf_map
  (show _ ‚ü∂ _, from whisker_right ((Ran.adjunction A G.op).counit.app ‚Ñ±.val)
    (coyoneda.obj (op X))))
@[simp] lemma pulledback_family_apply (Y : structured_arrow (op U) G.op) {W} {f : W ‚ü∂ _} (Hf) :
  pulledback_family ‚Ñ± S x Y f Hf =
    x (G.map f ‚â´ Y.hom.unop) Hf ‚â´ ((Ran.adjunction A G.op).counit.app ‚Ñ±.val).app (op W) := rfl
variables {x} {S}
include hu hS hx
def get_section (Y : structured_arrow (op U) G.op) : X ‚ü∂ ‚Ñ±.val.obj Y.right :=
begin
  let hom_sh := whisker_right ((Ran.adjunction A G.op).counit.app ‚Ñ±.val) (coyoneda.obj (op X)),
  have S' := (K.pullback_stable Y.hom.unop hS),
  have hs' := ((hx.pullback Y.3.unop).functor_pullback G).comp_presheaf_map hom_sh,
  exact (‚Ñ±.2 X _ (hu.cover_lift S')).amalgamate _ hs'
end
lemma get_section_is_amalgamation (Y : structured_arrow (op U) G.op) :
  (pulledback_family ‚Ñ± S x Y).is_amalgamation (get_section hu ‚Ñ± hS hx Y) :=
is_sheaf_for.is_amalgamation _ _
lemma get_section_is_unique (Y : structured_arrow (op U) G.op)
  {y} (H : (pulledback_family ‚Ñ± S x Y).is_amalgamation y) : y = get_section hu ‚Ñ± hS hx Y :=
begin
  apply is_sheaf_for.is_separated_for _ (pulledback_family ‚Ñ± S x Y),
  { exact H },
  { apply get_section_is_amalgamation },
  { exact ‚Ñ±.2 X _ (hu.cover_lift (K.pullback_stable Y.hom.unop hS)) }
end
@[simp] lemma get_section_commute {Y Z : structured_arrow (op U) G.op} (f : Y ‚ü∂ Z) :
  get_section hu ‚Ñ± hS hx Y ‚â´ ‚Ñ±.val.map f.right = get_section hu ‚Ñ± hS hx Z :=
begin
  apply get_section_is_unique,
  intros V' fV' hV',
  have eq : Z.hom = Y.hom ‚â´ (G.map f.right.unop).op,
  { convert f.w, erw category.id_comp },
  rw eq at hV',
  convert get_section_is_amalgamation hu ‚Ñ± hS hx Y (fV' ‚â´ f.right.unop) _ using 1,
  { tidy },
  { simp only [eq, quiver.hom.unop_op, pulledback_family_apply,
    functor.map_comp, unop_comp, category.assoc] },
  { change S (G.map _ ‚â´ Y.hom.unop),
    simpa only [functor.map_comp, category.assoc] using hV' }
end
def glued_limit_cone : limits.cone (Ran.diagram G.op ‚Ñ±.val (op U)) :=
{ X := X, œÄ := { app := Œª Y, get_section hu ‚Ñ± hS hx Y, naturality' := Œª Y Z f, by tidy } }
@[simp] lemma glued_limit_cone_œÄ_app (W) : (glued_limit_cone hu ‚Ñ± hS hx).œÄ.app W =
  get_section hu ‚Ñ± hS hx W := rfl
def glued_section : X ‚ü∂ ((Ran G.op).obj ‚Ñ±.val).obj (op U) :=
limit.lift _ (glued_limit_cone hu ‚Ñ± hS hx)
lemma helper {V} (f : V ‚ü∂ U) (y : X ‚ü∂ ((Ran G.op).obj ‚Ñ±.val).obj (op V)) (W)
  (H : ‚àÄ {V'} {fV : G.obj V' ‚ü∂ V} (hV), y ‚â´ ((Ran G.op).obj ‚Ñ±.val).map fV.op = x (fV ‚â´ f) hV) :
  y ‚â´ limit.œÄ (Ran.diagram G.op ‚Ñ±.val (op V)) W =
    (glued_limit_cone hu ‚Ñ± hS hx).œÄ.app ((structured_arrow.map f.op).obj W) :=
begin
  dsimp only [glued_limit_cone_œÄ_app],
  apply get_section_is_unique hu ‚Ñ± hS hx ((structured_arrow.map f.op).obj W),
  intros V' fV' hV',
  dsimp only [Ran.adjunction, Ran.equiv, pulledback_family_apply],
  erw [adjunction.adjunction_of_equiv_right_counit_app],
  have : y ‚â´ ((Ran G.op).obj ‚Ñ±.val).map (G.map fV' ‚â´ W.hom.unop).op =
    x (G.map fV' ‚â´ W.hom.unop ‚â´ f) (by simpa only using hV'),
  { convert H (show S ((G.map fV' ‚â´ W.hom.unop) ‚â´ f),
      by simpa only [category.assoc] using hV') using 2,
    simp only [category.assoc] },
  simp only [quiver.hom.unop_op, equiv.symm_symm, structured_arrow.map_obj_hom, unop_comp,
    equiv.coe_fn_mk, functor.comp_map, coyoneda_obj_map, category.assoc, ‚Üê this, op_comp,
    Ran_obj_map, nat_trans.id_app],
  erw [category.id_comp, limit.pre_œÄ],
  congr,
  convert limit.w (Ran.diagram G.op ‚Ñ±.val (op V)) (structured_arrow.hom_mk' W fV'.op),
  rw structured_arrow.map_mk,
  erw category.comp_id,
  simp only [quiver.hom.unop_op, functor.op_map, quiver.hom.op_unop]
end
lemma glued_section_is_amalgamation : x.is_amalgamation (glued_section hu ‚Ñ± hS hx) :=
begin
  intros V fV hV,
  ext W,
  simp only [functor.comp_map, limit.lift_pre, coyoneda_obj_map, Ran_obj_map, glued_section],
  erw limit.lift_œÄ,
  symmetry,
  convert helper hu ‚Ñ± hS hx _ (x fV hV) _ _ using 1,
  intros V' fV' hV',
  convert hx (fV') (ùüô _) hV hV' (by rw category.id_comp),
  simp only [op_id, functor_to_types.map_id_apply]
end
lemma glued_section_is_unique (y) (hy: x.is_amalgamation y) : y = glued_section hu ‚Ñ± hS hx :=
begin
  unfold glued_section limit.lift,
  ext W,
  erw limit.lift_œÄ,
  convert helper hu ‚Ñ± hS hx (ùüô _) y W _,
  { simp only [op_id, structured_arrow.map_id] },
  { intros V' fV' hV',
    convert hy fV' (by simpa only [category.comp_id] using hV'),
    erw category.comp_id }
end
end Ran_is_sheaf_of_cover_lifting
theorem Ran_is_sheaf_of_cover_lifting {G : C ‚•§ D} (hG : cover_lifting J K G) (‚Ñ± : Sheaf J A) :
  presheaf.is_sheaf K ((Ran G.op).obj ‚Ñ±.val) :=
begin
  intros X U S hS x hx,
  split, swap,
  { apply Ran_is_sheaf_of_cover_lifting.glued_section hG ‚Ñ± hS hx },
  split,
  { apply Ran_is_sheaf_of_cover_lifting.glued_section_is_amalgamation },
  { apply Ran_is_sheaf_of_cover_lifting.glued_section_is_unique }
end
variable (A)
def sites.copullback {G : C ‚•§ D} (hG : cover_lifting J K G) :
  Sheaf J A ‚•§ Sheaf K A :=
{ obj := Œª ‚Ñ±, ‚ü®(Ran G.op).obj ‚Ñ±.val, Ran_is_sheaf_of_cover_lifting hG ‚Ñ±‚ü©,
  map := Œª _ _ f, ‚ü®(Ran G.op).map f.val‚ü©,
  map_id' := Œª ‚Ñ±, Sheaf.hom.ext _ _ $ (Ran G.op).map_id ‚Ñ±.val,
  map_comp' := Œª _ _ _ f g, Sheaf.hom.ext _ _ $ (Ran G.op).map_comp f.val g.val }
@[simps unit_app_val counit_app_val] noncomputable
def sites.pullback_copullback_adjunction {G : C ‚•§ D} (Hp : cover_preserving J K G)
  (Hl : cover_lifting J K G) (Hc : compatible_preserving K G) :
  sites.pullback A Hc Hp ‚ä£ sites.copullback A Hl :=
{ hom_equiv := Œª X Y,
  { to_fun := Œª f, ‚ü®(Ran.adjunction A G.op).hom_equiv X.val Y.val f.val‚ü©,
    inv_fun := Œª f, ‚ü®((Ran.adjunction A G.op).hom_equiv X.val Y.val).symm f.val‚ü©,
    left_inv := Œª f, by { ext1, dsimp, rw [equiv.symm_apply_apply] },
    right_inv := Œª f, by { ext1, dsimp, rw [equiv.apply_symm_apply] } },
  unit := { app := Œª X, ‚ü®(Ran.adjunction A G.op).unit.app X.val‚ü©,
    naturality' := Œª _ _ f, Sheaf.hom.ext _ _ $ (Ran.adjunction A G.op).unit.naturality f.val },
  counit := { app := Œª X, ‚ü®(Ran.adjunction A G.op).counit.app X.val‚ü©,
    naturality' := Œª _ _ f, Sheaf.hom.ext _ _ $ (Ran.adjunction A G.op).counit.naturality f.val },
  hom_equiv_unit' := Œª X Y f, by { ext1, apply (Ran.adjunction A G.op).hom_equiv_unit },
  hom_equiv_counit' := Œª X Y f, by { ext1, apply (Ran.adjunction A G.op).hom_equiv_counit } }
end category_theory
