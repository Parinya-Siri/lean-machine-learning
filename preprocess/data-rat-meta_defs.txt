import data.rat.defs
import tactic.core
meta def rat.mk_numeral (type has_zero has_one has_add has_neg has_div : expr) : ℚ → expr
| ⟨num, denom, _, _⟩ :=
  let nume := num.mk_numeral type has_zero has_one has_add has_neg in
  if denom = 1 then nume else
    let dene := denom.mk_numeral type has_zero has_one has_add in
    `(@has_div.div.{0} %%type %%has_div %%nume %%dene)
section
meta instance rat.reflect : has_reflect ℚ :=
rat.mk_numeral `(ℚ) `(by apply_instance : has_zero ℚ)
  `(by apply_instance : has_one ℚ) `(by apply_instance : has_add ℚ)
  `(by apply_instance : has_neg ℚ) `(by apply_instance : has_div ℚ)
end
meta def rat.to_pexpr (q : ℚ) : pexpr :=
let n := q.num,
    d := q.denom in
if d = 1 then n.to_pexpr
else ``(%%n.to_pexpr / %%d.to_pexpr)
protected meta def expr.to_nonneg_rat : expr → option ℚ
| `(%%e₁ / %%e₂) := do
  m ← e₁.to_nat,
  n ← e₂.to_nat,
  if c : m.coprime n then if h : 1 < n then
    return ⟨m, n, lt_trans zero_lt_one h, c⟩
  else none else none
| e := do n ← e.to_nat, return (rat.of_int n)
protected meta def expr.to_rat : expr → option ℚ
| `(has_neg.neg %%e) := do q ← e.to_nonneg_rat, some (-q)
| e                  := e.to_nonneg_rat
protected meta def expr.eval_rat : expr → option ℚ
| `(has_zero.zero) := some 0
| `(has_one.one) := some 1
| `(bit0 %%q) := (*) 2 <$> q.eval_rat
| `(bit1 %%q) := (+) 1 <$> (*) 2 <$> q.eval_rat
| `(%%a + %%b) := (+) <$> a.eval_rat <*> b.eval_rat
| `(%%a - %%b) := has_sub.sub <$> a.eval_rat <*> b.eval_rat
| `(%%a * %%b) := (*) <$> a.eval_rat <*> b.eval_rat
| `(%%a / %%b) := (/) <$> a.eval_rat <*> b.eval_rat
| `(-(%%a)) := has_neg.neg <$> a.eval_rat
| `((%%a)⁻¹) := has_inv.inv <$> a.eval_rat
| _ := none
protected meta def expr.of_rat (α : expr) : ℚ → tactic expr
| ⟨(n:ℕ), d, h, c⟩   := do
  e₁ ← expr.of_nat α n,
  if d = 1 then return e₁ else
  do e₂ ← expr.of_nat α d,
  tactic.mk_app ``has_div.div [e₁, e₂]
| ⟨-[1+n], d, h, c⟩ := do
  e₁ ← expr.of_nat α (n+1),
  e ← (if d = 1 then return e₁ else do
    e₂ ← expr.of_nat α d,
    tactic.mk_app ``has_div.div [e₁, e₂]),
  tactic.mk_app ``has_neg.neg [e]
namespace tactic
namespace instance_cache
protected meta def of_rat (c : instance_cache) : ℚ → tactic (instance_cache × expr)
| ⟨(n:ℕ), d, _, _⟩   :=
  if d = 1 then c.of_nat n else do
    (c, e₁) ← c.of_nat n,
    (c, e₂) ← c.of_nat d,
    c.mk_app ``has_div.div [e₁, e₂]
| ⟨-[1+n], d, _, _⟩ := do
  (c, e) ← (if d = 1 then c.of_nat (n+1) else do
    (c, e₁) ← c.of_nat (n+1),
    (c, e₂) ← c.of_nat d,
    c.mk_app ``has_div.div [e₁, e₂]),
  c.mk_app ``has_neg.neg [e]
end instance_cache
end tactic
