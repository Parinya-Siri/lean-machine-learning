import category_theory.abelian.pseudoelements
open category_theory (hiding comp_apply)
open category_theory.abelian.pseudoelement
open category_theory.limits
universes v u
variables {V : Type u} [category.{v} V] [abelian V]
local attribute [instance] preadditive.has_equalizers_of_has_kernels
open_locale pseudoelement
namespace category_theory.abelian
variables {A B C D A' B' C' D' : V}
variables {f : A ⟶ B} {g : B ⟶ C} {h : C ⟶ D}
variables {f' : A' ⟶ B'} {g' : B' ⟶ C'} {h' : C' ⟶ D'}
variables {α : A ⟶ A'} {β : B ⟶ B'} {γ : C ⟶ C'} {δ : D ⟶ D'}
variables (comm₁ : α ≫ f' = f ≫ β) (comm₂ : β ≫ g' = g ≫ γ) (comm₃ : γ ≫ h' = h ≫ δ)
include comm₁ comm₂ comm₃
section
variables (hfg : exact f g) (hgh : exact g h) (hf'g' : exact f' g')
lemma mono_of_epi_of_mono_of_mono (hα : epi α) (hβ : mono β) (hδ : mono δ) : mono γ :=
mono_of_zero_of_map_zero _ $ λ c hc,
  have h c = 0, from
    suffices δ (h c) = 0, from zero_of_map_zero _ (pseudo_injective_of_mono _) _ this,
    calc δ (h c) = h' (γ c) : by rw [←comp_apply, ←comm₃, comp_apply]
             ... = h' 0     : by rw hc
             ... = 0        : apply_zero _,
  exists.elim ((pseudo_exact_of_exact hgh).2 _ this) $ λ b hb,
    have g' (β b) = 0, from
      calc g' (β b) = γ (g b) : by rw [←comp_apply, comm₂, comp_apply]
                ... = γ c     : by rw hb
                ... = 0       : hc,
    exists.elim ((pseudo_exact_of_exact hf'g').2 _ this) $ λ a' ha',
      exists.elim (pseudo_surjective_of_epi α a') $ λ a ha,
      have f a = b, from
        suffices β (f a) = β b, from pseudo_injective_of_mono _ this,
        calc β (f a) = f' (α a) : by rw [←comp_apply, ←comm₁, comp_apply]
                 ... = f' a'    : by rw ha
                 ... = β b      : ha',
      calc c = g b     : hb.symm
         ... = g (f a) : by rw this
         ... = 0       : (pseudo_exact_of_exact hfg).1 _
end
section
variables (hgh : exact g h) (hf'g' : exact f' g') (hg'h' : exact g' h')
lemma epi_of_epi_of_epi_of_mono (hα : epi α) (hγ : epi γ) (hδ : mono δ) : epi β :=
preadditive.epi_of_cancel_zero _ $ λ R r hβr,
  have hf'r : f' ≫ r = 0, from limits.zero_of_epi_comp α $
    calc α ≫ f' ≫ r = f ≫ β ≫ r : by rw reassoc_of comm₁
                 ... = f ≫ 0      : by rw hβr
                 ... = 0           : has_zero_morphisms.comp_zero _ _,
  let y : R ⟶ pushout r g' := pushout.inl, z : C' ⟶ pushout r g' := pushout.inr in
  have mono y, from mono_inl_of_factor_thru_epi_mono_factorization r g' (cokernel.π f')
    (cokernel.desc f' g' hf'g'.w) (by simp) (cokernel.desc f' r hf'r) (by simp) _
    (colimit.is_colimit _),
  have hz : g ≫ γ ≫ z = 0, from
    calc g ≫ γ ≫ z = β ≫ g' ≫ z : by rw ←reassoc_of comm₂
                ... = β ≫ r ≫ y  : by rw ←pushout.condition
                ... = 0 ≫ y       : by rw reassoc_of hβr
                ... = 0           : has_zero_morphisms.zero_comp _ _,
  let v : pushout r g' ⟶ pushout (γ ≫ z) (h ≫ δ) := pushout.inl,
      w : D' ⟶ pushout (γ ≫ z) (h ≫ δ) := pushout.inr in
  have mono v, from mono_inl_of_factor_thru_epi_mono_factorization _ _ (cokernel.π g)
    (cokernel.desc g h hgh.w ≫ δ) (by simp) (cokernel.desc _ _ hz) (by simp) _
    (colimit.is_colimit _),
  have hzv : z ≫ v = h' ≫ w, from (cancel_epi γ).1 $
    calc γ ≫ z ≫ v = h ≫ δ ≫ w  : by rw [←category.assoc, pushout.condition, category.assoc]
                ... = γ ≫ h' ≫ w : by rw reassoc_of comm₃,
  suffices (r ≫ y) ≫ v = 0, by exactI zero_of_comp_mono _ (zero_of_comp_mono _ this),
  calc (r ≫ y) ≫ v = g' ≫ z ≫ v : by rw [pushout.condition, category.assoc]
                ... = g' ≫ h' ≫ w : by rw hzv
                ... = 0 ≫ w        : hg'h'.w_assoc _
                ... = 0            : has_zero_morphisms.zero_comp _ _
end
section five
variables {E E' : V} {i : D ⟶ E} {i' : D' ⟶ E'} {ε : E ⟶ E'} (comm₄ : δ ≫ i' = i ≫ ε)
variables (hfg : exact f g) (hgh : exact g h) (hhi : exact h i)
variables (hf'g' : exact f' g') (hg'h' : exact g' h') (hh'i' : exact h' i')
variables [is_iso α] [is_iso β] [is_iso δ] [is_iso ε]
include comm₄ hfg hgh hhi hf'g' hg'h' hh'i'
lemma is_iso_of_is_iso_of_is_iso_of_is_iso_of_is_iso : is_iso γ :=
have mono γ, by apply mono_of_epi_of_mono_of_mono comm₁ comm₂ comm₃ hfg hgh hf'g'; apply_instance,
have epi γ, by apply epi_of_epi_of_epi_of_mono comm₂ comm₃ comm₄ hhi hg'h' hh'i'; apply_instance,
by exactI is_iso_of_mono_of_epi _
end five
end category_theory.abelian
