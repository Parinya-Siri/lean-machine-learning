import group_theory.free_group
universes u
class is_free_group (G : Type u) [group G] :=
(generators : Type u)
(mul_equiv [] : free_group generators ≃* G)
instance (X : Type*) : is_free_group (free_group X) :=
{ generators := X,
  mul_equiv := mul_equiv.refl _ }
namespace is_free_group
variables (G : Type*) [group G] [is_free_group G]
@[simps] def to_free_group : G ≃* free_group (generators G) := (mul_equiv G).symm
variable {G}
def of : generators G → G := (mul_equiv G).to_fun ∘ free_group.of
@[simp] lemma of_eq_free_group_of {A : Type u} : (@of (free_group A) _ _ ) = free_group.of := rfl
variables {H : Type*} [group H]
def lift : (generators G → H) ≃ (G →* H) :=
free_group.lift.trans
  { to_fun := λ f, f.comp (mul_equiv G).symm.to_monoid_hom,
    inv_fun := λ f, f.comp (mul_equiv G).to_monoid_hom,
    left_inv := λ f, by { ext, simp, },
    right_inv := λ f, by { ext, simp, }, }
@[simp] lemma lift'_eq_free_group_lift {A : Type u} :
  (@lift (free_group A) _ _ H _) = free_group.lift := rfl
@[simp] lemma lift_of (f : generators G → H) (a : generators G) : lift f (of a) = f a :=
congr_fun (lift.symm_apply_apply f) a
@[simp] lemma lift_symm_apply (f : G →* H) (a : generators G) : (lift.symm f) a = f (of a) :=
rfl
@[ext] lemma ext_hom ⦃f g : G →* H⦄ (h : ∀ (a : generators G), f (of a) = g (of a)) : f = g :=
lift.symm.injective (funext h)
lemma unique_lift (f : generators G → H) : ∃! F : G →* H, ∀ a, F (of a) = f a :=
by simpa only [function.funext_iff] using lift.symm.bijective.exists_unique f
def of_lift {G : Type u} [group G] (X : Type u)
  (of : X → G)
  (lift : ∀ {H : Type u} [group H], by exactI (X → H) ≃ (G →* H))
  (lift_of : ∀ {H : Type u} [group H], by exactI ∀ (f : X → H) a, lift f (of a) = f a) :
  is_free_group G :=
{ generators := X,
  mul_equiv := monoid_hom.to_mul_equiv
    (free_group.lift of)
    (lift free_group.of)
    begin
      apply free_group.ext_hom, intro x,
      simp only [monoid_hom.coe_comp, function.comp_app, monoid_hom.id_apply, free_group.lift.of,
        lift_of],
    end
    begin
      let lift_symm_of : ∀ {H : Type u} [group H], by exactI ∀ (f : G →* H) a,
        lift.symm f a = f (of a) := by introsI H _ f a; simp [← lift_of (lift.symm f)],
      apply lift.symm.injective, ext x,
      simp only [monoid_hom.coe_comp, function.comp_app, monoid_hom.id_apply,
        free_group.lift.of, lift_of, lift_symm_of],
    end }
noncomputable
def of_unique_lift {G : Type u} [group G] (X : Type u)
  (of : X → G)
  (h : ∀ {H : Type u} [group H] (f : X → H), by exactI ∃! F : G →* H, ∀ a, F (of a) = f a) :
  is_free_group G :=
let lift {H : Type u} [group H] : by exactI (X → H) ≃ (G →* H) := by exactI
  { to_fun := λ f, classical.some (h f),
    inv_fun := λ F, F ∘ of,
    left_inv := λ f, funext (classical.some_spec (h f)).left,
    right_inv := λ F, ((classical.some_spec (h (F ∘ of))).right F (λ _, rfl)).symm } in
let lift_of {H : Type u} [group H] (f : X → H) (a : X) : by exactI lift f (of a) = f a :=
  by exactI congr_fun (lift.symm_apply_apply f) a in
of_lift X of @lift @lift_of
def of_mul_equiv {H : Type*} [group H] (h : G ≃* H) : is_free_group H :=
{ generators := generators G, mul_equiv := (mul_equiv G).trans h }
end is_free_group
