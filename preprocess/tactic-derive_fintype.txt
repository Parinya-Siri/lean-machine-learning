import data.fintype.basic
namespace derive_fintype
def finset_above (α) (enum : α → ℕ) (n : ℕ) :=
{s : finset α // ∀ x ∈ s, n ≤ enum x}
def mk_fintype {α} (enum : α → ℕ) (s : finset_above α enum 0) (H : ∀ x, x ∈ s.1) :
  fintype α := ⟨s.1, H⟩
def finset_above.cons {α} {enum : α → ℕ} (n)
  (a : α) (h : enum a = n) (s : finset_above α enum (n+1)) : finset_above α enum n :=
begin
  refine ⟨finset.cons a s.1 _, _⟩,
  { intro h',
    have := s.2 _ h', rw h at this,
    exact nat.not_succ_le_self n this },
  { intros x h', rcases finset.mem_cons.1 h' with rfl | h',
    { exact ge_of_eq h },
    { exact nat.le_of_succ_le (s.2 _ h') } }
end
theorem finset_above.mem_cons_self {α} {enum : α → ℕ} {n a h s} :
  a ∈ (@finset_above.cons α enum n a h s).1 := multiset.mem_cons_self _ _
theorem finset_above.mem_cons_of_mem {α} {enum : α → ℕ} {n a h s b} :
  b ∈ (s : finset_above _ _ _).1 → b ∈ (@finset_above.cons α enum n a h s).1 :=
multiset.mem_cons_of_mem
def finset_above.nil {α} {enum : α → ℕ} (n) : finset_above α enum n := ⟨∅, by rintro _ ⟨⟩⟩
instance (α enum n) : inhabited (finset_above α enum n) := ⟨finset_above.nil _⟩
@[nolint has_inhabited_instance]
def finset_in {α} (P : α → Prop) := {s : finset α // ∀ x ∈ s, P x}
def finset_in.mk {α} {P : α → Prop} (Γ) [fintype Γ]
  (f : Γ → α) (inj : function.injective f) (mem : ∀ x, P (f x)) : finset_in P :=
⟨finset.univ.map ⟨f, inj⟩,
 λ x h, by rcases finset.mem_map.1 h with ⟨x, _, rfl⟩; exact mem x⟩
theorem finset_in.mem_mk {α} {P : α → Prop} {Γ} {s : fintype Γ} {f : Γ → α} {inj mem a}
  (b) (H : f b = a) : a ∈ (@finset_in.mk α P Γ s f inj mem).1 :=
finset.mem_map.2 ⟨_, finset.mem_univ _, H⟩
def finset_above.union {α} {enum : α → ℕ} (n)
  (s : finset_in (λ a, enum a = n)) (t : finset_above α enum (n+1)) : finset_above α enum n :=
begin
  refine ⟨finset.disj_union s.1 t.1 _, _⟩,
  { intros a hs ht,
    have := t.2 _ ht, rw s.2 _ hs at this,
    exact nat.not_succ_le_self n this },
  { intros x h', rcases finset.mem_disj_union.1 h' with h' | h',
    { exact ge_of_eq (s.2 _ h') },
    { exact nat.le_of_succ_le (t.2 _ h') } }
end
theorem finset_above.mem_union_left {α} {enum : α → ℕ} {n s t a}
  (H : a ∈ (s : finset_in _).1) : a ∈ (@finset_above.union α enum n s t).1 :=
multiset.mem_add.2 (or.inl H)
theorem finset_above.mem_union_right {α} {enum : α → ℕ} {n s t a}
  (H : a ∈ (t : finset_above _ _ _).1) : a ∈ (@finset_above.union α enum n s t).1 :=
multiset.mem_add.2 (or.inr H)
end derive_fintype
namespace tactic
open derive_fintype tactic expr
namespace derive_fintype
meta def mk_sigma : expr → tactic expr
| (expr.pi n bi d b) := do
  p ← mk_local' n bi d,
  e ← mk_sigma (expr.instantiate_var b p),
  tactic.mk_app ``psigma [d, bind_lambda e p]
| _ := pure `(unit)
meta def mk_sigma_elim : expr → expr → tactic ℕ
| (expr.pi n bi d b) c := do
  refine ``(@psigma.elim %%d _ _ _),
  i ← intro_fresh n,
  (+ 1) <$> mk_sigma_elim (expr.instantiate_var b i) (c i)
| _ c := do intro1, exact c $> 0
meta def mk_sigma_elim_inj : ℕ → expr → expr → tactic unit
| (m+1) x y := do
  [(_, [x1, x2])] ← cases x,
  [(_, [y1, y2])] ← cases y,
  mk_sigma_elim_inj m x2 y2
| 0 x y := do
  cases x, cases y,
  is ← intro1 >>= injection,
  is.mmap' cases,
  reflexivity
meta def mk_sigma_elim_eq : ℕ → expr → tactic unit
| (n+1) x := do
  [(_, [x1, x2])] ← cases x,
  mk_sigma_elim_eq n x2
| 0 x := reflexivity
meta def mk_finset (ls : list level) (args : list expr) : ℕ → list name → tactic unit
| k (c::cs) := do
  let e := (expr.const c ls).mk_app args,
  t ← infer_type e,
  if is_pi t then do
    to_expr ``(finset_above.union %%(reflect k)) tt ff >>=
      (λ c, apply c {new_goals := new_goals.all}),
    Γ ← mk_sigma t,
    to_expr ``(finset_in.mk %%Γ) tt ff >>= (λ c, apply c {new_goals := new_goals.all}),
    n ← mk_sigma_elim t e,
    intro1 >>= (λ x, intro1 >>= mk_sigma_elim_inj n x),
    intro1 >>= mk_sigma_elim_eq n,
    mk_finset (k+1) cs
  else do
    c ← to_expr ``(finset_above.cons %%(reflect k) %%e) tt ff,
    apply c {new_goals := new_goals.all}, reflexivity,
    mk_finset (k+1) cs
| k [] := applyc ``finset_above.nil
meta def mk_sigma_mem : list expr → tactic unit
| (x::xs) := fconstructor >> exact x >> mk_sigma_mem xs
| [] := fconstructor $> ()
meta def mk_finset_total : tactic unit → list (name × list expr) → tactic unit
| tac [] := done
| tac ((_, xs) :: gs) := do
  tac,
  b ← succeeds (applyc ``finset_above.mem_cons_self),
  if b then
    mk_finset_total (tac >> applyc ``finset_above.mem_cons_of_mem) gs
  else do
    applyc ``finset_above.mem_union_left,
    applyc ``finset_in.mem_mk {new_goals := new_goals.all},
    mk_sigma_mem xs,
    reflexivity,
    mk_finset_total (tac >> applyc ``finset_above.mem_union_right) gs
end derive_fintype
open tactic.derive_fintype
meta def mk_fintype_instance : tactic unit :=
do
  intros,
  `(fintype %%e) ← target >>= whnf,
  (const I ls, args) ← pure (get_app_fn_args e),
  env ← get_env,
  let cs := env.constructors_of I,
  guard (env.inductive_num_indices I = 0) <|>
    fail "@[derive fintype]: inductive indices are not supported",
  guard (¬ env.is_recursive I) <|>
    fail ("@[derive fintype]: recursive inductive types are " ++
          "not supported (they are also usually infinite)"),
  applyc ``mk_fintype {new_goals := new_goals.all},
  intro1 >>= cases >>= (λ gs,
    gs.enum.mmap' $ λ ⟨i, _⟩, exact (reflect i)),
  mk_finset ls args 0 cs,
  intro1 >>= cases >>= mk_finset_total skip
@[derive_handler] meta def fintype_instance : derive_handler :=
instance_derive_handler ``fintype mk_fintype_instance
end tactic
