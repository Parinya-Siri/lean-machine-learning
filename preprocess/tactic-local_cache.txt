import tactic.norm_num
namespace tactic
namespace local_cache
namespace internal
variables {α : Type} [reflected _ α] [has_reflect α]
meta def mk_full_namespace (ns : name) : name := `local_cache ++ ns
meta def save_data (dn : name) (a : α) [reflected _ a] : tactic unit :=
tactic.add_decl $ mk_definition dn [] (reflect α) (reflect a)
meta def load_data (dn : name) : tactic α :=
do e ← tactic.get_env,
   d ← e.get dn,
   tactic.eval_expr α d.value
meta def poke_data (dn : name) : tactic bool :=
do e ← tactic.get_env,
   return (e.get dn).to_bool
meta def run_once_under_name {α : Type} [reflected _ α] [has_reflect α] (t : tactic α)
  (cache_name : name) : tactic α :=
do load_data cache_name <|>
   do
   { a ← t,
     save_data cache_name a,
     return a }
meta def cache_scope.block_local : cache_scope :=
⟨ block_local.get_name,
  block_local.try_get_name,
  block_local.present,
  block_local.clear ⟩
meta def cache_scope.def_local : cache_scope :=
⟨ def_local.get_name,
  def_local.try_get_name,
  def_local.present,
  def_local.clear ⟩
open cache_scope
meta def present (ns : name) (s : cache_scope := block_local) : tactic bool :=
s.present ns
meta def clear (ns : name) (s : cache_scope := block_local) : tactic unit :=
s.clear ns
meta def get (ns : name) (α : Type) [reflected _ α] [has_reflect α]
  (s : cache_scope := block_local) :
  tactic (option α) :=
do dn ← some <$> s.try_get_name ns <|> return none,
   match dn with
   | none := return none
   | some dn := some <$> load_data dn
   end
meta def run_once {α : Type} [reflected  _ α] [has_reflect α] (ns : name) (t : tactic α)
  (s : cache_scope := cache_scope.block_local) : tactic α :=
s.get_name ns >>= run_once_under_name t
end tactic
