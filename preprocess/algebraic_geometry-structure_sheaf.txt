import algebraic_geometry.prime_spectrum.basic
import algebra.category.Ring.colimits
import algebra.category.Ring.limits
import topology.sheaves.local_predicate
import ring_theory.localization.at_prime
import ring_theory.subring.basic
universe u
noncomputable theory
variables (R : Type u) [comm_ring R]
open Top
open topological_space
open category_theory
open opposite
namespace algebraic_geometry
def prime_spectrum.Top : Top := Top.of (prime_spectrum R)
namespace structure_sheaf
@[derive [comm_ring, local_ring]]
def localizations (P : prime_spectrum.Top R) : Type u := localization.at_prime P.as_ideal
instance (P : prime_spectrum.Top R) : inhabited (localizations R P) :=
‚ü®1‚ü©
instance (U : opens (prime_spectrum.Top R)) (x : U) :
  algebra R (localizations R x) :=
localization.algebra
instance (U : opens (prime_spectrum.Top R)) (x : U) :
  is_localization.at_prime (localizations R x) (x : prime_spectrum.Top R).as_ideal :=
localization.is_localization
variables {R}
def is_fraction {U : opens (prime_spectrum.Top R)} (f : Œ† x : U, localizations R x) : Prop :=
‚àÉ (r s : R), ‚àÄ x : U,
  ¬¨ (s ‚àà x.1.as_ideal) ‚àß f x * algebra_map _ _ s = algebra_map _ _ r
lemma is_fraction.eq_mk' {U : opens (prime_spectrum.Top R)} {f : Œ† x : U, localizations R x}
  (hf : is_fraction f) :
  ‚àÉ (r s : R) , ‚àÄ x : U, ‚àÉ (hs : s ‚àâ x.1.as_ideal), f x =
    is_localization.mk' (localization.at_prime _) r
      (‚ü®s, hs‚ü© : (x : prime_spectrum.Top R).as_ideal.prime_compl) :=
begin
  rcases hf with ‚ü®r, s, h‚ü©,
  refine ‚ü®r, s, Œª x, ‚ü®(h x).1, (is_localization.mk'_eq_iff_eq_mul.mpr _).symm‚ü©‚ü©,
  exact (h x).2.symm,
end
variables (R)
def is_fraction_prelocal : prelocal_predicate (localizations R) :=
{ pred := Œª U f, is_fraction f,
  res := by { rintro V U i f ‚ü®r, s, w‚ü©, exact ‚ü®r, s, Œª x, w (i x)‚ü© } }
def is_locally_fraction : local_predicate (localizations R) :=
(is_fraction_prelocal R).sheafify
@[simp]
lemma is_locally_fraction_pred
  {U : opens (prime_spectrum.Top R)} (f : Œ† x : U, localizations R x) :
  (is_locally_fraction R).pred f =
  ‚àÄ x : U, ‚àÉ (V) (m : x.1 ‚àà V) (i : V ‚ü∂ U),
  ‚àÉ (r s : R), ‚àÄ y : V,
  ¬¨ (s ‚àà y.1.as_ideal) ‚àß
    f (i y : U) * algebra_map _ _ s = algebra_map _ _ r :=
rfl
def sections_subring (U : (opens (prime_spectrum.Top R))·µí·µñ) :
  subring (Œ† x : unop U, localizations R x) :=
{ carrier := { f | (is_locally_fraction R).pred f },
  zero_mem' :=
  begin
    refine Œª x, ‚ü®unop U, x.2, ùüô _, 0, 1, Œª y, ‚ü®_, _‚ü©‚ü©,
    { rw ‚Üêideal.ne_top_iff_one, exact y.1.is_prime.1, },
    { simp, },
  end,
  one_mem' :=
  begin
    refine Œª x, ‚ü®unop U, x.2, ùüô _, 1, 1, Œª y, ‚ü®_, _‚ü©‚ü©,
    { rw ‚Üêideal.ne_top_iff_one, exact y.1.is_prime.1, },
    { simp, },
  end,
  add_mem' :=
  begin
    intros a b ha hb x,
    rcases ha x with ‚ü®Va, ma, ia, ra, sa, wa‚ü©,
    rcases hb x with ‚ü®Vb, mb, ib, rb, sb, wb‚ü©,
    refine ‚ü®Va ‚äì Vb, ‚ü®ma, mb‚ü©, opens.inf_le_left _ _ ‚â´ ia, ra * sb + rb * sa, sa * sb, _‚ü©,
    intro y,
    rcases wa (opens.inf_le_left _ _ y) with ‚ü®nma, wa‚ü©,
    rcases wb (opens.inf_le_right _ _ y) with ‚ü®nmb, wb‚ü©,
    fsplit,
    { intro H, cases y.1.is_prime.mem_or_mem H; contradiction, },
    { simp only [add_mul, ring_hom.map_add, pi.add_apply, ring_hom.map_mul],
      erw [‚Üêwa, ‚Üêwb],
      simp only [mul_assoc],
      congr' 2,
      rw [mul_comm], refl, }
  end,
  neg_mem' :=
  begin
    intros a ha x,
    rcases ha x with ‚ü®V, m, i, r, s, w‚ü©,
    refine ‚ü®V, m, i, -r, s, _‚ü©,
    intro y,
    rcases w y with ‚ü®nm, w‚ü©,
    fsplit,
    { exact nm, },
    { simp only [ring_hom.map_neg, pi.neg_apply],
      erw [‚Üêw],
      simp only [neg_mul], }
  end,
  mul_mem' :=
  begin
    intros a b ha hb x,
    rcases ha x with ‚ü®Va, ma, ia, ra, sa, wa‚ü©,
    rcases hb x with ‚ü®Vb, mb, ib, rb, sb, wb‚ü©,
    refine ‚ü®Va ‚äì Vb, ‚ü®ma, mb‚ü©, opens.inf_le_left _ _ ‚â´ ia, ra * rb, sa * sb, _‚ü©,
    intro y,
    rcases wa (opens.inf_le_left _ _ y) with ‚ü®nma, wa‚ü©,
    rcases wb (opens.inf_le_right _ _ y) with ‚ü®nmb, wb‚ü©,
    fsplit,
    { intro H, cases y.1.is_prime.mem_or_mem H; contradiction, },
    { simp only [pi.mul_apply, ring_hom.map_mul],
      erw [‚Üêwa, ‚Üêwb],
      simp only [mul_left_comm, mul_assoc, mul_comm],
      refl, }
  end, }
end structure_sheaf
open structure_sheaf
def structure_sheaf_in_Type : sheaf (Type u) (prime_spectrum.Top R):=
subsheaf_to_Types (is_locally_fraction R)
instance comm_ring_structure_sheaf_in_Type_obj (U : (opens (prime_spectrum.Top R))·µí·µñ) :
  comm_ring ((structure_sheaf_in_Type R).1.obj U) :=
(sections_subring R U).to_comm_ring
open _root_.prime_spectrum
@[simps]
def structure_presheaf_in_CommRing : presheaf CommRing (prime_spectrum.Top R) :=
{ obj := Œª U, CommRing.of ((structure_sheaf_in_Type R).1.obj U),
  map := Œª U V i,
  { to_fun := ((structure_sheaf_in_Type R).1.map i),
    map_zero' := rfl,
    map_add' := Œª x y, rfl,
    map_one' := rfl,
    map_mul' := Œª x y, rfl, }, }
def structure_presheaf_comp_forget :
  structure_presheaf_in_CommRing R ‚ãô (forget CommRing) ‚âÖ (structure_sheaf_in_Type R).1 :=
nat_iso.of_components
  (Œª U, iso.refl _)
  (by tidy)
open Top.presheaf
def Spec.structure_sheaf : sheaf CommRing (prime_spectrum.Top R) :=
‚ü®structure_presheaf_in_CommRing R,
def const (f g : R) (U : opens (prime_spectrum.Top R))
  (hu : ‚àÄ x ‚àà U, g ‚àà (x : prime_spectrum.Top R).as_ideal.prime_compl) :
  (structure_sheaf R).1.obj (op U) :=
‚ü®Œª x, is_localization.mk' _ f ‚ü®g, hu x x.2‚ü©,
 Œª x, ‚ü®U, x.2, ùüô _, f, g, Œª y, ‚ü®hu y y.2, is_localization.mk'_spec _ _ _‚ü©‚ü©‚ü©
@[simp] lemma const_apply (f g : R) (U : opens (prime_spectrum.Top R))
  (hu : ‚àÄ x ‚àà U, g ‚àà (x : prime_spectrum.Top R).as_ideal.prime_compl) (x : U) :
  (const R f g U hu).1 x = is_localization.mk' _ f ‚ü®g, hu x x.2‚ü© :=
rfl
lemma const_apply' (f g : R) (U : opens (prime_spectrum.Top R))
  (hu : ‚àÄ x ‚àà U, g ‚àà (x : prime_spectrum.Top R).as_ideal.prime_compl) (x : U)
  (hx : g ‚àà (as_ideal (x : prime_spectrum.Top R)).prime_compl) :
  (const R f g U hu).1 x = is_localization.mk' _ f ‚ü®g, hx‚ü© :=
rfl
lemma exists_const (U) (s : (structure_sheaf R).1.obj (op U)) (x : prime_spectrum.Top R)
  (hx : x ‚àà U) :
  ‚àÉ (V : opens (prime_spectrum.Top R)) (hxV : x ‚àà V) (i : V ‚ü∂ U) (f g : R) hg,
  const R f g V hg = (structure_sheaf R).1.map i.op s :=
let ‚ü®V, hxV, iVU, f, g, hfg‚ü© := s.2 ‚ü®x, hx‚ü© in
‚ü®V, hxV, iVU, f, g, Œª y hyV, (hfg ‚ü®y, hyV‚ü©).1, subtype.eq $ funext $ Œª y,
is_localization.mk'_eq_iff_eq_mul.2 $ eq.symm $ (hfg y).2‚ü©
@[simp] lemma res_const (f g : R) (U hu V hv i) :
  (structure_sheaf R).1.map i (const R f g U hu) = const R f g V hv :=
rfl
lemma res_const' (f g : R) (V hv) :
  (structure_sheaf R).1.map (hom_of_le hv).op (const R f g (basic_open g) (Œª _, id)) =
    const R f g V hv :=
rfl
lemma const_zero (f : R) (U hu) : const R 0 f U hu = 0 :=
subtype.eq $ funext $ Œª x, is_localization.mk'_eq_iff_eq_mul.2 $
by erw [ring_hom.map_zero, subtype.val_eq_coe, subring.coe_zero, pi.zero_apply, zero_mul]
lemma const_self (f : R) (U hu) : const R f f U hu = 1 :=
subtype.eq $ funext $ Œª x, is_localization.mk'_self _ _
lemma const_one (U) : const R 1 1 U (Œª p _, submonoid.one_mem _) = 1 :=
const_self R 1 U _
lemma const_add (f‚ÇÅ f‚ÇÇ g‚ÇÅ g‚ÇÇ : R) (U hu‚ÇÅ hu‚ÇÇ) :
  const R f‚ÇÅ g‚ÇÅ U hu‚ÇÅ + const R f‚ÇÇ g‚ÇÇ U hu‚ÇÇ =
  const R (f‚ÇÅ * g‚ÇÇ + f‚ÇÇ * g‚ÇÅ) (g‚ÇÅ * g‚ÇÇ) U (Œª x hx, submonoid.mul_mem _ (hu‚ÇÅ x hx) (hu‚ÇÇ x hx)) :=
subtype.eq $ funext $ Œª x, eq.symm $
by convert is_localization.mk'_add f‚ÇÅ f‚ÇÇ ‚ü®g‚ÇÅ, hu‚ÇÅ x x.2‚ü© ‚ü®g‚ÇÇ, hu‚ÇÇ x x.2‚ü©
lemma const_mul (f‚ÇÅ f‚ÇÇ g‚ÇÅ g‚ÇÇ : R) (U hu‚ÇÅ hu‚ÇÇ) :
  const R f‚ÇÅ g‚ÇÅ U hu‚ÇÅ * const R f‚ÇÇ g‚ÇÇ U hu‚ÇÇ =
  const R (f‚ÇÅ * f‚ÇÇ) (g‚ÇÅ * g‚ÇÇ) U (Œª x hx, submonoid.mul_mem _ (hu‚ÇÅ x hx) (hu‚ÇÇ x hx)) :=
subtype.eq $ funext $ Œª x, eq.symm $
by convert is_localization.mk'_mul _ f‚ÇÅ f‚ÇÇ ‚ü®g‚ÇÅ, hu‚ÇÅ x x.2‚ü© ‚ü®g‚ÇÇ, hu‚ÇÇ x x.2‚ü©
lemma const_ext {f‚ÇÅ f‚ÇÇ g‚ÇÅ g‚ÇÇ : R} {U hu‚ÇÅ hu‚ÇÇ} (h : f‚ÇÅ * g‚ÇÇ = f‚ÇÇ * g‚ÇÅ) :
  const R f‚ÇÅ g‚ÇÅ U hu‚ÇÅ = const R f‚ÇÇ g‚ÇÇ U hu‚ÇÇ :=
subtype.eq $ funext $ Œª x, is_localization.mk'_eq_of_eq h.symm
lemma const_congr {f‚ÇÅ f‚ÇÇ g‚ÇÅ g‚ÇÇ : R} {U hu} (hf : f‚ÇÅ = f‚ÇÇ) (hg : g‚ÇÅ = g‚ÇÇ) :
  const R f‚ÇÅ g‚ÇÅ U hu = const R f‚ÇÇ g‚ÇÇ U (hg ‚ñ∏ hu) :=
by substs hf hg
lemma const_mul_rev (f g : R) (U hu‚ÇÅ hu‚ÇÇ) :
  const R f g U hu‚ÇÅ * const R g f U hu‚ÇÇ = 1 :=
by rw [const_mul, const_congr R rfl (mul_comm g f), const_self]
lemma const_mul_cancel (f g‚ÇÅ g‚ÇÇ : R) (U hu‚ÇÅ hu‚ÇÇ) :
  const R f g‚ÇÅ U hu‚ÇÅ * const R g‚ÇÅ g‚ÇÇ U hu‚ÇÇ = const R f g‚ÇÇ U hu‚ÇÇ :=
by { rw [const_mul, const_ext], rw mul_assoc }
lemma const_mul_cancel' (f g‚ÇÅ g‚ÇÇ : R) (U hu‚ÇÅ hu‚ÇÇ) :
  const R g‚ÇÅ g‚ÇÇ U hu‚ÇÇ * const R f g‚ÇÅ U hu‚ÇÅ = const R f g‚ÇÇ U hu‚ÇÇ :=
by rw [mul_comm, const_mul_cancel]
def to_open (U : opens (prime_spectrum.Top R)) :
  CommRing.of R ‚ü∂ (structure_sheaf R).1.obj (op U) :=
{ to_fun := Œª f, ‚ü®Œª x, algebra_map R _ f,
    Œª x, ‚ü®U, x.2, ùüô _, f, 1, Œª y, ‚ü®(ideal.ne_top_iff_one _).1 y.1.2.1,
      by { rw [ring_hom.map_one, mul_one], refl } ‚ü©‚ü©‚ü©,
  map_one' := subtype.eq $ funext $ Œª x, ring_hom.map_one _,
  map_mul' := Œª f g, subtype.eq $ funext $ Œª x, ring_hom.map_mul _ _ _,
  map_zero' := subtype.eq $ funext $ Œª x, ring_hom.map_zero _,
  map_add' := Œª f g, subtype.eq $ funext $ Œª x, ring_hom.map_add _ _ _ }
@[simp] lemma to_open_res (U V : opens (prime_spectrum.Top R)) (i : V ‚ü∂ U) :
  to_open R U ‚â´ (structure_sheaf R).1.map i.op = to_open R V :=
rfl
@[simp] lemma to_open_apply (U : opens (prime_spectrum.Top R)) (f : R) (x : U) :
  (to_open R U f).1 x = algebra_map _ _ f :=
rfl
lemma to_open_eq_const (U : opens (prime_spectrum.Top R)) (f : R) : to_open R U f =
  const R f 1 U (Œª x _, (ideal.ne_top_iff_one _).1 x.2.1) :=
subtype.eq $ funext $ Œª x, eq.symm $ is_localization.mk'_one _ f
def to_stalk (x : prime_spectrum.Top R) : CommRing.of R ‚ü∂ (structure_sheaf R).1.stalk x :=
(to_open R ‚ä§ ‚â´ (structure_sheaf R).1.germ ‚ü®x, ‚ü®‚ü©‚ü© : _)
@[simp] lemma to_open_germ (U : opens (prime_spectrum.Top R)) (x : U) :
  to_open R U ‚â´ (structure_sheaf R).1.germ x =
  to_stalk R x :=
by { rw [‚Üê to_open_res R ‚ä§ U (hom_of_le le_top : U ‚ü∂ ‚ä§), category.assoc, presheaf.germ_res], refl }
@[simp] lemma germ_to_open (U : opens (prime_spectrum.Top R)) (x : U) (f : R) :
  (structure_sheaf R).1.germ x (to_open R U f) = to_stalk R x f :=
by { rw ‚Üê to_open_germ, refl }
lemma germ_to_top (x : prime_spectrum.Top R) (f : R) :
  (structure_sheaf R).1.germ (‚ü®x, trivial‚ü© : (‚ä§ : opens (prime_spectrum.Top R)))
    (to_open R ‚ä§ f) =
    to_stalk R x f :=
rfl
lemma is_unit_to_basic_open_self (f : R) : is_unit (to_open R (basic_open f) f) :=
is_unit_of_mul_eq_one _ (const R 1 f (basic_open f) (Œª _, id)) $
by rw [to_open_eq_const, const_mul_rev]
lemma is_unit_to_stalk (x : prime_spectrum.Top R) (f : x.as_ideal.prime_compl) :
  is_unit (to_stalk R x (f : R)) :=
by { erw ‚Üê germ_to_open R (basic_open (f : R)) ‚ü®x, f.2‚ü© (f : R),
    exact ring_hom.is_unit_map _ (is_unit_to_basic_open_self R f) }
def localization_to_stalk (x : prime_spectrum.Top R) :
  CommRing.of (localization.at_prime x.as_ideal) ‚ü∂ (structure_sheaf R).1.stalk x :=
show localization.at_prime x.as_ideal ‚Üí+* _, from
is_localization.lift (is_unit_to_stalk R x)
@[simp] lemma localization_to_stalk_of (x : prime_spectrum.Top R) (f : R) :
  localization_to_stalk R x (algebra_map _ (localization _) f) = to_stalk R x f :=
is_localization.lift_eq _ f
@[simp] lemma localization_to_stalk_mk' (x : prime_spectrum.Top R) (f : R)
  (s : (as_ideal x).prime_compl) :
  localization_to_stalk R x (is_localization.mk' _ f s : localization _) =
  (structure_sheaf R).1.germ (‚ü®x, s.2‚ü© : basic_open (s : R))
    (const R f s (basic_open s) (Œª _, id)) :=
(is_localization.lift_mk'_spec _ _ _ _).2 $
by erw [‚Üê germ_to_open R (basic_open s) ‚ü®x, s.2‚ü©, ‚Üê germ_to_open R (basic_open s) ‚ü®x, s.2‚ü©,
    ‚Üê ring_hom.map_mul, to_open_eq_const, to_open_eq_const, const_mul_cancel']
def open_to_localization (U : opens (prime_spectrum.Top R)) (x : prime_spectrum.Top R)
  (hx : x ‚àà U) :
  (structure_sheaf R).1.obj (op U) ‚ü∂ CommRing.of (localization.at_prime x.as_ideal) :=
{ to_fun := Œª s, (s.1 ‚ü®x, hx‚ü© : _),
  map_one' := rfl,
  map_mul' := Œª _ _, rfl,
  map_zero' := rfl,
  map_add' := Œª _ _, rfl }
@[simp] lemma coe_open_to_localization (U : opens (prime_spectrum.Top R)) (x : prime_spectrum.Top R)
  (hx : x ‚àà U) :
  (open_to_localization R U x hx :
    (structure_sheaf R).1.obj (op U) ‚Üí localization.at_prime x.as_ideal) =
  (Œª s, (s.1 ‚ü®x, hx‚ü© : _)) :=
rfl
lemma open_to_localization_apply (U : opens (prime_spectrum.Top R)) (x : prime_spectrum.Top R)
  (hx : x ‚àà U)
  (s : (structure_sheaf R).1.obj (op U)) :
  open_to_localization R U x hx s = (s.1 ‚ü®x, hx‚ü© : _) :=
rfl
def stalk_to_fiber_ring_hom (x : prime_spectrum.Top R) :
  (structure_sheaf R).1.stalk x ‚ü∂ CommRing.of (localization.at_prime x.as_ideal) :=
limits.colimit.desc (((open_nhds.inclusion x).op) ‚ãô (structure_sheaf R).1)
  { X := _,
    Œπ :=
    { app := Œª U, open_to_localization R ((open_nhds.inclusion _).obj (unop U)) x (unop U).2, } }
@[simp] lemma germ_comp_stalk_to_fiber_ring_hom (U : opens (prime_spectrum.Top R)) (x : U) :
  (structure_sheaf R).1.germ x ‚â´ stalk_to_fiber_ring_hom R x =
  open_to_localization R U x x.2 :=
limits.colimit.Œπ_desc _ _
@[simp] lemma stalk_to_fiber_ring_hom_germ' (U : opens (prime_spectrum.Top R))
  (x : prime_spectrum.Top R) (hx : x ‚àà U) (s : (structure_sheaf R).1.obj (op U)) :
  stalk_to_fiber_ring_hom R x ((structure_sheaf R).1.germ ‚ü®x, hx‚ü© s) = (s.1 ‚ü®x, hx‚ü© : _) :=
ring_hom.ext_iff.1 (germ_comp_stalk_to_fiber_ring_hom R U ‚ü®x, hx‚ü© : _) s
@[simp] lemma stalk_to_fiber_ring_hom_germ (U : opens (prime_spectrum.Top R)) (x : U)
  (s : (structure_sheaf R).1.obj (op U)) :
  stalk_to_fiber_ring_hom R x ((structure_sheaf R).1.germ x s) = s.1 x :=
by { cases x, exact stalk_to_fiber_ring_hom_germ' R U _ _ _ }
@[simp] lemma to_stalk_comp_stalk_to_fiber_ring_hom (x : prime_spectrum.Top R) :
  to_stalk R x ‚â´ stalk_to_fiber_ring_hom R x = (algebra_map _ _ : R ‚Üí+* localization _) :=
by { erw [to_stalk, category.assoc, germ_comp_stalk_to_fiber_ring_hom], refl }
@[simp] lemma stalk_to_fiber_ring_hom_to_stalk (x : prime_spectrum.Top R) (f : R) :
  stalk_to_fiber_ring_hom R x (to_stalk R x f) = algebra_map _ (localization _) f :=
ring_hom.ext_iff.1 (to_stalk_comp_stalk_to_fiber_ring_hom R x) _
@[simps] def stalk_iso (x : prime_spectrum.Top R) :
  (structure_sheaf R).1.stalk x ‚âÖ CommRing.of (localization.at_prime x.as_ideal) :=
{ hom := stalk_to_fiber_ring_hom R x,
  inv := localization_to_stalk R x,
  hom_inv_id' := (structure_sheaf R).1.stalk_hom_ext $ Œª U hxU,
  begin
    ext s, simp only [comp_apply], rw [id_apply, stalk_to_fiber_ring_hom_germ'],
    obtain ‚ü®V, hxV, iVU, f, g, hg, hs‚ü© := exists_const _ _ s x hxU,
    erw [‚Üê res_apply R U V iVU s ‚ü®x, hxV‚ü©, ‚Üê hs, const_apply, localization_to_stalk_mk'],
    refine (structure_sheaf R).1.germ_ext V hxV (hom_of_le hg) iVU _,
    erw [‚Üê hs, res_const']
  end,
  inv_hom_id' := @is_localization.ring_hom_ext R _ x.as_ideal.prime_compl
      (localization.at_prime x.as_ideal) _ _ (localization.at_prime x.as_ideal) _ _
      (ring_hom.comp (stalk_to_fiber_ring_hom R x) (localization_to_stalk R x))
      (ring_hom.id (localization.at_prime _)) $
    by { ext f, simp only [ring_hom.comp_apply, ring_hom.id_apply, localization_to_stalk_of,
                           stalk_to_fiber_ring_hom_to_stalk] } }
instance (x : prime_spectrum R) : is_iso (stalk_to_fiber_ring_hom R x) :=
is_iso.of_iso (stalk_iso R x)
instance (x : prime_spectrum R) : is_iso (localization_to_stalk R x) :=
is_iso.of_iso (stalk_iso R x).symm
@[simp, reassoc] lemma stalk_to_fiber_ring_hom_localization_to_stalk (x : prime_spectrum.Top R) :
  stalk_to_fiber_ring_hom R x ‚â´ localization_to_stalk R x = ùüô _ :=
(stalk_iso R x).hom_inv_id
@[simp, reassoc] lemma localization_to_stalk_stalk_to_fiber_ring_hom (x : prime_spectrum.Top R) :
  localization_to_stalk R x ‚â´ stalk_to_fiber_ring_hom R x = ùüô _ :=
(stalk_iso R x).inv_hom_id
def to_basic_open (f : R) : localization.away f ‚Üí+*
  (structure_sheaf R).1.obj (op $ basic_open f) :=
is_localization.away.lift f (is_unit_to_basic_open_self R f)
@[simp] lemma to_basic_open_mk' (s f : R) (g : submonoid.powers s) :
  to_basic_open R s (is_localization.mk' (localization.away s) f g) =
  const R f g (basic_open s) (Œª x hx, submonoid.powers_subset hx g.2) :=
(is_localization.lift_mk'_spec _ _ _ _).2 $
by rw [to_open_eq_const, to_open_eq_const, const_mul_cancel']
@[simp] lemma localization_to_basic_open (f : R) :
  ring_hom.comp (to_basic_open R f) (algebra_map R (localization.away f)) =
    to_open R (basic_open f) :=
ring_hom.ext $ Œª g,
by rw [to_basic_open, is_localization.away.lift, ring_hom.comp_apply, is_localization.lift_eq]
@[simp] lemma to_basic_open_to_map (s f : R) :
  to_basic_open R s (algebra_map R (localization.away s) f) =
    const R f 1 (basic_open s) (Œª _ _, submonoid.one_mem _) :=
(is_localization.lift_eq _ _).trans $ to_open_eq_const _ _ _
lemma locally_const_basic_open (U : opens (prime_spectrum.Top R))
  (s : (structure_sheaf R).1.obj (op U)) (x : U) :
  ‚àÉ (f g : R) (i : basic_open g ‚ü∂ U), x.1 ‚àà basic_open g ‚àß
    const R f g (basic_open g) (Œª y hy, hy) = (structure_sheaf R).1.map i.op s :=
begin
lemma normalize_finite_fraction_representation (U : opens (prime_spectrum.Top R))
  (s : (structure_sheaf R).1.obj (op U)) {Œπ : Type*} (t : finset Œπ) (a h : Œπ ‚Üí R)
  (iDh : Œ† i : Œπ, basic_open (h i) ‚ü∂ U)  (h_cover : U.1 ‚äÜ ‚ãÉ i ‚àà t, (basic_open (h i)).1)
  (hs : ‚àÄ i : Œπ, const R (a i) (h i) (basic_open (h i)) (Œª y hy, hy) =
    (structure_sheaf R).1.map (iDh i).op s) :
  ‚àÉ (a' h' : Œπ ‚Üí R) (iDh' : Œ† i : Œπ, (basic_open (h' i)) ‚ü∂ U),
    (U.1 ‚äÜ ‚ãÉ i ‚àà t, (basic_open (h' i)).1) ‚àß
    (‚àÄ i j ‚àà t, a' i * h' j = h' i * a' j) ‚àß
    (‚àÄ i ‚àà t, (structure_sheaf R).1.map (iDh' i).op s =
      const R (a' i) (h' i) (basic_open (h' i)) (Œª y hy, hy)) :=
begin
def basic_open_iso (f : R) : (structure_sheaf R).1.obj (op (basic_open f)) ‚âÖ
  CommRing.of (localization.away f) :=
(as_iso (show CommRing.of _ ‚ü∂ _, from to_basic_open R f)).symm
instance stalk_algebra (p : prime_spectrum R) : algebra R ((structure_sheaf R).val.stalk p) :=
(to_stalk R p).to_algebra
@[simp] lemma stalk_algebra_map (p : prime_spectrum R) (r : R) :
  algebra_map R ((structure_sheaf R).val.stalk p) r = to_stalk R p r := rfl
instance is_localization.to_stalk (p : prime_spectrum R) :
  is_localization.at_prime ((structure_sheaf R).val.stalk p) p.as_ideal :=
begin
  convert (is_localization.is_localization_iff_of_ring_equiv _ (stalk_iso R p).symm
    .CommRing_iso_to_ring_equiv).mp localization.is_localization,
  apply algebra.algebra_ext,
  intro _,
  rw stalk_algebra_map,
  congr' 1,
  erw iso.eq_comp_inv,
  exact to_stalk_comp_stalk_to_fiber_ring_hom R p,
end
instance open_algebra (U : (opens (prime_spectrum R))·µí·µñ) :
  algebra R ((structure_sheaf R).val.obj U) :=
(to_open R (unop U)).to_algebra
@[simp] lemma open_algebra_map (U : (opens (prime_spectrum R))·µí·µñ) (r : R) :
  algebra_map R ((structure_sheaf R).val.obj U) r = to_open R (unop U) r := rfl
instance is_localization.to_basic_open (r : R) :
  is_localization.away r ((structure_sheaf R).val.obj (op $ basic_open r)) :=
begin
  convert (is_localization.is_localization_iff_of_ring_equiv _ (basic_open_iso R r).symm
    .CommRing_iso_to_ring_equiv).mp localization.is_localization,
  apply algebra.algebra_ext,
  intro x,
  congr' 1,
  exact (localization_to_basic_open R r).symm
end
instance to_basic_open_epi (r : R) : epi (to_open R (basic_open r)) :=
‚ü®Œª S f g h, by { refine is_localization.ring_hom_ext _ _,
  swap 5, exact is_localization.to_basic_open R r, exact h }‚ü©
@[elementwise] lemma to_global_factors : to_open R ‚ä§ =
  CommRing.of_hom (algebra_map R (localization.away (1 : R))) ‚â´ to_basic_open R (1 : R) ‚â´
  (structure_sheaf R).1.map (eq_to_hom (basic_open_one.symm)).op :=
begin
  rw ‚Üê category.assoc,
  change to_open R ‚ä§ = (to_basic_open R 1).comp _ ‚â´ _,
  unfold CommRing.of_hom,
  rw [localization_to_basic_open R, to_open_res],
end
instance is_iso_to_global : is_iso (to_open R ‚ä§) :=
begin
  let hom := CommRing.of_hom (algebra_map R (localization.away (1 : R))),
  haveI : is_iso hom := is_iso.of_iso
    ((is_localization.at_one R (localization.away (1 : R))).to_ring_equiv.to_CommRing_iso),
  rw to_global_factors R,
  apply_instance
end
@[simps] def global_sections_iso : CommRing.of R ‚âÖ (structure_sheaf R).1.obj (op ‚ä§) :=
as_iso (to_open R ‚ä§)
@[simp] lemma global_sections_iso_hom (R : CommRing) :
  (global_sections_iso R).hom = to_open R ‚ä§ := rfl
@[simp, reassoc, elementwise]
lemma to_stalk_stalk_specializes {R : Type*} [comm_ring R]
  {x y : prime_spectrum R} (h : x ‚§≥ y) :
  to_stalk R y ‚â´ (structure_sheaf R).val.stalk_specializes h = to_stalk R x :=
by { dsimp [ to_stalk], simpa }
@[simp, reassoc, elementwise]
lemma localization_to_stalk_stalk_specializes {R : Type*} [comm_ring R]
  {x y : prime_spectrum R} (h : x ‚§≥ y) :
  structure_sheaf.localization_to_stalk R y ‚â´ (structure_sheaf R).val.stalk_specializes h =
    CommRing.of_hom (prime_spectrum.localization_map_of_specializes h) ‚â´
      structure_sheaf.localization_to_stalk R x :=
begin
  apply is_localization.ring_hom_ext y.as_ideal.prime_compl,
  any_goals { dsimp, apply_instance },
  erw ring_hom.comp_assoc,
  conv_rhs { erw ring_hom.comp_assoc },
  dsimp [CommRing.of_hom, localization_to_stalk, prime_spectrum.localization_map_of_specializes],
  rw [is_localization.lift_comp, is_localization.lift_comp, is_localization.lift_comp],
  exact to_stalk_stalk_specializes h
end
@[simp, reassoc, elementwise]
lemma stalk_specializes_stalk_to_fiber {R : Type*} [comm_ring R]
  {x y : prime_spectrum R} (h : x ‚§≥ y) :
  (structure_sheaf R).val.stalk_specializes h ‚â´ structure_sheaf.stalk_to_fiber_ring_hom R x =
    structure_sheaf.stalk_to_fiber_ring_hom R y ‚â´
      prime_spectrum.localization_map_of_specializes h :=
begin
  change _ ‚â´ (structure_sheaf.stalk_iso R x).hom = (structure_sheaf.stalk_iso R y).hom ‚â´ _,
  rw [‚Üê iso.eq_comp_inv, category.assoc, ‚Üê iso.inv_comp_eq],
  exact localization_to_stalk_stalk_specializes h,
end
section comap
variables {R} {S : Type u} [comm_ring S] {P : Type u} [comm_ring P]
def comap_fun (f : R ‚Üí+* S) (U : opens (prime_spectrum.Top R))
  (V : opens (prime_spectrum.Top S)) (hUV : V.1 ‚äÜ (prime_spectrum.comap f) ‚Åª¬π' U.1)
  (s : Œ† x : U, localizations R x) (y : V) : localizations S y :=
localization.local_ring_hom (prime_spectrum.comap f y.1).as_ideal _ f rfl
  (s ‚ü®(prime_spectrum.comap f y.1), hUV y.2‚ü© : _)
lemma comap_fun_is_locally_fraction (f : R ‚Üí+* S)
  (U : opens (prime_spectrum.Top R)) (V : opens (prime_spectrum.Top S))
  (hUV : V.1 ‚äÜ (prime_spectrum.comap f) ‚Åª¬π' U.1) (s : Œ† x : U, localizations R x)
  (hs : (is_locally_fraction R).to_prelocal_predicate.pred s) :
  (is_locally_fraction S).to_prelocal_predicate.pred (comap_fun f U V hUV s) :=
begin
  rintro ‚ü®p, hpV‚ü©,
def comap (f : R ‚Üí+* S) (U : opens (prime_spectrum.Top R))
  (V : opens (prime_spectrum.Top S)) (hUV : V.1 ‚äÜ (prime_spectrum.comap f) ‚Åª¬π' U.1) :
  (structure_sheaf R).1.obj (op U) ‚Üí+* (structure_sheaf S).1.obj (op V) :=
{ to_fun := Œª s, ‚ü®comap_fun f U V hUV s.1, comap_fun_is_locally_fraction f U V hUV s.1 s.2‚ü©,
  map_one' := subtype.ext $ funext $ Œª p, by
    { rw [subtype.coe_mk, subtype.val_eq_coe, comap_fun, (sections_subring R (op U)).coe_one,
      pi.one_apply, ring_hom.map_one], refl },
  map_zero' := subtype.ext $ funext $ Œª p, by
    { rw [subtype.coe_mk, subtype.val_eq_coe, comap_fun, (sections_subring R (op U)).coe_zero,
      pi.zero_apply, ring_hom.map_zero], refl },
  map_add' := Œª s t, subtype.ext $ funext $ Œª p, by
    { rw [subtype.coe_mk, subtype.val_eq_coe, comap_fun, (sections_subring R (op U)).coe_add,
      pi.add_apply, ring_hom.map_add], refl },
  map_mul' := Œª s t, subtype.ext $ funext $ Œª p, by
    { rw [subtype.coe_mk, subtype.val_eq_coe, comap_fun, (sections_subring R (op U)).coe_mul,
      pi.mul_apply, ring_hom.map_mul], refl } }
@[simp]
lemma comap_apply (f : R ‚Üí+* S) (U : opens (prime_spectrum.Top R))
  (V : opens (prime_spectrum.Top S)) (hUV : V.1 ‚äÜ (prime_spectrum.comap f) ‚Åª¬π' U.1)
  (s : (structure_sheaf R).1.obj (op U)) (p : V) :
  (comap f U V hUV s).1 p =
  localization.local_ring_hom (prime_spectrum.comap f p.1).as_ideal _ f rfl
    (s.1 ‚ü®(prime_spectrum.comap f p.1), hUV p.2‚ü© : _) :=
rfl
lemma comap_const (f : R ‚Üí+* S) (U : opens (prime_spectrum.Top R))
  (V : opens (prime_spectrum.Top S)) (hUV : V.1 ‚äÜ (prime_spectrum.comap f) ‚Åª¬π' U.1)
  (a b : R) (hb : ‚àÄ x : prime_spectrum R, x ‚àà U ‚Üí b ‚àà x.as_ideal.prime_compl) :
  comap f U V hUV (const R a b U hb) =
  const S (f a) (f b) V (Œª p hpV, hb (prime_spectrum.comap f p) (hUV hpV)) :=
subtype.eq $ funext $ Œª p,
begin
  rw [comap_apply, const_apply, const_apply],
  erw localization.local_ring_hom_mk',
  refl,
end
lemma comap_id_eq_map (U V : opens (prime_spectrum.Top R)) (iVU : V ‚ü∂ U) :
  comap (ring_hom.id R) U V
    (Œª p hpV, le_of_hom iVU $ by rwa prime_spectrum.comap_id) =
  (structure_sheaf R).1.map iVU.op :=
ring_hom.ext $ Œª s, subtype.eq $ funext $ Œª p,
begin
  rw comap_apply,
lemma comap_id (U V : opens (prime_spectrum.Top R)) (hUV : U = V) :
  comap (ring_hom.id R) U V (Œª p hpV, by rwa [hUV, prime_spectrum.comap_id]) =
  eq_to_hom (show (structure_sheaf R).1.obj (op U) = _, by rw hUV) :=
by erw [comap_id_eq_map U V (eq_to_hom hUV.symm), eq_to_hom_op, eq_to_hom_map]
@[simp] lemma comap_id' (U : opens (prime_spectrum.Top R)) :
  comap (ring_hom.id R) U U (Œª p hpU, by rwa prime_spectrum.comap_id) =
  ring_hom.id _ :=
by { rw comap_id U U rfl, refl }
lemma comap_comp (f : R ‚Üí+* S) (g : S ‚Üí+* P) (U : opens (prime_spectrum.Top R))
  (V : opens (prime_spectrum.Top S)) (W : opens (prime_spectrum.Top P))
  (hUV : ‚àÄ p ‚àà V, prime_spectrum.comap f p ‚àà U) (hVW : ‚àÄ p ‚àà W, prime_spectrum.comap g p ‚àà V) :
  comap (g.comp f) U W (Œª p hpW, hUV (prime_spectrum.comap g p) (hVW p hpW)) =
    (comap g V W hVW).comp (comap f U V hUV) :=
ring_hom.ext $ Œª s, subtype.eq $ funext $ Œª p,
begin
  rw comap_apply,
  erw localization.local_ring_hom_comp _ (prime_spectrum.comap g p.1).as_ideal,
