import category_theory.functor.left_derived
import category_theory.monoidal.preadditive
noncomputable theory
open category_theory.limits
open category_theory.monoidal_category
namespace category_theory
variables {C : Type*} [category C] [monoidal_category C] [preadditive C] [monoidal_preadditive C]
  [has_zero_object C] [has_equalizers C] [has_cokernels C] [has_images C] [has_image_maps C]
  [has_projective_resolutions C]
variables (C)
@[simps]
def Tor (n : ℕ) : C ⥤ C ⥤ C :=
{ obj := λ X, functor.left_derived ((tensoring_left C).obj X) n,
  map := λ X Y f, nat_trans.left_derived ((tensoring_left C).map f) n,
  map_id' := λ X, by rw [(tensoring_left C).map_id, nat_trans.left_derived_id],
  map_comp' := λ X Y Z f g, by rw [(tensoring_left C).map_comp, nat_trans.left_derived_comp], }
@[simps]
def Tor' (n : ℕ) : C ⥤ C ⥤ C :=
functor.flip
{ obj := λ X, functor.left_derived ((tensoring_right C).obj X) n,
  map := λ X Y f, nat_trans.left_derived ((tensoring_right C).map f) n,
  map_id' := λ X, by rw [(tensoring_right C).map_id, nat_trans.left_derived_id],
  map_comp' := λ X Y Z f g, by rw [(tensoring_right C).map_comp, nat_trans.left_derived_comp], }
open_locale zero_object
def Tor_succ_of_projective (X Y : C) [projective Y] (n : ℕ) : ((Tor C (n + 1)).obj X).obj Y ≅ 0 :=
((tensoring_left C).obj X).left_derived_obj_projective_succ n Y
def Tor'_succ_of_projective (X Y : C) [projective X] (n : ℕ) :
  ((Tor' C (n + 1)).obj X).obj Y ≅ 0 :=
