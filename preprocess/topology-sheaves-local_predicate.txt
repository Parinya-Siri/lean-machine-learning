import topology.sheaves.sheaf_of_functions
import topology.sheaves.stalks
import topology.local_homeomorph
import topology.sheaves.sheaf_condition.unique_gluing
universe v
noncomputable theory
variables {X : Top.{v}}
variables (T : X ‚Üí Type v)
open topological_space
open opposite
open category_theory
open category_theory.limits
open category_theory.limits.types
namespace Top
structure prelocal_predicate :=
(pred : Œ† {U : opens X}, (Œ† x : U, T x) ‚Üí Prop)
(res : ‚àÄ {U V : opens X} (i : U ‚ü∂ V) (f : Œ† x : V, T x) (h : pred f), pred (Œª x : U, f (i x)))
variables (X)
@[simps]
def continuous_prelocal (T : Top.{v}) : prelocal_predicate (Œª x : X, T) :=
{ pred := Œª U f, continuous f,
  res := Œª U V i f h, continuous.comp h (opens.open_embedding_of_le i.le).continuous, }
instance inhabited_prelocal_predicate (T : Top.{v}) : inhabited (prelocal_predicate (Œª x : X, T)) :=
‚ü®continuous_prelocal X T‚ü©
variables {X}
structure local_predicate extends prelocal_predicate T :=
(locality : ‚àÄ {U : opens X} (f : Œ† x : U, T x)
  (w : ‚àÄ x : U, ‚àÉ (V : opens X) (m : x.1 ‚àà V) (i : V ‚ü∂ U), pred (Œª x : V, f (i x : U))), pred f)
variables (X)
def continuous_local (T : Top.{v}) : local_predicate (Œª x : X, T) :=
{ locality := Œª U f w,
   begin
     apply continuous_iff_continuous_at.2,
     intro x,
     specialize w x,
     rcases w with ‚ü®V, m, i, w‚ü©,
     dsimp at w,
     rw continuous_iff_continuous_at at w,
     specialize w ‚ü®x, m‚ü©,
     simpa using (opens.open_embedding_of_le i.le).continuous_at_iff.1 w,
   end,
  ..continuous_prelocal X T }
instance inhabited_local_predicate (T : Top.{v}) : inhabited (local_predicate _) :=
‚ü®continuous_local X T‚ü©
variables {X T}
def prelocal_predicate.sheafify {T : X ‚Üí Type v} (P : prelocal_predicate T) : local_predicate T :=
{ pred := Œª U f, ‚àÄ x : U, ‚àÉ (V : opens X) (m : x.1 ‚àà V) (i : V ‚ü∂ U), P.pred (Œª x : V, f (i x : U)),
  res := Œª V U i f w x,
  begin
    specialize w (i x),
    rcases w with ‚ü®V', m', i', p‚ü©,
    refine ‚ü®V ‚äì V', ‚ü®x.2,m'‚ü©, opens.inf_le_left _ _, _‚ü©,
    convert P.res (opens.inf_le_right V V') _ p,
  end,
  locality := Œª U f w x,
  begin
    specialize w x,
    rcases w with ‚ü®V, m, i, p‚ü©,
    specialize p ‚ü®x.1, m‚ü©,
    rcases p with ‚ü®V', m', i', p'‚ü©,
    exact ‚ü®V', m', i' ‚â´ i, p'‚ü©,
  end }
lemma prelocal_predicate.sheafify_of {T : X ‚Üí Type v} {P : prelocal_predicate T}
  {U : opens X} {f : Œ† x : U, T x} (h : P.pred f) :
  P.sheafify.pred f :=
Œª x, ‚ü®U, x.2, ùüô _, by { convert h, ext ‚ü®y, w‚ü©, refl, }‚ü©
@[simps]
def subpresheaf_to_Types (P : prelocal_predicate T) : presheaf (Type v) X :=
{ obj := Œª U, { f : Œ† x : unop U, T x // P.pred f },
  map := Œª U V i f, ‚ü®Œª x, f.1 (i.unop x), P.res i.unop f.1 f.2‚ü© }.
namespace subpresheaf_to_Types
variables (P : prelocal_predicate T)
def subtype : subpresheaf_to_Types P ‚ü∂ presheaf_to_Types X T :=
{ app := Œª U f, f.1 }
open Top.presheaf
lemma is_sheaf (P : local_predicate T) :
  (subpresheaf_to_Types P.to_prelocal_predicate).is_sheaf :=
presheaf.is_sheaf_of_is_sheaf_unique_gluing_types _ $ Œª Œπ U sf sf_comp, begin
@[simps]
def subsheaf_to_Types (P : local_predicate T) : sheaf (Type v) X :=
‚ü®subpresheaf_to_Types P.to_prelocal_predicate, subpresheaf_to_Types.is_sheaf P‚ü©
def stalk_to_fiber (P : local_predicate T) (x : X) :
  (subsheaf_to_Types P).1.stalk x ‚ü∂ T x :=
begin
  refine colimit.desc _
    { X := T x, Œπ := { app := Œª U f, _, naturality' := _ } },
  { exact f.1 ‚ü®x, (unop U).2‚ü©, },
  { tidy, }
end
@[simp] lemma stalk_to_fiber_germ (P : local_predicate T) (U : opens X) (x : U) (f) :
  stalk_to_fiber P x ((subsheaf_to_Types P).1.germ x f) = f.1 x :=
begin
  dsimp [presheaf.germ, stalk_to_fiber],
  cases x,
  simp,
  refl,
end
lemma stalk_to_fiber_surjective (P : local_predicate T) (x : X)
  (w : ‚àÄ (t : T x), ‚àÉ (U : open_nhds x) (f : Œ† y : U.1, T y) (h : P.pred f), f ‚ü®x, U.2‚ü© = t) :
  function.surjective (stalk_to_fiber P x) :=
Œª t,
begin
  rcases w t with ‚ü®U, f, h, rfl‚ü©,
  fsplit,
  { exact (subsheaf_to_Types P).1.germ ‚ü®x, U.2‚ü© ‚ü®f, h‚ü©, },
  { exact stalk_to_fiber_germ _ U.1 ‚ü®x, U.2‚ü© ‚ü®f, h‚ü©, }
end
lemma stalk_to_fiber_injective (P : local_predicate T) (x : X)
  (w : ‚àÄ (U V : open_nhds x) (fU : Œ† y : U.1, T y) (hU : P.pred fU)
    (fV : Œ† y : V.1, T y) (hV : P.pred fV) (e : fU ‚ü®x, U.2‚ü© = fV ‚ü®x, V.2‚ü©),
    ‚àÉ (W : open_nhds x) (iU : W ‚ü∂ U) (iV : W ‚ü∂ V), ‚àÄ (w : W.1), fU (iU w : U.1) = fV (iV w : V.1)) :
  function.injective (stalk_to_fiber P x) :=
Œª tU tV h,
begin
def subpresheaf_continuous_prelocal_iso_presheaf_to_Top (T : Top.{v}) :
  subpresheaf_to_Types (continuous_prelocal X T) ‚âÖ presheaf_to_Top X T :=
nat_iso.of_components
  (Œª X,
  { hom := by { rintro ‚ü®f, c‚ü©, exact ‚ü®f, c‚ü©, },
    inv := by { rintro ‚ü®f, c‚ü©, exact ‚ü®f, c‚ü©, },
    hom_inv_id' := by { ext ‚ü®f, p‚ü© x, refl, },
    inv_hom_id' := by { ext ‚ü®f, p‚ü© x, refl, }, })
  (by tidy)
def sheaf_to_Top (T : Top.{v}) : sheaf (Type v) X :=
‚ü®presheaf_to_Top X T,
  presheaf.is_sheaf_of_iso (subpresheaf_continuous_prelocal_iso_presheaf_to_Top T)
    (subpresheaf_to_Types.is_sheaf (continuous_local X T))‚ü©
end Top
