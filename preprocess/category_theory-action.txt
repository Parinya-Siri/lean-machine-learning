import category_theory.elements
import category_theory.is_connected
import category_theory.single_obj
import group_theory.group_action.quotient
import group_theory.semidirect_product
open mul_action semidirect_product
namespace category_theory
universes u
variables (M : Type*) [monoid M] (X : Type u) [mul_action M X]
@[simps]
def action_as_functor : single_obj M ‚•§ Type u :=
{ obj := Œª _, X,
  map := Œª _ _, (‚Ä¢),
  map_id' := Œª _, funext $ mul_action.one_smul,
  map_comp' := Œª _ _ _ f g, funext $ Œª x, (smul_smul g f x).symm }
@[derive category]
def action_category := (action_as_functor M X).elements
namespace action_category
def œÄ : action_category M X ‚•§ single_obj M :=
category_of_elements.œÄ _
@[simp]
lemma œÄ_map (p q : action_category M X) (f : p ‚ü∂ q) : (œÄ M X).map f = f.val := rfl
@[simp]
lemma œÄ_obj (p : action_category M X) : (œÄ M X).obj p = single_obj.star M :=
unit.ext
variables {M X}
protected def back : action_category M X ‚Üí X :=
Œª x, x.snd
instance : has_coe_t X (action_category M X) :=
‚ü®Œª x, ‚ü®(), x‚ü©‚ü©
@[simp] lemma coe_back (x : X) : (‚Üëx : action_category M X).back = x := rfl
@[simp] lemma back_coe (x : action_category M X) : ‚Üë(x.back) = x := by ext; refl
variables (M X)
def obj_equiv : X ‚âÉ action_category M X :=
{ to_fun := coe,
  inv_fun := Œª x, x.back,
  left_inv := coe_back,
  right_inv := back_coe }
lemma hom_as_subtype (p q : action_category M X) :
  (p ‚ü∂ q) = { m : M // m ‚Ä¢ p.back = q.back } := rfl
instance [inhabited X] : inhabited (action_category M X) := ‚ü®show X, from default‚ü©
instance [nonempty X] : nonempty (action_category M X) :=
nonempty.map (obj_equiv M X) infer_instance
variables {X} (x : X)
def stabilizer_iso_End : stabilizer.submonoid M x ‚âÉ* End (‚Üëx : action_category M X) :=
mul_equiv.refl _
@[simp]
lemma stabilizer_iso_End_apply (f : stabilizer.submonoid M x) :
  (stabilizer_iso_End M x).to_fun f = f := rfl
@[simp]
lemma stabilizer_iso_End_symm_apply (f : End _) :
  (stabilizer_iso_End M x).inv_fun f = f := rfl
variables {M X}
@[simp] protected lemma id_val (x : action_category M X) : subtype.val (ùüô x) = 1 := rfl
@[simp] protected lemma comp_val {x y z : action_category M X}
  (f : x ‚ü∂ y) (g : y ‚ü∂ z) : (f ‚â´ g).val = g.val * f.val := rfl
instance [is_pretransitive M X] [nonempty X] : is_connected (action_category M X) :=
zigzag_is_connected $ Œª x y, relation.refl_trans_gen.single $ or.inl $
  nonempty_subtype.mpr (show _, from exists_smul_eq M x.back y.back)
section group
variables {G : Type*} [group G] [mul_action G X]
noncomputable instance : groupoid (action_category G X) :=
category_theory.groupoid_of_elements _
def End_mul_equiv_subgroup (H : subgroup G) :
  End (obj_equiv G (G ‚ß∏ H) ‚Üë(1 : G)) ‚âÉ* H :=
mul_equiv.trans
  (stabilizer_iso_End G ((1 : G) : G ‚ß∏ H)).symm
  (mul_equiv.subgroup_congr $ stabilizer_quotient H)
def hom_of_pair (t : X) (g : G) : ‚Üë(g‚Åª¬π ‚Ä¢ t) ‚ü∂ (t : action_category G X) :=
subtype.mk g (smul_inv_smul g t)
@[simp] lemma hom_of_pair.val (t : X) (g : G) : (hom_of_pair t g).val = g := rfl
protected def cases {P : Œ† ‚¶Éa b : action_category G X‚¶Ñ, (a ‚ü∂ b) ‚Üí Sort*}
  (hyp : ‚àÄ t g, P (hom_of_pair t g)) ‚¶Éa b‚¶Ñ (f : a ‚ü∂ b) : P f :=
begin
  refine cast _ (hyp b.back f.val),
  rcases a with ‚ü®‚ü®‚ü©, a : X‚ü©,
  rcases b with ‚ü®‚ü®‚ü©, b : X‚ü©,
  rcases f with ‚ü®g : G, h : g ‚Ä¢ a = b‚ü©,
  cases (inv_smul_eq_iff.mpr h.symm),
  refl
end
variables {H : Type*} [group H]
@[simps] def curry (F : action_category G X ‚•§ single_obj H) :
  G ‚Üí* (X ‚Üí H) ‚ãä[mul_aut_arrow] G :=
have F_map_eq : ‚àÄ {a b} {f : a ‚ü∂ b}, F.map f = (F.map (hom_of_pair b.back f.val) : H) :=
  action_category.cases (Œª _ _, rfl),
{ to_fun := Œª g, ‚ü®Œª b, F.map (hom_of_pair b g), g‚ü©,
  map_one' := by { congr, funext, exact F_map_eq.symm.trans (F.map_id b) },
  map_mul' := begin
    intros g h,
    congr, funext,
    exact F_map_eq.symm.trans (F.map_comp (hom_of_pair (g‚Åª¬π ‚Ä¢ b) h) (hom_of_pair b g)),
  end }
@[simps] def uncurry (F : G ‚Üí* (X ‚Üí H) ‚ãä[mul_aut_arrow] G) (sane : ‚àÄ g, (F g).right = g) :
  action_category G X ‚•§ single_obj H :=
{ obj := Œª _, (),
  map := Œª a b f, ((F f.val).left b.back),
  map_id' := by { intro x, rw [action_category.id_val, F.map_one], refl },
  map_comp' := begin
    intros x y z f g, revert y z g,
    refine action_category.cases _,
    simp [single_obj.comp_as_mul, sane],
  end }
end group
end action_category
end category_theory
