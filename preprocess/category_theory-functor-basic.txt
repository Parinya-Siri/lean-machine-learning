import tactic.reassoc_axiom
import category_theory.category.basic
namespace category_theory
structure functor (C : Type u‚ÇÅ) [category.{v‚ÇÅ} C] (D : Type u‚ÇÇ) [category.{v‚ÇÇ} D]
  extends prefunctor C D : Type (max v‚ÇÅ v‚ÇÇ u‚ÇÅ u‚ÇÇ) :=
(map_id'   : ‚àÄ (X : C), map (ùüô X) = ùüô (obj X) . obviously)
(map_comp' : ‚àÄ {X Y Z : C} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z), map (f ‚â´ g) = (map f) ‚â´ (map g) . obviously)
add_decl_doc functor.to_prefunctor
end
protected def id : C ‚•§ C :=
{ obj := Œª X, X,
  map := Œª _ _ f, f }
def comp (F : C ‚•§ D) (G : D ‚•§ E) : C ‚•§ E :=
{ obj := Œª X, G.obj (F.obj X),
  map := Œª _ _ f, G.map (F.map f) }
infixr ` ‚ãô `:80 := comp
@[simp] lemma comp_obj (F : C ‚•§ D) (G : D ‚•§ E) (X : C) : (F ‚ãô G).obj X = G.obj (F.obj X) := rfl
@[simp] lemma comp_map (F : C ‚•§ D) (G : D ‚•§ E) {X Y : C} (f : X ‚ü∂ Y) :
  (F ‚ãô G).map f = G.map (F.map f) := rfl
