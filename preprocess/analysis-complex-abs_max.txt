import analysis.complex.cauchy_integral
import analysis.convex.integral
import analysis.normed_space.completion
import topology.algebra.order.extr_closure
open topological_space metric set filter asymptotics function measure_theory affine_map
open_locale topological_space filter nnreal real
universes u v w
variables {E : Type u} [normed_group E] [normed_space ‚ÑÇ E]
  {F : Type v} [normed_group F] [normed_space ‚ÑÇ F]
local postfix `ÃÇ`:100 := uniform_space.completion
namespace complex
lemma norm_max_aux‚ÇÅ [complete_space F] {f : ‚ÑÇ ‚Üí F} {z w : ‚ÑÇ}
  (hd : diff_cont_on_cl ‚ÑÇ f (ball z (dist w z)))
  (hz : is_max_on (norm ‚àò f) (closed_ball z (dist w z)) z) :
  ‚à•f w‚à• = ‚à•f z‚à• :=
begin
  set r : ‚Ñù := dist w z,
  have hw : w ‚àà closed_ball z r, from mem_closed_ball.2 le_rfl,
  refine (is_max_on_iff.1 hz _ hw).antisymm (not_lt.1 _),
  rintro hw_lt : ‚à•f w‚à• < ‚à•f z‚à•,
  have hr : 0 < r, from dist_pos.2 (ne_of_apply_ne (norm ‚àò f) hw_lt.ne),
  suffices : ‚à•‚àÆ Œ∂ in C(z, r), (Œ∂ - z)‚Åª¬π ‚Ä¢ f Œ∂‚à• < 2 * œÄ * ‚à•f z‚à•,
  { refine this.ne _,
    have A : ‚àÆ Œ∂ in C(z, r), (Œ∂ - z)‚Åª¬π ‚Ä¢ f Œ∂ = (2 * œÄ * I : ‚ÑÇ) ‚Ä¢ f z :=
      hd.circle_integral_sub_inv_smul (mem_ball_self hr),
    simp [A, norm_smul, real.pi_pos.le] },
  suffices : ‚à•‚àÆ Œ∂ in C(z, r), (Œ∂ - z)‚Åª¬π ‚Ä¢ f Œ∂‚à• < 2 * œÄ * r * (‚à•f z‚à• / r),
    by rwa [mul_assoc, mul_div_cancel' _ hr.ne'] at this,
  have hsub : sphere z r ‚äÜ closed_ball z r, from sphere_subset_closed_ball,
  refine circle_integral.norm_integral_lt_of_norm_le_const_of_lt hr _ _ ‚ü®w, rfl, _‚ü©,
  show continuous_on (Œª (Œ∂ : ‚ÑÇ), (Œ∂ - z)‚Åª¬π ‚Ä¢ f Œ∂) (sphere z r),
  { refine ((continuous_on_id.sub continuous_on_const).inv‚ÇÄ _).smul
      (hd.continuous_on_ball.mono hsub),
    exact Œª Œ∂ hŒ∂, sub_ne_zero.2 (ne_of_mem_sphere hŒ∂ hr.ne') },
  show ‚àÄ Œ∂ ‚àà sphere z r, ‚à•(Œ∂ - z)‚Åª¬π ‚Ä¢ f Œ∂‚à• ‚â§ ‚à•f z‚à• / r,
  { rintros Œ∂ (hŒ∂ : abs (Œ∂ - z) = r),
    rw [le_div_iff hr, norm_smul, norm_inv, norm_eq_abs, hŒ∂, mul_comm, mul_inv_cancel_left‚ÇÄ hr.ne'],
    exact hz (hsub hŒ∂) },
  show ‚à•(w - z)‚Åª¬π ‚Ä¢ f w‚à• < ‚à•f z‚à• / r,
  { rw [norm_smul, norm_inv, norm_eq_abs, ‚Üê div_eq_inv_mul],
    exact (div_lt_div_right hr).2 hw_lt }
end
lemma norm_max_aux‚ÇÇ {f : ‚ÑÇ ‚Üí F} {z w : ‚ÑÇ} (hd : diff_cont_on_cl ‚ÑÇ f (ball z (dist w z)))
  (hz : is_max_on (norm ‚àò f) (closed_ball z (dist w z)) z) :
  ‚à•f w‚à• = ‚à•f z‚à• :=
begin
  set e : F ‚ÜíL[‚ÑÇ] FÃÇ := uniform_space.completion.to_complL,
  have he : ‚àÄ x, ‚à•e x‚à• = ‚à•x‚à•, from uniform_space.completion.norm_coe,
  replace hz : is_max_on (norm ‚àò (e ‚àò f)) (closed_ball z (dist w z)) z,
    by simpa only [is_max_on, (‚àò), he] using hz,
  simpa only [he] using norm_max_aux‚ÇÅ (e.differentiable.comp_diff_cont_on_cl hd) hz
end
lemma norm_max_aux‚ÇÉ {f : ‚ÑÇ ‚Üí F} {z w : ‚ÑÇ} {r : ‚Ñù} (hr : dist w z = r)
  (hd : diff_cont_on_cl ‚ÑÇ f (ball z r)) (hz : is_max_on (norm ‚àò f) (ball z r) z) :
  ‚à•f w‚à• = ‚à•f z‚à• :=
begin
  subst r,
  rcases eq_or_ne w z with rfl|hne, { refl },
  rw ‚Üê dist_ne_zero at hne,
  exact norm_max_aux‚ÇÇ hd (closure_ball z hne ‚ñ∏ hz.closure hd.continuous_on.norm)
end
lemma norm_eq_on_closed_ball_of_is_max_on {f : E ‚Üí F} {z : E} {r : ‚Ñù}
  (hd : diff_cont_on_cl ‚ÑÇ f (ball z r)) (hz : is_max_on (norm ‚àò f) (ball z r) z) :
  eq_on (norm ‚àò f) (const E ‚à•f z‚à•) (closed_ball z r) :=
begin
  intros w hw,
  rw [mem_closed_ball, dist_comm] at hw,
  rcases eq_or_ne z w with rfl|hne, { refl },
  set e : ‚ÑÇ ‚Üí E := line_map z w,
  have hde : differentiable ‚ÑÇ e := (differentiable_id.smul_const (w - z)).add_const z,
  suffices : ‚à•(f ‚àò e) (1 : ‚ÑÇ)‚à• = ‚à•(f ‚àò e) (0 : ‚ÑÇ)‚à•, by simpa [e],
  have hr : dist (1 : ‚ÑÇ) 0 = 1, by simp,
  have hball : maps_to e (ball 0 1) (ball z r),
  { refine ((lipschitz_with_line_map z w).maps_to_ball
      (mt nndist_eq_zero.1 hne) 0 1).mono subset.rfl _,
    simpa only [line_map_apply_zero, mul_one, coe_nndist] using ball_subset_ball hw },
  exact norm_max_aux‚ÇÉ hr (hd.comp hde.diff_cont_on_cl hball)
    (hz.comp_maps_to hball (line_map_apply_zero z w))
end
lemma norm_eq_norm_of_is_max_on_of_ball_subset {f : E ‚Üí F} {s : set E} {z w : E}
  (hd : diff_cont_on_cl ‚ÑÇ f s) (hz : is_max_on (norm ‚àò f) s z) (hsub : ball z (dist w z) ‚äÜ s) :
  ‚à•f w‚à• = ‚à•f z‚à• :=
norm_eq_on_closed_ball_of_is_max_on (hd.mono hsub) (hz.on_subset hsub) (mem_closed_ball.2 le_rfl)
lemma norm_eventually_eq_of_is_local_max {f : E ‚Üí F} {c : E}
  (hd : ‚àÄ·∂† z in ùìù c, differentiable_at ‚ÑÇ f z) (hc : is_local_max (norm ‚àò f) c) :
  ‚àÄ·∂† y in ùìù c, ‚à•f y‚à• = ‚à•f c‚à• :=
begin
  rcases nhds_basis_closed_ball.eventually_iff.1 (hd.and hc) with ‚ü®r, hr‚ÇÄ, hr‚ü©,
  exact nhds_basis_closed_ball.eventually_iff.2 ‚ü®r, hr‚ÇÄ, norm_eq_on_closed_ball_of_is_max_on
    (differentiable_on.diff_cont_on_cl $
      Œª x hx, (hr $ closure_ball_subset_closed_ball hx).1.differentiable_within_at)
    (Œª x hx, (hr $ ball_subset_closed_ball hx).2)‚ü©
end
lemma is_open_set_of_mem_nhds_and_is_max_on_norm {f : E ‚Üí F} {s : set E}
  (hd : differentiable_on ‚ÑÇ f s) :
  is_open {z | s ‚àà ùìù z ‚àß is_max_on (norm ‚àò f) s z} :=
begin
  refine is_open_iff_mem_nhds.2 (Œª z hz, (eventually_eventually_nhds.2 hz.1).and _),
  replace hd : ‚àÄ·∂† w in ùìù z, differentiable_at ‚ÑÇ f w, from hd.eventually_differentiable_at hz.1,
  exact (norm_eventually_eq_of_is_local_max hd $ (hz.2.is_local_max hz.1)).mono
    (Œª x hx y hy, le_trans (hz.2 hy) hx.ge)
end
lemma exists_mem_frontier_is_max_on_norm [nontrivial E] [finite_dimensional ‚ÑÇ E]
  {f : E ‚Üí F} {U : set E} (hb : bounded U) (hne : U.nonempty) (hd : diff_cont_on_cl ‚ÑÇ f U) :
  ‚àÉ z ‚àà frontier U, is_max_on (norm ‚àò f) (closure U) z :=
begin
  have hc : is_compact (closure U), from hb.is_compact_closure,
  obtain ‚ü®w, hwU, hle‚ü© : ‚àÉ w ‚àà closure U, is_max_on (norm ‚àò f) (closure U) w,
    from hc.exists_forall_ge hne.closure hd.continuous_on.norm,
  rw [closure_eq_interior_union_frontier, mem_union_eq] at hwU,
  cases hwU, rotate, { exact ‚ü®w, hwU, hle‚ü© },
  have : interior U ‚â† univ, from ne_top_of_le_ne_top hc.ne_univ interior_subset_closure,
  rcases exists_mem_frontier_inf_dist_compl_eq_dist hwU this with ‚ü®z, hzU, hzw‚ü©,
  refine ‚ü®z, frontier_interior_subset hzU, Œª x hx, (mem_set_of_eq.mp $ hle hx).trans_eq _‚ü©,
  refine (norm_eq_norm_of_is_max_on_of_ball_subset hd (hle.on_subset subset_closure) _).symm,
  rw [dist_comm, ‚Üê hzw],
  exact ball_inf_dist_compl_subset.trans interior_subset
end
lemma norm_le_of_forall_mem_frontier_norm_le [nontrivial E] {f : E ‚Üí F} {U : set E} (hU : bounded U)
  (hd : diff_cont_on_cl ‚ÑÇ f U) {C : ‚Ñù} (hC : ‚àÄ z ‚àà frontier U, ‚à•f z‚à• ‚â§ C)
  {z : E} (hz : z ‚àà closure U) :
  ‚à•f z‚à• ‚â§ C :=
begin
  rw [closure_eq_self_union_frontier, union_comm, mem_union_eq] at hz,
  cases hz, { exact hC z hz },
  rcases exists_ne z with ‚ü®w, hne‚ü©,
  set e : ‚ÑÇ ‚Üí E := line_map z w,
  have hde : differentiable ‚ÑÇ e := (differentiable_id.smul_const (w - z)).add_const z,
  have hL : antilipschitz_with (nndist z w)‚Åª¬π e, from antilipschitz_with_line_map hne.symm,
  replace hd : diff_cont_on_cl ‚ÑÇ (f ‚àò e) (e ‚Åª¬π' U),
    from hd.comp hde.diff_cont_on_cl (maps_to_preimage _ _),
  have h‚ÇÄ : (0 : ‚ÑÇ) ‚àà e ‚Åª¬π' U, by simpa only [e, mem_preimage, line_map_apply_zero],
  rcases exists_mem_frontier_is_max_on_norm (hL.bounded_preimage hU) ‚ü®0, h‚ÇÄ‚ü© hd with ‚ü®Œ∂, hŒ∂U, hŒ∂‚ü©,
  calc ‚à•f z‚à• = ‚à•f (e 0)‚à• : by simp only [e, line_map_apply_zero]
  ... ‚â§ ‚à•f (e Œ∂)‚à• : hŒ∂ (subset_closure h‚ÇÄ)
  ... ‚â§ C : hC _ (hde.continuous.frontier_preimage_subset _ hŒ∂U)
end
lemma eq_on_closure_of_eq_on_frontier [nontrivial E] {f g : E ‚Üí F} {U : set E} (hU : bounded U)
  (hf : diff_cont_on_cl ‚ÑÇ f U) (hg : diff_cont_on_cl ‚ÑÇ g U) (hfg : eq_on f g (frontier U)) :
  eq_on f g (closure U) :=
begin
  suffices H : ‚àÄ z ‚àà closure U, ‚à•(f - g) z‚à• ‚â§ 0, by simpa [sub_eq_zero] using H,
  refine Œª z hz, norm_le_of_forall_mem_frontier_norm_le hU (hf.sub hg) (Œª w hw, _) hz,
  simp [hfg hw]
end
lemma eq_on_of_eq_on_frontier [nontrivial E] {f g : E ‚Üí F} {U : set E} (hU : bounded U)
  (hf : diff_cont_on_cl ‚ÑÇ f U) (hg : diff_cont_on_cl ‚ÑÇ g U) (hfg : eq_on f g (frontier U)) :
  eq_on f g U :=
(eq_on_closure_of_eq_on_frontier hU hf hg hfg).mono subset_closure
end complex
