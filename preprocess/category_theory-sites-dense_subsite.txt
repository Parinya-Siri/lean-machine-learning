import category_theory.sites.sheaf
import category_theory.sites.cover_lifting
import category_theory.adjunction.fully_faithful
universes w v u
namespace category_theory
variables {C : Type*} [category C] {D : Type*} [category D] {E : Type*} [category E]
variables (J : grothendieck_topology C) (K : grothendieck_topology D)
variables {L : grothendieck_topology E}
@[nolint has_inhabited_instance]
structure presieve.cover_by_image_structure (G : C ‚•§ D) {V U : D} (f : V ‚ü∂ U) :=
(obj : C)
(lift : V ‚ü∂ G.obj obj)
(map : G.obj obj ‚ü∂ U)
(fac' : lift ‚â´ map = f . obviously)
restate_axiom presieve.cover_by_image_structure.fac'
attribute [simp, reassoc] presieve.cover_by_image_structure.fac
def presieve.cover_by_image (G : C ‚•§ D) (U : D) : presieve U :=
Œª Y f, nonempty (presieve.cover_by_image_structure G f)
def sieve.cover_by_image (G : C ‚•§ D) (U : D) : sieve U :=
‚ü®presieve.cover_by_image G U,
  Œª X Y f ‚ü®‚ü®Z, f‚ÇÅ, f‚ÇÇ, (e : _ = _)‚ü©‚ü© g,
    ‚ü®‚ü®Z, g ‚â´ f‚ÇÅ, f‚ÇÇ, show (g ‚â´ f‚ÇÅ) ‚â´ f‚ÇÇ = g ‚â´ f, by rw [category.assoc, ‚Üê e]‚ü©‚ü©‚ü©
lemma presieve.in_cover_by_image (G : C ‚•§ D) {X : D} {Y : C} (f : G.obj Y ‚ü∂ X) :
  presieve.cover_by_image G X f := ‚ü®‚ü®Y, ùüô _, f, by simp‚ü©‚ü©
structure cover_dense (K : grothendieck_topology D) (G : C ‚•§ D) : Prop :=
(is_cover : ‚àÄ (U : D), sieve.cover_by_image G U ‚àà K U)
open presieve opposite
namespace cover_dense
variable {K}
variables {A : Type*} [category A] {G : C ‚•§ D} (H : cover_dense K G)
@[simps] def hom_over {‚Ñ± : D·µí·µñ ‚•§ A} {‚Ñ±' : Sheaf K A} (Œ± : G.op ‚ãô ‚Ñ± ‚ü∂ G.op ‚ãô ‚Ñ±'.val) (X : A) :
  G.op ‚ãô (‚Ñ± ‚ãô coyoneda.obj (op X)) ‚ü∂ G.op ‚ãô (sheaf_over ‚Ñ±' X).val :=
whisker_right Œ± (coyoneda.obj (op X))
@[simps] def iso_over {‚Ñ± ‚Ñ±' : Sheaf K A} (Œ± : G.op ‚ãô ‚Ñ±.val ‚âÖ G.op ‚ãô ‚Ñ±'.val) (X : A) :
  G.op ‚ãô (sheaf_over ‚Ñ± X).val ‚âÖ G.op ‚ãô (sheaf_over ‚Ñ±' X).val :=
iso_whisker_right Œ± (coyoneda.obj (op X))
lemma sheaf_eq_amalgamation (‚Ñ± : Sheaf K A) {X : A} {U : D} {T : sieve U} (hT)
  (x : family_of_elements _ T) (hx) (t) (h : x.is_amalgamation t) :
  t = (‚Ñ±.cond X T hT).amalgamate x hx :=
(‚Ñ±.cond X T hT).is_separated_for x t _ h ((‚Ñ±.cond X T hT).is_amalgamation hx)
include H
variable [full G]
namespace types
variables {‚Ñ± : D·µí·µñ ‚•§ Type v} {‚Ñ±' : SheafOfTypes.{v} K} (Œ± : G.op ‚ãô ‚Ñ± ‚ü∂ G.op ‚ãô ‚Ñ±'.val)
@[simp, nolint unused_arguments] noncomputable
def pushforward_family {X} (x : ‚Ñ±.obj (op X)) :
  family_of_elements ‚Ñ±'.val (cover_by_image G X) := Œª Y f hf,
‚Ñ±'.val.map hf.some.lift.op $ Œ±.app (op _) (‚Ñ±.map hf.some.map.op x : _)
lemma pushforward_family_compatible {X} (x : ‚Ñ±.obj (op X)) :
  (pushforward_family H Œ± x).compatible :=
begin
  intros Y‚ÇÅ Y‚ÇÇ Z g‚ÇÅ g‚ÇÇ f‚ÇÅ f‚ÇÇ h‚ÇÅ h‚ÇÇ e,
  apply H.ext,
  intros Y f,
  simp only [pushforward_family, ‚Üê functor_to_types.map_comp_apply, ‚Üê op_comp],
  change (‚Ñ±.map _ ‚â´ Œ±.app (op _) ‚â´ ‚Ñ±'.val.map _) _ =
    (‚Ñ±.map _ ‚â´ Œ±.app (op _) ‚â´ ‚Ñ±'.val.map _) _,
  rw ‚Üê G.image_preimage (f ‚â´ g‚ÇÅ ‚â´ _),
  rw ‚Üê G.image_preimage (f ‚â´ g‚ÇÇ ‚â´ _),
  erw ‚Üê Œ±.naturality (G.preimage _).op,
  erw ‚Üê Œ±.naturality (G.preimage _).op,
  refine congr_fun _ x,
  simp only [quiver.hom.unop_op, functor.comp_map, ‚Üê op_comp, ‚Üê category.assoc,
    functor.op_map, ‚Üê ‚Ñ±.map_comp, G.image_preimage],
  congr' 3,
  simp [e]
end
noncomputable
def app_hom (X : D) : ‚Ñ±.obj (op X) ‚ü∂ ‚Ñ±'.val.obj (op X) := Œª x,
  (‚Ñ±'.cond _ (H.is_cover X)).amalgamate
    (pushforward_family H Œ± x)
    (pushforward_family_compatible H Œ± x)
@[simp] lemma pushforward_family_apply {X} (x : ‚Ñ±.obj (op X)) {Y : C} (f : G.obj Y ‚ü∂ X) :
  pushforward_family H Œ± x f (presieve.in_cover_by_image G f) = Œ±.app (op Y) (‚Ñ±.map f.op x) :=
begin
  unfold pushforward_family,
  refine congr_fun _ x,
  rw ‚Üê G.image_preimage (nonempty.some _ : presieve.cover_by_image_structure _ _).lift,
  change ‚Ñ±.map _ ‚â´ Œ±.app (op _) ‚â´ ‚Ñ±'.val.map _ = ‚Ñ±.map f.op ‚â´ Œ±.app (op Y),
  erw ‚Üê Œ±.naturality (G.preimage _).op,
  simp only [‚Üê functor.map_comp, ‚Üê category.assoc, functor.comp_map, G.image_preimage,
     G.op_map, quiver.hom.unop_op, ‚Üê op_comp, presieve.cover_by_image_structure.fac],
end
@[simp] lemma app_hom_restrict {X : D} {Y : C} (f : op X ‚ü∂ op (G.obj Y)) (x) :
  ‚Ñ±'.val.map f (app_hom H Œ± X x) = Œ±.app (op Y) (‚Ñ±.map f x) :=
begin
  refine ((‚Ñ±'.cond _ (H.is_cover X)).valid_glue
    (pushforward_family_compatible H Œ± x) f.unop (presieve.in_cover_by_image G f.unop)).trans _,
  apply pushforward_family_apply
end
@[simp] lemma app_hom_valid_glue {X : D} {Y : C} (f : op X ‚ü∂ op (G.obj Y)) :
  app_hom H Œ± X ‚â´ ‚Ñ±'.val.map f = ‚Ñ±.map f ‚â´ Œ±.app (op Y) :=
by { ext, apply app_hom_restrict }
@[simps] noncomputable
def app_iso {‚Ñ± ‚Ñ±' : SheafOfTypes.{v} K} (i : G.op ‚ãô ‚Ñ±.val ‚âÖ G.op ‚ãô ‚Ñ±'.val) (X : D) :
  ‚Ñ±.val.obj (op X) ‚âÖ ‚Ñ±'.val.obj (op X) :=
{ hom := app_hom H i.hom X,
  inv := app_hom H i.inv X,
  hom_inv_id' := by { ext x, apply H.ext, intros Y f, simp },
  inv_hom_id' := by { ext x, apply H.ext, intros Y f, simp } }
@[simps] noncomputable
def presheaf_hom (Œ± : G.op ‚ãô ‚Ñ± ‚ü∂ G.op ‚ãô ‚Ñ±'.val) : ‚Ñ± ‚ü∂ ‚Ñ±'.val :=
{ app := Œª X, app_hom H Œ± (unop X), naturality' := Œª X Y f,
  begin
    ext x,
    apply H.ext ‚Ñ±' (unop Y),
    intros Y' f',
    simp only [app_hom_restrict, types_comp_apply, ‚Üê functor_to_types.map_comp_apply],
    rw app_hom_restrict H Œ± (f ‚â´ f'.op : op (unop X) ‚ü∂ _)
  end }
@[simps] noncomputable
def presheaf_iso {‚Ñ± ‚Ñ±' : SheafOfTypes.{v} K} (i : G.op ‚ãô ‚Ñ±.val ‚âÖ G.op ‚ãô ‚Ñ±'.val) :
  ‚Ñ±.val ‚âÖ ‚Ñ±'.val :=
nat_iso.of_components (Œª X, app_iso H i (unop X)) (presheaf_hom H i.hom).naturality
@[simps] noncomputable
def sheaf_iso {‚Ñ± ‚Ñ±' : SheafOfTypes.{v} K} (i : G.op ‚ãô ‚Ñ±.val ‚âÖ G.op ‚ãô ‚Ñ±'.val) : ‚Ñ± ‚âÖ ‚Ñ±' :=
{ hom := ‚ü®(presheaf_iso H i).hom‚ü©,
  inv := ‚ü®(presheaf_iso H i).inv‚ü©,
  hom_inv_id' := by { ext1, apply (presheaf_iso H i).hom_inv_id },
  inv_hom_id' := by { ext1, apply (presheaf_iso H i).inv_hom_id } }
end types
open types
variables {‚Ñ± : D·µí·µñ ‚•§ A} {‚Ñ±' : Sheaf K A}
@[simps] noncomputable
def sheaf_coyoneda_hom (Œ± : G.op ‚ãô ‚Ñ± ‚ü∂ G.op ‚ãô ‚Ñ±'.val) :
  coyoneda ‚ãô (whiskering_left D·µí·µñ A Type*).obj ‚Ñ± ‚ü∂
  coyoneda ‚ãô (whiskering_left D·µí·µñ A Type*).obj ‚Ñ±'.val :=
{ app := Œª X, presheaf_hom H (hom_over Œ± (unop X)), naturality' := Œª X Y f,
  begin
    ext U x,
    change app_hom H (hom_over Œ± (unop Y)) (unop U) (f.unop ‚â´ x) =
      f.unop ‚â´ app_hom H (hom_over Œ± (unop X)) (unop U) x,
    symmetry,
    apply sheaf_eq_amalgamation,
    apply H.is_cover,
    intros Y' f' hf',
    change unop X ‚ü∂ ‚Ñ±.obj (op (unop _)) at x,
    dsimp,
    simp only [pushforward_family, functor.comp_map,
      coyoneda_obj_map, hom_over_app, category.assoc],
    congr' 1,
    conv_lhs { rw ‚Üê hf'.some.fac },
    simp only [‚Üê category.assoc, op_comp, functor.map_comp],
    congr' 1,
    refine (app_hom_restrict H (hom_over Œ± (unop X)) hf'.some.map.op x).trans _,
    simp
  end }
noncomputable
def sheaf_yoneda_hom (Œ± : G.op ‚ãô ‚Ñ± ‚ü∂ G.op ‚ãô ‚Ñ±'.val) :
  ‚Ñ± ‚ãô yoneda ‚ü∂ ‚Ñ±'.val ‚ãô yoneda :=
begin
  let Œ± := sheaf_coyoneda_hom H Œ±,
  refine { app := _, naturality' := _ },
  { intro U,
    refine { app := Œª X, (Œ±.app X).app U,
      naturality' := Œª X Y f, by simpa using congr_app (Œ±.naturality f) U } },
  { intros U V i,
    ext X x,
    exact congr_fun ((Œ±.app X).naturality i) x },
end
noncomputable
def sheaf_hom (Œ± : G.op ‚ãô ‚Ñ± ‚ü∂ G.op ‚ãô ‚Ñ±'.val) :
  ‚Ñ± ‚ü∂ ‚Ñ±'.val :=
let Œ±' := sheaf_yoneda_hom H Œ± in
  { app := Œª X, yoneda.preimage (Œ±'.app X),
    naturality' := Œª X Y f, yoneda.map_injective (by simpa using Œ±'.naturality f) }
@[simps] noncomputable
def presheaf_iso {‚Ñ± ‚Ñ±' : Sheaf K A} (i : G.op ‚ãô ‚Ñ±.val ‚âÖ G.op ‚ãô ‚Ñ±'.val) :
  ‚Ñ±.val ‚âÖ ‚Ñ±'.val :=
begin
  haveI : ‚àÄ (X : D·µí·µñ), is_iso ((sheaf_hom H i.hom).app X),
  { intro X,
    apply is_iso_of_reflects_iso _ yoneda,
    use (sheaf_yoneda_hom H i.inv).app X,
    split;
      ext x : 2;
      simp only [sheaf_hom, nat_trans.comp_app, nat_trans.id_app, functor.image_preimage],
      exact ((presheaf_iso H (iso_over i (unop x))).app X).hom_inv_id,
      exact ((presheaf_iso H (iso_over i (unop x))).app X).inv_hom_id,
    apply_instance },
  haveI : is_iso (sheaf_hom H i.hom) := by apply nat_iso.is_iso_of_is_iso_app,
  apply as_iso (sheaf_hom H i.hom),
end
@[simps] noncomputable
def sheaf_iso {‚Ñ± ‚Ñ±' : Sheaf K A} (i : G.op ‚ãô ‚Ñ±.val ‚âÖ G.op ‚ãô ‚Ñ±'.val) : ‚Ñ± ‚âÖ ‚Ñ±' :=
{ hom := ‚ü®(presheaf_iso H i).hom‚ü©,
  inv := ‚ü®(presheaf_iso H i).inv‚ü©,
  hom_inv_id' := by { ext1, apply (presheaf_iso H i).hom_inv_id },
  inv_hom_id' := by { ext1, apply (presheaf_iso H i).inv_hom_id } }
lemma sheaf_hom_restrict_eq (Œ± : G.op ‚ãô ‚Ñ± ‚ü∂ G.op ‚ãô ‚Ñ±'.val) :
  whisker_left G.op (sheaf_hom H Œ±) = Œ± :=
begin
  ext X,
  apply yoneda.map_injective,
  ext U,
  erw yoneda.image_preimage,
  symmetry,
  change (show (‚Ñ±'.val ‚ãô coyoneda.obj (op (unop U))).obj (op (G.obj (unop X))), from _) = _,
  apply sheaf_eq_amalgamation ‚Ñ±' (H.is_cover _),
  intros Y f hf,
  conv_lhs { rw ‚Üê hf.some.fac },
  simp only [pushforward_family, functor.comp_map, yoneda_map_app,
    coyoneda_obj_map, op_comp, functor_to_types.map_comp_apply, hom_over_app, ‚Üê category.assoc],
  congr' 1,
  simp only [category.assoc],
  congr' 1,
  rw ‚Üê G.image_preimage hf.some.map,
  symmetry,
  apply Œ±.naturality (G.preimage hf.some.map).op,
  apply_instance
end
lemma sheaf_hom_eq (Œ± : ‚Ñ± ‚ü∂ ‚Ñ±'.val) : sheaf_hom H (whisker_left G.op Œ±) = Œ± :=
begin
  ext X,
  apply yoneda.map_injective,
  swap, { apply_instance },
  ext U,
  erw yoneda.image_preimage,
  symmetry,
  change (show (‚Ñ±'.val ‚ãô coyoneda.obj (op (unop U))).obj (op (unop X)), from _) = _,
  apply sheaf_eq_amalgamation ‚Ñ±' (H.is_cover _),
  intros Y f hf,
  conv_lhs { rw ‚Üê hf.some.fac },
  dsimp,
  simp,
end
noncomputable
def restrict_hom_equiv_hom : (G.op ‚ãô ‚Ñ± ‚ü∂ G.op ‚ãô ‚Ñ±'.val) ‚âÉ (‚Ñ± ‚ü∂ ‚Ñ±'.val) :=
{ to_fun := sheaf_hom H,
  inv_fun := whisker_left G.op,
  left_inv := sheaf_hom_restrict_eq H,
  right_inv := sheaf_hom_eq H }
lemma iso_of_restrict_iso {‚Ñ± ‚Ñ±' : Sheaf K A} (Œ± : ‚Ñ± ‚ü∂ ‚Ñ±')
  (i : is_iso (whisker_left G.op Œ±.val)) : is_iso Œ± :=
begin
  convert is_iso.of_iso (sheaf_iso H (as_iso (whisker_left G.op Œ±.val))) using 1,
  ext1,
  apply (sheaf_hom_eq _ _).symm
end
lemma compatible_preserving [faithful G] : compatible_preserving K G :=
begin
  constructor,
  intros ‚Ñ± Z T x hx Y‚ÇÅ Y‚ÇÇ X f‚ÇÅ f‚ÇÇ g‚ÇÅ g‚ÇÇ hg‚ÇÅ hg‚ÇÇ eq,
  apply H.ext,
  intros W i,
  simp only [‚Üê functor_to_types.map_comp_apply, ‚Üê op_comp],
  rw ‚Üê G.image_preimage (i ‚â´ f‚ÇÅ),
  rw ‚Üê G.image_preimage (i ‚â´ f‚ÇÇ),
  apply hx,
  apply G.map_injective,
  simp [eq]
end
noncomputable
instance sites.pullback.full [faithful G] (Hp : cover_preserving J K G) :
  full (sites.pullback A H.compatible_preserving Hp) :=
{ preimage := Œª ‚Ñ± ‚Ñ±' Œ±, ‚ü®H.sheaf_hom Œ±.val‚ü©,
  witness' := Œª ‚Ñ± ‚Ñ±' Œ±, Sheaf.hom.ext _ _ $ H.sheaf_hom_restrict_eq Œ±.val }
instance sites.pullback.faithful [faithful G] (Hp : cover_preserving J K G) :
  faithful (sites.pullback A H.compatible_preserving Hp) :=
{ map_injective' := begin
    intros ‚Ñ± ‚Ñ±' Œ± Œ≤ e,
    ext1,
    apply_fun (Œª e, e.val) at e,
    dsimp at e,
    rw [‚Üê H.sheaf_hom_eq Œ±.val, ‚Üê H.sheaf_hom_eq Œ≤.val, e],
  end }
end cover_dense
end category_theory
namespace category_theory.cover_dense
open category_theory
variables {C D : Type u} [category.{v} C] [category.{v} D]
variables {G : C ‚•§ D} [full G] [faithful G]
variables {J : grothendieck_topology C} {K : grothendieck_topology D}
variables {A : Type w} [category.{max u v} A] [limits.has_limits A]
variables (Hd : cover_dense K G) (Hp : cover_preserving J K G) (Hl : cover_lifting J K G)
include Hd Hp Hl
@[simps functor inverse] noncomputable
def Sheaf_equiv_of_cover_preserving_cover_lifting : Sheaf J A ‚âå Sheaf K A :=
begin
  symmetry,
  let Œ± := sites.pullback_copullback_adjunction.{w v u} A Hp Hl Hd.compatible_preserving,
  haveI : ‚àÄ (X : Sheaf J A), is_iso (Œ±.counit.app X),
  { intro ‚Ñ±,
    apply_with (reflects_isomorphisms.reflects (Sheaf_to_presheaf J A)) { instances := ff },
    exact is_iso.of_iso ((@as_iso _ _ _ _ _ (Ran.reflective A G.op)).app ‚Ñ±.val) },
  haveI : is_iso Œ±.counit := nat_iso.is_iso_of_is_iso_app _,
  exact
  { functor := sites.pullback A Hd.compatible_preserving Hp,
    inverse := sites.copullback A Hl,
    unit_iso := as_iso Œ±.unit,
    counit_iso := as_iso Œ±.counit,
    functor_unit_iso_comp' := Œª ‚Ñ±, by convert Œ±.left_triangle_components }
end
end category_theory.cover_dense
