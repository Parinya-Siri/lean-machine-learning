import category_theory.adjunction.limits
import category_theory.adjunction.opposites
import category_theory.elements
import category_theory.limits.functor_category
import category_theory.limits.kan_extension
import category_theory.limits.preserves.limits
import category_theory.limits.shapes.terminal
import category_theory.limits.types
namespace category_theory
noncomputable theory
open category limits
universes u‚ÇÅ u‚ÇÇ
variables {C : Type u‚ÇÅ} [small_category C]
variables {‚Ñ∞ : Type u‚ÇÇ} [category.{u‚ÇÅ} ‚Ñ∞]
variable (A : C ‚•§ ‚Ñ∞)
namespace colimit_adj
@[simps]
def restricted_yoneda : ‚Ñ∞ ‚•§ (C·µí·µñ ‚•§ Type u‚ÇÅ) :=
yoneda ‚ãô (whiskering_left _ _ (Type u‚ÇÅ)).obj (functor.op A)
def restricted_yoneda_yoneda : restricted_yoneda (yoneda : C ‚•§ C·µí·µñ ‚•§ Type u‚ÇÅ) ‚âÖ ùü≠ _ :=
nat_iso.of_components
(Œª P, nat_iso.of_components (Œª X, yoneda_sections_small X.unop _)
  (Œª X Y f, funext $ Œª x,
  begin
    dsimp,
    rw ‚Üê functor_to_types.naturality _ _ x f (ùüô _),
    dsimp,
    simp,
  end))
(Œª _ _ _, rfl)
def restrict_yoneda_hom_equiv (P : C·µí·µñ ‚•§ Type u‚ÇÅ) (E : ‚Ñ∞)
  {c : cocone ((category_of_elements.œÄ P).left_op ‚ãô A)} (t : is_colimit c) :
  (c.X ‚ü∂ E) ‚âÉ (P ‚ü∂ (restricted_yoneda A).obj E) :=
((ulift_trivial _).symm ‚â™‚â´ t.hom_iso' E).to_equiv.trans
{ to_fun := Œª k,
  { app := Œª c p, k.1 (opposite.op ‚ü®_, p‚ü©),
    naturality' := Œª c c' f, funext $ Œª p,
      (k.2 (quiver.hom.op ‚ü®f, rfl‚ü© :
              (opposite.op ‚ü®c', P.map f p‚ü© : P.elements·µí·µñ) ‚ü∂ opposite.op ‚ü®c, p‚ü©)).symm },
  inv_fun := Œª œÑ,
  { val := Œª p, œÑ.app p.unop.1 p.unop.2,
    property := Œª p p' f,
    begin
      simp_rw [‚Üê f.unop.2],
      apply (congr_fun (œÑ.naturality f.unop.1) p'.unop.2).symm,
    end },
  left_inv :=
  begin
    rintro ‚ü®k‚ÇÅ, k‚ÇÇ‚ü©,
    ext,
    dsimp,
    congr' 1,
    simp,
  end,
  right_inv :=
  begin
    rintro ‚ü®_, _‚ü©,
    refl,
  end }
lemma restrict_yoneda_hom_equiv_natural (P : C·µí·µñ ‚•§ Type u‚ÇÅ) (E‚ÇÅ E‚ÇÇ : ‚Ñ∞) (g : E‚ÇÅ ‚ü∂ E‚ÇÇ)
  {c : cocone _} (t : is_colimit c) (k : c.X ‚ü∂ E‚ÇÅ) :
restrict_yoneda_hom_equiv A P E‚ÇÇ t (k ‚â´ g) =
  restrict_yoneda_hom_equiv A P E‚ÇÅ t k ‚â´ (restricted_yoneda A).map g :=
begin
  ext _ X p,
  apply (assoc _ _ _).symm,
end
variables [has_colimits ‚Ñ∞]
def extend_along_yoneda : (C·µí·µñ ‚•§ Type u‚ÇÅ) ‚•§ ‚Ñ∞ :=
adjunction.left_adjoint_of_equiv
  (Œª P E, restrict_yoneda_hom_equiv A P E (colimit.is_colimit _))
  (Œª P E E' g, restrict_yoneda_hom_equiv_natural A P E E' g _)
@[simp]
lemma extend_along_yoneda_obj (P : C·µí·µñ ‚•§ Type u‚ÇÅ) : (extend_along_yoneda A).obj P =
colimit ((category_of_elements.œÄ P).left_op ‚ãô A) := rfl
lemma extend_along_yoneda_map {X Y : C·µí·µñ ‚•§ Type u‚ÇÅ} (f : X ‚ü∂ Y) :
  (extend_along_yoneda A).map f = colimit.pre ((category_of_elements.œÄ Y).left_op ‚ãô A)
    (category_of_elements.map f).op :=
begin
  ext J,
  erw colimit.Œπ_pre ((category_of_elements.œÄ Y).left_op ‚ãô A) (category_of_elements.map f).op,
  dsimp only [extend_along_yoneda, restrict_yoneda_hom_equiv,
    is_colimit.hom_iso', is_colimit.hom_iso, ulift_trivial],
  simpa
end
def yoneda_adjunction : extend_along_yoneda A ‚ä£ restricted_yoneda A :=
adjunction.adjunction_of_equiv_left _ _
def elements.initial (A : C) : (yoneda.obj A).elements :=
‚ü®opposite.op A, ùüô _‚ü©
def is_initial (A : C) : is_initial (elements.initial A) :=
{ desc := Œª s, ‚ü®s.X.2.op, comp_id _‚ü©,
  uniq' := Œª s m w,
  begin
    simp_rw ‚Üê m.2,
    dsimp [elements.initial],
    simp,
  end,
  fac' := by rintros s ‚ü®‚ü®‚ü©‚ü©, }
def is_extension_along_yoneda : (yoneda : C ‚•§ C·µí·µñ ‚•§ Type u‚ÇÅ) ‚ãô extend_along_yoneda A ‚âÖ A :=
nat_iso.of_components
(Œª X, (colimit.is_colimit _).cocone_point_unique_up_to_iso
      (colimit_of_diagram_terminal (terminal_op_of_initial (is_initial _)) _))
begin
  intros X Y f,
  change (colimit.desc _ ‚ü®_, _‚ü© ‚â´ colimit.desc _ _) = colimit.desc _ _ ‚â´ _,
  apply colimit.hom_ext,
  intro j,
  rw [colimit.Œπ_desc_assoc, colimit.Œπ_desc_assoc],
  change (colimit.Œπ _ _ ‚â´ ùüô _) ‚â´ colimit.desc _ _ = _,
  rw [comp_id, colimit.Œπ_desc],
  dsimp,
  rw ‚Üê A.map_comp,
  congr' 1,
end
instance : preserves_colimits (extend_along_yoneda A) :=
(yoneda_adjunction A).left_adjoint_preserves_colimits
@[simps] def extend_along_yoneda_iso_Kan_app (X) :
  (extend_along_yoneda A).obj X ‚âÖ ((Lan yoneda : (_ ‚•§ ‚Ñ∞) ‚•§ _).obj A).obj X :=
let eq := category_of_elements.costructured_arrow_yoneda_equivalence X in
{ hom := colimit.pre (Lan.diagram (yoneda : C ‚•§ _ ‚•§ Type u‚ÇÅ) A X) eq.functor,
  inv := colimit.pre ((category_of_elements.œÄ X).left_op ‚ãô A) eq.inverse,
  hom_inv_id' :=
  begin
    erw colimit.pre_pre ((category_of_elements.œÄ X).left_op ‚ãô A) eq.inverse,
    transitivity colimit.pre ((category_of_elements.œÄ X).left_op ‚ãô A) (ùü≠ _),
    congr,
    { exact congr_arg functor.op (category_of_elements.from_to_costructured_arrow_eq X) },
    { ext, simp only [colimit.Œπ_pre], erw category.comp_id, congr }
  end,
  inv_hom_id' :=
  begin
    erw colimit.pre_pre (Lan.diagram (yoneda : C ‚•§ _ ‚•§ Type u‚ÇÅ) A X) eq.functor,
    transitivity colimit.pre (Lan.diagram (yoneda : C ‚•§ _ ‚•§ Type u‚ÇÅ) A X) (ùü≠ _),
    congr,
    { exact category_of_elements.to_from_costructured_arrow_eq X },
    { ext, simp only [colimit.Œπ_pre], erw category.comp_id, congr }
  end }
@[simps]
def extend_along_yoneda_iso_Kan : extend_along_yoneda A ‚âÖ (Lan yoneda : (_ ‚•§ ‚Ñ∞) ‚•§ _).obj A :=
nat_iso.of_components (extend_along_yoneda_iso_Kan_app A)
begin
  intros X Y f, simp,
  rw extend_along_yoneda_map,
  erw colimit.pre_pre (Lan.diagram (yoneda : C ‚•§ _ ‚•§ Type u‚ÇÅ) A Y) (costructured_arrow.map f),
  erw colimit.pre_pre (Lan.diagram (yoneda : C ‚•§ _ ‚•§ Type u‚ÇÅ) A Y)
    (category_of_elements.costructured_arrow_yoneda_equivalence Y).functor,
  congr' 1,
  apply category_of_elements.costructured_arrow_yoneda_equivalence_naturality,
end
@[simps] def extend_of_comp_yoneda_iso_Lan {D : Type u‚ÇÅ} [small_category D] (F : C ‚•§ D) :
  extend_along_yoneda (F ‚ãô yoneda) ‚âÖ Lan F.op :=
adjunction.nat_iso_of_right_adjoint_nat_iso
  (yoneda_adjunction (F ‚ãô yoneda))
  (Lan.adjunction (Type u‚ÇÅ) F.op)
  (iso_whisker_right curried_yoneda_lemma' ((whiskering_left C·µí·µñ D·µí·µñ (Type u‚ÇÅ)).obj F.op : _))
end colimit_adj
open colimit_adj
@[simps] def comp_yoneda_iso_yoneda_comp_Lan {D : Type u‚ÇÅ} [small_category D] (F : C ‚•§ D) :
  F ‚ãô yoneda ‚âÖ yoneda ‚ãô Lan F.op :=
(is_extension_along_yoneda (F ‚ãô yoneda)).symm ‚â™‚â´
  iso_whisker_left yoneda (extend_of_comp_yoneda_iso_Lan F)
def extend_along_yoneda_yoneda : extend_along_yoneda (yoneda : C ‚•§ _) ‚âÖ ùü≠ _ :=
adjunction.nat_iso_of_right_adjoint_nat_iso
  (yoneda_adjunction _)
  adjunction.id
  restricted_yoneda_yoneda
def cocone_of_representable (P : C·µí·µñ ‚•§ Type u‚ÇÅ) :
  cocone (functor_to_representables P) :=
cocone.extend (colimit.cocone _) (extend_along_yoneda_yoneda.hom.app P)
@[simp] lemma cocone_of_representable_X (P : C·µí·µñ ‚•§ Type u‚ÇÅ) :
  (cocone_of_representable P).X = P :=
rfl
lemma cocone_of_representable_naturality {P‚ÇÅ P‚ÇÇ : C·µí·µñ ‚•§ Type u‚ÇÅ} (Œ± : P‚ÇÅ ‚ü∂ P‚ÇÇ)
  (j : (P‚ÇÅ.elements)·µí·µñ) :
  (cocone_of_representable P‚ÇÅ).Œπ.app j ‚â´ Œ± =
    (cocone_of_representable P‚ÇÇ).Œπ.app ((category_of_elements.map Œ±).op.obj j) :=
begin
  ext T f,
  simpa [cocone_of_representable_Œπ_app] using functor_to_types.naturality _ _ Œ± f.op _,
end
def colimit_of_representable (P : C·µí·µñ ‚•§ Type u‚ÇÅ) : is_colimit (cocone_of_representable P) :=
begin
  apply is_colimit.of_point_iso (colimit.is_colimit (functor_to_representables P)),
  change is_iso (colimit.desc _ (cocone.extend _ _)),
  rw [colimit.desc_extend, colimit.desc_cocone],
  apply_instance,
end
def nat_iso_of_nat_iso_on_representables (L‚ÇÅ L‚ÇÇ : (C·µí·µñ ‚•§ Type u‚ÇÅ) ‚•§ ‚Ñ∞)
  [preserves_colimits L‚ÇÅ] [preserves_colimits L‚ÇÇ]
  (h : yoneda ‚ãô L‚ÇÅ ‚âÖ yoneda ‚ãô L‚ÇÇ) : L‚ÇÅ ‚âÖ L‚ÇÇ :=
begin
  apply nat_iso.of_components _ _,
  { intro P,
    refine (is_colimit_of_preserves L‚ÇÅ (colimit_of_representable P)).cocone_points_iso_of_nat_iso
           (is_colimit_of_preserves L‚ÇÇ (colimit_of_representable P)) _,
    apply functor.associator _ _ _ ‚â™‚â´ _,
    exact iso_whisker_left (category_of_elements.œÄ P).left_op h },
  { intros P‚ÇÅ P‚ÇÇ f,
    apply (is_colimit_of_preserves L‚ÇÅ (colimit_of_representable P‚ÇÅ)).hom_ext,
    intro j,
    dsimp only [id.def, is_colimit.cocone_points_iso_of_nat_iso_hom, iso_whisker_left_hom],
    have :
      (L‚ÇÅ.map_cocone (cocone_of_representable P‚ÇÅ)).Œπ.app j ‚â´ L‚ÇÅ.map f =
      (L‚ÇÅ.map_cocone (cocone_of_representable P‚ÇÇ)).Œπ.app ((category_of_elements.map f).op.obj j),
    { dsimp,
      rw [‚Üê L‚ÇÅ.map_comp, cocone_of_representable_naturality],
      refl },
    rw [reassoc_of this, is_colimit.Œπ_map_assoc, is_colimit.Œπ_map],
    dsimp,
    rw [‚Üê L‚ÇÇ.map_comp, cocone_of_representable_naturality],
    refl }
end
variable [has_colimits ‚Ñ∞]
def unique_extension_along_yoneda (L : (C·µí·µñ ‚•§ Type u‚ÇÅ) ‚•§ ‚Ñ∞) (hL : yoneda ‚ãô L ‚âÖ A)
  [preserves_colimits L] :
  L ‚âÖ extend_along_yoneda A :=
nat_iso_of_nat_iso_on_representables _ _ (hL ‚â™‚â´ (is_extension_along_yoneda _).symm)
def is_left_adjoint_of_preserves_colimits_aux (L : (C·µí·µñ ‚•§ Type u‚ÇÅ) ‚•§ ‚Ñ∞) [preserves_colimits L] :
  is_left_adjoint L :=
{ right := restricted_yoneda (yoneda ‚ãô L),
  adj := (yoneda_adjunction _).of_nat_iso_left
            ((unique_extension_along_yoneda _ L (iso.refl _)).symm) }
def is_left_adjoint_of_preserves_colimits (L : (C ‚•§ Type u‚ÇÅ) ‚•§ ‚Ñ∞) [preserves_colimits L] :
  is_left_adjoint L :=
let e : (_ ‚•§ Type u‚ÇÅ) ‚âå (_ ‚•§ Type u‚ÇÅ) := (op_op_equivalence C).congr_left,
    t := is_left_adjoint_of_preserves_colimits_aux (e.functor ‚ãô L : _)
in by exactI adjunction.left_adjoint_of_nat_iso (e.inv_fun_id_assoc _)
end category_theory
