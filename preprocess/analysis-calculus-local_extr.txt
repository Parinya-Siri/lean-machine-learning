import analysis.calculus.deriv
import data.polynomial.field_division
import topology.algebra.order.extend_from
import topology.algebra.polynomial
import topology.local_extr
universes u v
open filter set
open_locale topological_space classical polynomial
section module
variables {E : Type u} [normed_group E] [normed_space ‚Ñù E] {f : E ‚Üí ‚Ñù} {a : E}
  {f' : E ‚ÜíL[‚Ñù] ‚Ñù}
def pos_tangent_cone_at (s : set E) (x : E) : set E :=
{y : E | ‚àÉ(c : ‚Ñï ‚Üí ‚Ñù) (d : ‚Ñï ‚Üí E), (‚àÄ·∂† n in at_top, x + d n ‚àà s) ‚àß
  (tendsto c at_top at_top) ‚àß (tendsto (Œªn, c n ‚Ä¢ d n) at_top (ùìù y))}
lemma pos_tangent_cone_at_mono : monotone (Œª s, pos_tangent_cone_at s a) :=
begin
  rintros s t hst y ‚ü®c, d, hd, hc, hcd‚ü©,
  exact ‚ü®c, d, mem_of_superset hd $ Œª h hn, hst hn, hc, hcd‚ü©
end
lemma mem_pos_tangent_cone_at_of_segment_subset {s : set E} {x y : E} (h : segment ‚Ñù x y ‚äÜ s) :
  y - x ‚àà pos_tangent_cone_at s x :=
begin
  let c := Œªn:‚Ñï, (2:‚Ñù)^n,
  let d := Œªn:‚Ñï, (c n)‚Åª¬π ‚Ä¢ (y-x),
  refine ‚ü®c, d, filter.univ_mem' (Œªn, h _),
    tendsto_pow_at_top_at_top_of_one_lt one_lt_two, _‚ü©,
  show x + d n ‚àà segment ‚Ñù x y,
  { rw segment_eq_image',
    refine ‚ü®(c n)‚Åª¬π, ‚ü®_, _‚ü©, rfl‚ü©,
    exacts [inv_nonneg.2 (pow_nonneg zero_le_two _),
      inv_le_one (one_le_pow_of_one_le one_le_two _)] },
  show tendsto (Œª n, c n ‚Ä¢ d n) at_top (ùìù (y - x)),
  { convert tendsto_const_nhds, ext n,
    simp only [d, smul_smul],
    rw [mul_inv_cancel, one_smul],
    exact pow_ne_zero _ two_ne_zero }
end
lemma mem_pos_tangent_cone_at_of_segment_subset' {s : set E} {x y : E}
  (h : segment ‚Ñù x (x + y) ‚äÜ s) :
  y ‚àà pos_tangent_cone_at s x :=
by simpa only [add_sub_cancel'] using mem_pos_tangent_cone_at_of_segment_subset h
lemma pos_tangent_cone_at_univ : pos_tangent_cone_at univ a = univ :=
eq_univ_of_forall $ Œª x, mem_pos_tangent_cone_at_of_segment_subset' (subset_univ _)
lemma is_local_max_on.has_fderiv_within_at_nonpos {s : set E} (h : is_local_max_on f s a)
  (hf : has_fderiv_within_at f f' s a) {y} (hy : y ‚àà pos_tangent_cone_at s a) :
  f' y ‚â§ 0 :=
begin
  rcases hy with ‚ü®c, d, hd, hc, hcd‚ü©,
  have hc' : tendsto (Œª n, ‚à•c n‚à•) at_top at_top,
    from tendsto_at_top_mono (Œª n, le_abs_self _) hc,
  refine le_of_tendsto (hf.lim at_top hd hc' hcd) _,
  replace hd : tendsto (Œª n, a + d n) at_top (ùìù[s] (a + 0)),
  from tendsto_inf.2 ‚ü®tendsto_const_nhds.add (tangent_cone_at.lim_zero _ hc' hcd),
    by rwa tendsto_principal‚ü©,
  rw [add_zero] at hd,
  replace h : ‚àÄ·∂† n in at_top, f (a + d n) ‚â§ f a, from mem_map.1 (hd h),
  replace hc : ‚àÄ·∂† n in at_top, 0 ‚â§ c n, from mem_map.1 (hc (mem_at_top (0:‚Ñù))),
  filter_upwards [h, hc],
  simp only [smul_eq_mul, mem_preimage, subset_def],
  assume n hnf hn,
  exact mul_nonpos_of_nonneg_of_nonpos hn (sub_nonpos.2 hnf)
end
lemma is_local_max_on.fderiv_within_nonpos {s : set E} (h : is_local_max_on f s a)
  {y} (hy : y ‚àà pos_tangent_cone_at s a) :
  (fderiv_within ‚Ñù f s a : E ‚Üí ‚Ñù) y ‚â§ 0 :=
if hf : differentiable_within_at ‚Ñù f s a
then h.has_fderiv_within_at_nonpos hf.has_fderiv_within_at hy
else by { rw fderiv_within_zero_of_not_differentiable_within_at hf, refl }
lemma is_local_max_on.has_fderiv_within_at_eq_zero {s : set E} (h : is_local_max_on f s a)
  (hf : has_fderiv_within_at f f' s a) {y} (hy : y ‚àà pos_tangent_cone_at s a)
  (hy' : -y ‚àà pos_tangent_cone_at s a) :
  f' y = 0 :=
le_antisymm (h.has_fderiv_within_at_nonpos hf hy) $
  by simpa using h.has_fderiv_within_at_nonpos hf hy'
lemma is_local_max_on.fderiv_within_eq_zero {s : set E} (h : is_local_max_on f s a)
  {y} (hy : y ‚àà pos_tangent_cone_at s a) (hy' : -y ‚àà pos_tangent_cone_at s a) :
  (fderiv_within ‚Ñù f s a : E ‚Üí ‚Ñù) y = 0 :=
if hf : differentiable_within_at ‚Ñù f s a
then h.has_fderiv_within_at_eq_zero hf.has_fderiv_within_at hy hy'
else by { rw fderiv_within_zero_of_not_differentiable_within_at hf, refl }
lemma is_local_min_on.has_fderiv_within_at_nonneg {s : set E} (h : is_local_min_on f s a)
  (hf : has_fderiv_within_at f f' s a) {y} (hy : y ‚àà pos_tangent_cone_at s a) :
  0 ‚â§ f' y :=
by simpa using h.neg.has_fderiv_within_at_nonpos hf.neg hy
lemma is_local_min_on.fderiv_within_nonneg {s : set E} (h : is_local_min_on f s a)
  {y} (hy : y ‚àà pos_tangent_cone_at s a) :
  (0:‚Ñù) ‚â§ (fderiv_within ‚Ñù f s a : E ‚Üí ‚Ñù) y :=
if hf : differentiable_within_at ‚Ñù f s a
then h.has_fderiv_within_at_nonneg hf.has_fderiv_within_at hy
else by { rw [fderiv_within_zero_of_not_differentiable_within_at hf], refl }
lemma is_local_min_on.has_fderiv_within_at_eq_zero {s : set E} (h : is_local_min_on f s a)
  (hf : has_fderiv_within_at f f' s a) {y} (hy : y ‚àà pos_tangent_cone_at s a)
  (hy' : -y ‚àà pos_tangent_cone_at s a) :
  f' y = 0 :=
by simpa using h.neg.has_fderiv_within_at_eq_zero hf.neg hy hy'
lemma is_local_min_on.fderiv_within_eq_zero {s : set E} (h : is_local_min_on f s a)
  {y} (hy : y ‚àà pos_tangent_cone_at s a) (hy' : -y ‚àà pos_tangent_cone_at s a) :
  (fderiv_within ‚Ñù f s a : E ‚Üí ‚Ñù) y = 0 :=
if hf : differentiable_within_at ‚Ñù f s a
then h.has_fderiv_within_at_eq_zero hf.has_fderiv_within_at hy hy'
else by { rw fderiv_within_zero_of_not_differentiable_within_at hf, refl }
lemma is_local_min.has_fderiv_at_eq_zero (h : is_local_min f a) (hf : has_fderiv_at f f' a) :
  f' = 0 :=
begin
  ext y,
  apply (h.on univ).has_fderiv_within_at_eq_zero hf.has_fderiv_within_at;
    rw pos_tangent_cone_at_univ; apply mem_univ
end
lemma is_local_min.fderiv_eq_zero (h : is_local_min f a) : fderiv ‚Ñù f a = 0 :=
if hf : differentiable_at ‚Ñù f a then h.has_fderiv_at_eq_zero hf.has_fderiv_at
else fderiv_zero_of_not_differentiable_at hf
lemma is_local_max.has_fderiv_at_eq_zero (h : is_local_max f a) (hf : has_fderiv_at f f' a) :
  f' = 0 :=
neg_eq_zero.1 $ h.neg.has_fderiv_at_eq_zero hf.neg
lemma is_local_max.fderiv_eq_zero (h : is_local_max f a) : fderiv ‚Ñù f a = 0 :=
if hf : differentiable_at ‚Ñù f a then h.has_fderiv_at_eq_zero hf.has_fderiv_at
else fderiv_zero_of_not_differentiable_at hf
lemma is_local_extr.has_fderiv_at_eq_zero (h : is_local_extr f a) :
  has_fderiv_at f f' a ‚Üí f' = 0 :=
h.elim is_local_min.has_fderiv_at_eq_zero is_local_max.has_fderiv_at_eq_zero
lemma is_local_extr.fderiv_eq_zero (h : is_local_extr f a) : fderiv ‚Ñù f a = 0 :=
h.elim is_local_min.fderiv_eq_zero is_local_max.fderiv_eq_zero
end module
section real
variables {f : ‚Ñù ‚Üí ‚Ñù} {f' : ‚Ñù} {a b : ‚Ñù}
lemma is_local_min.has_deriv_at_eq_zero (h : is_local_min f a) (hf : has_deriv_at f f' a) :
  f' = 0 :=
by simpa using continuous_linear_map.ext_iff.1
  (h.has_fderiv_at_eq_zero (has_deriv_at_iff_has_fderiv_at.1 hf)) 1
lemma is_local_min.deriv_eq_zero (h : is_local_min f a) : deriv f a = 0 :=
if hf : differentiable_at ‚Ñù f a then h.has_deriv_at_eq_zero hf.has_deriv_at
else deriv_zero_of_not_differentiable_at hf
lemma is_local_max.has_deriv_at_eq_zero (h : is_local_max f a) (hf : has_deriv_at f f' a) :
  f' = 0 :=
neg_eq_zero.1 $ h.neg.has_deriv_at_eq_zero hf.neg
lemma is_local_max.deriv_eq_zero (h : is_local_max f a) : deriv f a = 0 :=
if hf : differentiable_at ‚Ñù f a then h.has_deriv_at_eq_zero hf.has_deriv_at
else deriv_zero_of_not_differentiable_at hf
lemma is_local_extr.has_deriv_at_eq_zero (h : is_local_extr f a) :
  has_deriv_at f f' a ‚Üí f' = 0 :=
h.elim is_local_min.has_deriv_at_eq_zero is_local_max.has_deriv_at_eq_zero
lemma is_local_extr.deriv_eq_zero (h : is_local_extr f a) : deriv f a = 0 :=
h.elim is_local_min.deriv_eq_zero is_local_max.deriv_eq_zero
end real
section Rolle
variables (f f' : ‚Ñù ‚Üí ‚Ñù) {a b : ‚Ñù}
lemma exists_Ioo_extr_on_Icc (hab : a < b) (hfc : continuous_on f (Icc a b)) (hfI : f a = f b) :
  ‚àÉ c ‚àà Ioo a b, is_extr_on f (Icc a b) c :=
begin
  have ne : (Icc a b).nonempty, from nonempty_Icc.2 (le_of_lt hab),
lemma exists_local_extr_Ioo (hab : a < b) (hfc : continuous_on f (Icc a b)) (hfI : f a = f b) :
  ‚àÉ c ‚àà Ioo a b, is_local_extr f c :=
let ‚ü®c, cmem, hc‚ü© := exists_Ioo_extr_on_Icc f hab hfc hfI
in ‚ü®c, cmem, hc.is_local_extr $ Icc_mem_nhds cmem.1 cmem.2‚ü©
lemma exists_has_deriv_at_eq_zero (hab : a < b) (hfc : continuous_on f (Icc a b)) (hfI : f a = f b)
  (hff' : ‚àÄ x ‚àà Ioo a b, has_deriv_at f (f' x) x) :
  ‚àÉ c ‚àà Ioo a b, f' c = 0 :=
let ‚ü®c, cmem, hc‚ü© := exists_local_extr_Ioo f hab hfc hfI in
  ‚ü®c, cmem, hc.has_deriv_at_eq_zero $ hff' c cmem‚ü©
lemma exists_deriv_eq_zero (hab : a < b) (hfc : continuous_on f (Icc a b)) (hfI : f a = f b) :
  ‚àÉ c ‚àà Ioo a b, deriv f c = 0 :=
let ‚ü®c, cmem, hc‚ü© := exists_local_extr_Ioo f hab hfc hfI in
  ‚ü®c, cmem, hc.deriv_eq_zero‚ü©
variables {f f'} {l : ‚Ñù}
lemma exists_has_deriv_at_eq_zero' (hab : a < b)
  (hfa : tendsto f (ùìù[>] a) (ùìù l)) (hfb : tendsto f (ùìù[<] b) (ùìù l))
  (hff' : ‚àÄ x ‚àà Ioo a b, has_deriv_at f (f' x) x) :
  ‚àÉ c ‚àà Ioo a b, f' c = 0 :=
begin
  have : continuous_on f (Ioo a b) := Œª x hx, (hff' x hx).continuous_at.continuous_within_at,
  have hcont := continuous_on_Icc_extend_from_Ioo hab.ne this hfa hfb,
  obtain ‚ü®c, hc, hcextr‚ü© : ‚àÉ c ‚àà Ioo a b, is_local_extr (extend_from (Ioo a b) f) c,
  { apply exists_local_extr_Ioo _ hab hcont,
    rw eq_lim_at_right_extend_from_Ioo hab hfb,
    exact eq_lim_at_left_extend_from_Ioo hab hfa },
  use [c, hc],
  apply (hcextr.congr _).has_deriv_at_eq_zero (hff' c hc),
  rw eventually_eq_iff_exists_mem,
  exact ‚ü®Ioo a b, Ioo_mem_nhds hc.1 hc.2, extend_from_extends this‚ü©
end
lemma exists_deriv_eq_zero' (hab : a < b)
  (hfa : tendsto f (ùìù[>] a) (ùìù l)) (hfb : tendsto f (ùìù[<] b) (ùìù l)) :
  ‚àÉ c ‚àà Ioo a b, deriv f c = 0 :=
classical.by_cases
  (assume h : ‚àÄ x ‚àà Ioo a b, differentiable_at ‚Ñù f x,
    show ‚àÉ c ‚àà Ioo a b, deriv f c = 0,
      from exists_has_deriv_at_eq_zero' hab hfa hfb (Œª x hx, (h x hx).has_deriv_at))
  (assume h : ¬¨‚àÄ x ‚àà Ioo a b, differentiable_at ‚Ñù f x,
    have h : ‚àÉ x, x ‚àà Ioo a b ‚àß ¬¨differentiable_at ‚Ñù f x, by { push_neg at h, exact h },
      let ‚ü®c, hc, hcdiff‚ü© := h in ‚ü®c, hc, deriv_zero_of_not_differentiable_at hcdiff‚ü©)
end Rolle
namespace polynomial
lemma card_root_set_le_derivative {F : Type*} [field F] [algebra F ‚Ñù] (p : F[X]) :
  fintype.card (p.root_set ‚Ñù) ‚â§ fintype.card (p.derivative.root_set ‚Ñù) + 1 :=
begin
  haveI : char_zero F :=
    (ring_hom.char_zero_iff (algebra_map F ‚Ñù).injective).mpr (by apply_instance),
  by_cases hp : p = 0,
  { simp_rw [hp, derivative_zero, root_set_zero, set.empty_card', zero_le_one] },
  by_cases hp' : p.derivative = 0,
  { rw eq_C_of_nat_degree_eq_zero (nat_degree_eq_zero_of_derivative_eq_zero hp'),
    simp_rw [root_set_C, set.empty_card', zero_le] },
  simp_rw [root_set_def, finset.coe_sort_coe, fintype.card_coe],
  refine finset.card_le_of_interleaved (Œª x hx y hy hxy, _),
  rw [‚Üêfinset.mem_coe, ‚Üêroot_set_def, mem_root_set hp] at hx hy,
  obtain ‚ü®z, hz1, hz2‚ü© := exists_deriv_eq_zero (Œª x : ‚Ñù, aeval x p) hxy
    p.continuous_aeval.continuous_on (hx.trans hy.symm),
  refine ‚ü®z, _, hz1‚ü©,
  rw [‚Üêfinset.mem_coe, ‚Üêroot_set_def, mem_root_set hp', ‚Üêhz2],
  simp_rw [aeval_def, ‚Üêeval_map, polynomial.deriv, derivative_map],
end
end polynomial
