import ring_theory.witt_vector.truncated
import data.mv_polynomial.supported
noncomputable theory
namespace witt_vector
variables (p : ‚Ñï) [hp : fact p.prime]
variables {k : Type*} [comm_ring k]
local notation `ùïé` := witt_vector p
open finset mv_polynomial
open_locale big_operators
def witt_poly_prod (n : ‚Ñï) : mv_polynomial (fin 2 √ó ‚Ñï) ‚Ñ§ :=
rename (prod.mk (0 : fin 2)) (witt_polynomial p ‚Ñ§ n) *
  rename (prod.mk (1 : fin 2)) (witt_polynomial p ‚Ñ§ n)
include hp
lemma witt_poly_prod_vars (n : ‚Ñï) :
  (witt_poly_prod p n).vars ‚äÜ finset.univ.product (finset.range (n + 1)) :=
begin
  rw [witt_poly_prod],
  apply subset.trans (vars_mul _ _),
  apply union_subset;
  { apply subset.trans (vars_rename _ _),
    simp [witt_polynomial_vars,image_subset_iff] }
end
def witt_poly_prod_remainder (n : ‚Ñï) : mv_polynomial (fin 2 √ó ‚Ñï) ‚Ñ§ :=
‚àë i in range n, p^i * (witt_mul p i)^(p^(n-i))
lemma witt_poly_prod_remainder_vars (n : ‚Ñï) :
  (witt_poly_prod_remainder p n).vars ‚äÜ finset.univ.product (finset.range n) :=
begin
  rw [witt_poly_prod_remainder],
  apply subset.trans (vars_sum_subset _ _),
  rw bUnion_subset,
  intros x hx,
  apply subset.trans (vars_mul _ _),
  apply union_subset,
  { apply subset.trans (vars_pow _ _),
    have : (p : mv_polynomial (fin 2 √ó ‚Ñï) ‚Ñ§) = (C (p : ‚Ñ§)),
    { simp only [int.cast_coe_nat, ring_hom.eq_int_cast] },
    rw [this, vars_C],
    apply empty_subset },
  { apply subset.trans (vars_pow _ _),
    apply subset.trans (witt_mul_vars _ _),
    apply product_subset_product (subset.refl _),
    simp only [mem_range, range_subset] at hx ‚ä¢,
    exact hx }
end
omit hp
def remainder (n : ‚Ñï) : mv_polynomial (fin 2 √ó ‚Ñï) ‚Ñ§ :=
(‚àë (x : ‚Ñï) in
     range (n + 1),
     (rename (prod.mk 0)) ((monomial (finsupp.single x (p ^ (n + 1 - x)))) (‚Üëp ^ x))) *
  ‚àë (x : ‚Ñï) in
    range (n + 1),
    (rename (prod.mk 1)) ((monomial (finsupp.single x (p ^ (n + 1 - x)))) (‚Üëp ^ x))
include hp
lemma remainder_vars (n : ‚Ñï) : (remainder p n).vars ‚äÜ univ.product (range (n+1)) :=
begin
  rw [remainder],
  apply subset.trans (vars_mul _ _),
  apply union_subset;
  { apply subset.trans (vars_sum_subset _ _),
    rw bUnion_subset,
    intros x hx,
    rw [rename_monomial, vars_monomial, finsupp.map_domain_single],
    { apply subset.trans (finsupp.support_single_subset),
      simp [hx], },
    { apply pow_ne_zero,
      exact_mod_cast hp.out.ne_zero } }
end
def poly_of_interest (n : ‚Ñï) : mv_polynomial (fin 2 √ó ‚Ñï) ‚Ñ§ :=
witt_mul p (n + 1) + p^(n+1) * X (0, n+1) * X (1, n+1) -
  (X (0, n+1)) * rename (prod.mk (1 : fin 2)) (witt_polynomial p ‚Ñ§ (n + 1)) -
  (X (1, n+1)) * rename (prod.mk (0 : fin 2)) (witt_polynomial p ‚Ñ§ (n + 1))
lemma mul_poly_of_interest_aux1 (n : ‚Ñï) :
  (‚àë i in range (n+1), p^i * (witt_mul p i)^(p^(n-i)) : mv_polynomial (fin 2 √ó ‚Ñï) ‚Ñ§) =
    witt_poly_prod p n :=
begin
  simp only [witt_poly_prod],
  convert witt_structure_int_prop p (X (0 : fin 2) * X 1) n using 1,
  { simp only [witt_polynomial, witt_mul],
    rw alg_hom.map_sum,
    congr' 1 with i,
    congr' 1,
    have hsupp : (finsupp.single i (p ^ (n - i))).support = {i},
    { rw finsupp.support_eq_singleton,
      simp only [and_true, finsupp.single_eq_same, eq_self_iff_true, ne.def],
      exact pow_ne_zero _ hp.out.ne_zero, },
    simp only [bind‚ÇÅ_monomial, hsupp, int.cast_coe_nat, prod_singleton, ring_hom.eq_int_cast,
      finsupp.single_eq_same, C_pow, mul_eq_mul_left_iff, true_or, eq_self_iff_true], },
  { simp only [map_mul, bind‚ÇÅ_X_right] }
end
lemma mul_poly_of_interest_aux2 (n : ‚Ñï) :
  (p ^ n * witt_mul p n : mv_polynomial (fin 2 √ó ‚Ñï) ‚Ñ§) + witt_poly_prod_remainder p n =
    witt_poly_prod p n :=
begin
  convert mul_poly_of_interest_aux1 p n,
  rw [sum_range_succ, add_comm, nat.sub_self, pow_zero, pow_one],
  refl
end
omit hp
lemma mul_poly_of_interest_aux3 (n : ‚Ñï) :
  witt_poly_prod p (n+1) =
  - (p^(n+1) * X (0, n+1)) * (p^(n+1) * X (1, n+1)) +
  (p^(n+1) * X (0, n+1)) * rename (prod.mk (1 : fin 2)) (witt_polynomial p ‚Ñ§ (n + 1)) +
  (p^(n+1) * X (1, n+1)) * rename (prod.mk (0 : fin 2)) (witt_polynomial p ‚Ñ§ (n + 1)) +
  remainder p n :=
begin
lemma peval_poly_of_interest' (n : ‚Ñï) (x y : ùïé k) :
  peval (poly_of_interest p n) ![Œª i, x.coeff i, Œª i, y.coeff i] =
  (x * y).coeff (n + 1) - y.coeff (n+1) * x.coeff 0 ^ (p^(n+1))
    - x.coeff (n+1) * y.coeff 0 ^ (p^(n+1)) :=
begin
  rw peval_poly_of_interest,
  have : (p : k) = 0 := char_p.cast_eq_zero (k) p,
  simp only [this, add_zero, zero_mul, nat.succ_ne_zero, ne.def, not_false_iff, zero_pow'],
  have sum_zero_pow_mul_pow_p : ‚àÄ y : ùïé k,
    ‚àë (x : ‚Ñï) in range (n + 1 + 1), 0 ^ x * y.coeff x ^ p ^ (n + 1 - x) = y.coeff 0 ^ p ^ (n + 1),
  { intro y,
    rw finset.sum_eq_single_of_mem 0,
    { simp },
    { simp },
    { intros j _ hj,
      simp [zero_pow (zero_lt_iff.mpr hj)] } },
  congr; apply sum_zero_pow_mul_pow_p,
end
variable (k)
lemma nth_mul_coeff' (n : ‚Ñï) :
  ‚àÉ f : truncated_witt_vector p (n+1) k ‚Üí truncated_witt_vector p (n+1) k ‚Üí k, ‚àÄ (x y : ùïé k),
  f (truncate_fun (n+1) x) (truncate_fun (n+1) y)
  = (x * y).coeff (n+1) - y.coeff (n+1) * x.coeff 0 ^ (p^(n+1))
    - x.coeff (n+1) * y.coeff 0 ^ (p^(n+1)) :=
begin
  simp only [‚Üêpeval_poly_of_interest'],
  obtain ‚ü®f‚ÇÄ, hf‚ÇÄ‚ü© := exists_restrict_to_vars k (poly_of_interest_vars p n),
  let f : truncated_witt_vector p (n+1) k ‚Üí truncated_witt_vector p (n+1) k ‚Üí k,
  { intros x y,
    apply f‚ÇÄ,
    rintros ‚ü®a, ha‚ü©,
    apply function.uncurry (![x, y]),
    simp only [true_and, multiset.mem_cons, range_coe, product_val, multiset.mem_range,
       multiset.mem_product, multiset.range_succ, mem_univ_val] at ha,
    refine ‚ü®a.fst, ‚ü®a.snd, _‚ü©‚ü©,
    cases ha with ha ha; linarith only [ha] },
  use f,
  intros x y,
  dsimp [peval],
  rw ‚Üê hf‚ÇÄ,
  simp only [f, function.uncurry_apply_pair],
  congr,
  ext a,
  cases a with a ha,
  cases a with i m,
  simp only [true_and, multiset.mem_cons, range_coe, product_val, multiset.mem_range,
    multiset.mem_product, multiset.range_succ, mem_univ_val] at ha,
  have ha' : m < n + 1 := by cases ha with ha ha; linarith only [ha],
def nth_remainder (n : ‚Ñï) : (fin (n+1) ‚Üí k) ‚Üí (fin (n+1) ‚Üí k) ‚Üí k :=
classical.some (nth_mul_coeff p k n)
lemma nth_remainder_spec (n : ‚Ñï) (x y : ùïé k) :
  (x * y).coeff (n+1) =
    x.coeff (n+1) * y.coeff 0 ^ (p^(n+1)) + y.coeff (n+1) * x.coeff 0 ^ (p^(n+1)) +
    nth_remainder p n (truncate_fun (n+1) x) (truncate_fun (n+1) y) :=
classical.some_spec (nth_mul_coeff p k n) _ _
end witt_vector
