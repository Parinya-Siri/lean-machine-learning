import order.category.Lattice
universes u
open category_theory
def DistribLattice := bundled distrib_lattice
namespace DistribLattice
instance : has_coe_to_sort DistribLattice Type* := bundled.has_coe_to_sort
instance (X : DistribLattice) : distrib_lattice X := X.str
def of (α : Type*) [distrib_lattice α] : DistribLattice := bundled.of α
@[simp] lemma coe_of (α : Type*) [distrib_lattice α] : ↥(of α) = α := rfl
instance : inhabited DistribLattice := ⟨of punit⟩
instance : bundled_hom.parent_projection @distrib_lattice.to_lattice := ⟨⟩
attribute [derive [large_category, concrete_category]] DistribLattice
instance has_forget_to_Lattice : has_forget₂ DistribLattice Lattice := bundled_hom.forget₂ _ _
@[simps] def iso.mk {α β : DistribLattice.{u}} (e : α ≃o β) : α ≅ β :=
{ hom := e,
  inv := e.symm,
  hom_inv_id' := by { ext, exact e.symm_apply_apply _ },
  inv_hom_id' := by { ext, exact e.apply_symm_apply _ } }
@[simps] def dual : DistribLattice ⥤ DistribLattice :=
{ obj := λ X, of Xᵒᵈ, map := λ X Y, lattice_hom.dual }
@[simps functor inverse] def dual_equiv : DistribLattice ≌ DistribLattice :=
equivalence.mk dual dual
  (nat_iso.of_components (λ X, iso.mk $ order_iso.dual_dual X) $ λ X Y f, rfl)
  (nat_iso.of_components (λ X, iso.mk $ order_iso.dual_dual X) $ λ X Y f, rfl)
end DistribLattice
lemma DistribLattice_dual_comp_forget_to_Lattice :
  DistribLattice.dual ⋙ forget₂ DistribLattice Lattice =
    forget₂ DistribLattice Lattice ⋙ Lattice.dual := rfl
