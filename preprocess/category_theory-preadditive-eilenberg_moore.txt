import category_theory.preadditive.default
import category_theory.monad.algebra
import category_theory.preadditive.additive_functor
@[simps]
instance monad.algebra_preadditive : preadditive (monad.algebra T) :=
{ hom_group := λ F G,
  { add := λ α β,
    { f := α.f + β.f,
      h' := by simp only [functor.map_add, add_comp, monad.algebra.hom.h, comp_add] },
    zero :=
    { f := 0,
      h' := by simp only [functor.map_zero, zero_comp, comp_zero] },
    neg := λ α,
    { f := -α.f,
      h' := by simp only [functor.map_neg, neg_comp, monad.algebra.hom.h, comp_neg] },
    sub := λ α β,
    { f := α.f - β.f,
      h' := by simp only [functor.map_sub, sub_comp, monad.algebra.hom.h, comp_sub] },
    add_assoc := by { intros, ext, apply add_assoc },
    zero_add := by { intros, ext, apply zero_add },
    add_zero := by { intros, ext, apply add_zero },
    sub_eq_add_neg := by { intros, ext, apply sub_eq_add_neg },
    add_left_neg := by { intros, ext, apply add_left_neg },
    add_comm := by { intros, ext, apply add_comm } },
  add_comp' := by { intros, ext, apply add_comp },
  comp_add' := by { intros, ext, apply comp_add } }
variables (U : comonad C) [functor.additive (U : C ⥤ C)]
@[simps]
instance comonad.coalgebra_preadditive : preadditive (comonad.coalgebra U) :=
{ hom_group := λ F G,
  { add := λ α β,
    { f := α.f + β.f,
      h' := by simp only [functor.map_add, comp_add, comonad.coalgebra.hom.h, add_comp] },
    zero :=
    { f := 0,
      h' := by simp only [functor.map_zero, comp_zero, zero_comp] },
    neg := λ α,
    { f := -α.f,
      h' := by simp only [functor.map_neg, comp_neg, comonad.coalgebra.hom.h, neg_comp] },
    sub := λ α β,
    { f := α.f - β.f,
      h' := by simp only [functor.map_sub, comp_sub, comonad.coalgebra.hom.h, sub_comp] },
    add_assoc := by { intros, ext, apply add_assoc },
    zero_add := by { intros, ext, apply zero_add },
    add_zero := by { intros, ext, apply add_zero },
    sub_eq_add_neg := by { intros, ext, apply sub_eq_add_neg },
    add_left_neg := by { intros, ext, apply add_left_neg },
    add_comm := by { intros, ext, apply add_comm } },
  add_comp' := by { intros, ext, apply add_comp },
  comp_add' := by { intros, ext, apply comp_add } }
end category_theory
