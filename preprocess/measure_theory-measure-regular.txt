import measure_theory.constructions.borel_space
open set filter
open_locale ennreal topological_space nnreal big_operators
namespace measure_theory
namespace measure
def inner_regular {α} {m : measurable_space α} (μ : measure α) (p q : set α → Prop) :=
∀ ⦃U⦄, q U → ∀ r < μ U, ∃ K ⊆ U, p K ∧ r < μ K
namespace inner_regular
variables {α : Type*} {m : measurable_space α} {μ : measure α} {p q : set α → Prop}
  {U : set α} {ε : ℝ≥0∞}
lemma measure_eq_supr (H : inner_regular μ p q) (hU : q U) : μ U = ⨆ (K ⊆ U) (hK : p K), μ K :=
begin
  refine le_antisymm (le_of_forall_lt $ λ r hr, _) (supr₂_le $ λ K hK, supr_le $ λ _, μ.mono hK),
  simpa only [lt_supr_iff, exists_prop] using H hU r hr
end
lemma exists_subset_lt_add (H : inner_regular μ p q) (h0 : p ∅) (hU : q U) (hμU : μ U ≠ ∞)
  (hε : ε ≠ 0) :
  ∃ K ⊆ U, p K ∧ μ U < μ K + ε :=
begin
  cases eq_or_ne (μ U) 0 with h₀ h₀,
  { refine ⟨∅, empty_subset _, h0, _⟩,
    rwa [measure_empty, h₀, zero_add, pos_iff_ne_zero] },
  { rcases H hU _ (ennreal.sub_lt_self hμU h₀ hε) with ⟨K, hKU, hKc, hrK⟩,
    exact ⟨K, hKU, hKc, ennreal.lt_add_of_sub_lt_right (or.inl hμU) hrK⟩ }
end
lemma map {α β} [measurable_space α] [measurable_space β] {μ : measure α} {pa qa : set α → Prop}
  (H : inner_regular μ pa qa) (f : α ≃ β) (hf : ae_measurable f μ)
  {pb qb : set β → Prop} (hAB : ∀ U, qb U → qa (f ⁻¹' U)) (hAB' : ∀ K, pa K → pb (f '' K))
  (hB₁ : ∀ K, pb K → measurable_set K) (hB₂ : ∀ U, qb U → measurable_set U) :
  inner_regular (map f μ) pb qb :=
begin
  intros U hU r hr,
  rw [map_apply_of_ae_measurable hf (hB₂ _ hU)] at hr,
  rcases H (hAB U hU) r hr with ⟨K, hKU, hKc, hK⟩,
  refine ⟨f '' K, image_subset_iff.2 hKU, hAB' _ hKc, _⟩,
  rwa [map_apply_of_ae_measurable hf (hB₁ _ $ hAB' _ hKc), f.preimage_image]
end
lemma smul (H : inner_regular μ p q) (c : ℝ≥0∞) : inner_regular (c • μ) p q :=
begin
  intros U hU r hr,
  rw [smul_apply, H.measure_eq_supr hU, smul_eq_mul] at hr,
  simpa only [ennreal.mul_supr, lt_supr_iff, exists_prop] using hr
end
lemma trans {q' : set α → Prop} (H : inner_regular μ p q) (H' : inner_regular μ q q') :
  inner_regular μ p q' :=
begin
  intros U hU r hr,
  rcases H' hU r hr with ⟨F, hFU, hqF, hF⟩, rcases H hqF _ hF with ⟨K, hKF, hpK, hrK⟩,
  exact ⟨K, hKF.trans hFU, hpK, hrK⟩
end
end inner_regular
variables {α β : Type*} [measurable_space α] [topological_space α] {μ : measure α}
@[protect_proj] class outer_regular (μ : measure α) : Prop :=
(outer_regular : ∀ ⦃A : set α⦄, measurable_set A → ∀ r > μ A, ∃ U ⊇ A, is_open U ∧ μ U < r)
@[protect_proj] class regular (μ : measure α)
  extends is_finite_measure_on_compacts μ, outer_regular μ : Prop :=
(inner_regular : inner_regular μ is_compact is_open)
@[protect_proj] class weakly_regular (μ : measure α) extends outer_regular μ : Prop :=
(inner_regular : inner_regular μ is_closed is_open)
lemma _root_.set.exists_is_open_lt_of_lt [outer_regular μ] (A : set α) (r : ℝ≥0∞) (hr : μ A < r) :
  ∃ U ⊇ A, is_open U ∧ μ U < r :=
begin
  rcases outer_regular.outer_regular (measurable_set_to_measurable μ A) r
    (by rwa measure_to_measurable) with ⟨U, hAU, hUo, hU⟩,
  exact ⟨U, (subset_to_measurable _ _).trans hAU, hUo, hU⟩
end
lemma _root_.set.measure_eq_infi_is_open (A : set α) (μ : measure α) [outer_regular μ] :
  μ A = (⨅ (U : set α) (h : A ⊆ U) (h2 : is_open U), μ U) :=
begin
  refine le_antisymm (le_infi₂ $ λ s hs, le_infi $ λ h2s, μ.mono hs) _,
  refine le_of_forall_lt' (λ r hr, _),
  simpa only [infi_lt_iff, exists_prop] using A.exists_is_open_lt_of_lt r hr
end
lemma _root_.set.exists_is_open_lt_add [outer_regular μ] (A : set α) (hA : μ A ≠ ∞)
  {ε : ℝ≥0∞} (hε : ε ≠ 0) :
  ∃ U ⊇ A, is_open U ∧ μ U < μ A + ε :=
A.exists_is_open_lt_of_lt _ (ennreal.lt_add_right hA hε)
lemma _root_.set.exists_is_open_le_add (A : set α) (μ : measure α) [outer_regular μ]
  {ε : ℝ≥0∞} (hε : ε ≠ 0) :
  ∃ U ⊇ A, is_open U ∧ μ U ≤ μ A + ε :=
begin
  rcases le_or_lt ∞ (μ A) with H|H,
  { exact ⟨univ, subset_univ _, is_open_univ,
      by simp only [top_le_iff.mp H, ennreal.top_add, le_top]⟩ },
  { rcases A.exists_is_open_lt_add H.ne hε with ⟨U, AU, U_open, hU⟩,
    exact ⟨U, AU, U_open, hU.le⟩ }
end
lemma _root_.measurable_set.exists_is_open_diff_lt [outer_regular μ] {A : set α}
  (hA : measurable_set A) (hA' : μ A ≠ ∞) {ε : ℝ≥0∞} (hε : ε ≠ 0) :
  ∃ U ⊇ A, is_open U ∧ μ U < ∞ ∧ μ (U \ A) < ε :=
begin
  rcases A.exists_is_open_lt_add hA' hε with ⟨U, hAU, hUo, hU⟩,
  use [U, hAU, hUo, hU.trans_le le_top],
  exact measure_diff_lt_of_lt_add hA hAU hA' hU,
end
protected lemma map [opens_measurable_space α] [measurable_space β] [topological_space β]
  [borel_space β] (f : α ≃ₜ β) (μ : measure α) [outer_regular μ] :
  (measure.map f μ).outer_regular :=
begin
  refine ⟨λ A hA r hr, _⟩,
  rw [map_apply f.measurable hA, ← f.image_symm] at hr,
  rcases set.exists_is_open_lt_of_lt _ r hr with ⟨U, hAU, hUo, hU⟩,
  have : is_open (f.symm ⁻¹' U), from hUo.preimage f.symm.continuous,
  refine ⟨f.symm ⁻¹' U, image_subset_iff.1 hAU, this, _⟩,
  rwa [map_apply f.measurable this.measurable_set, f.preimage_symm, f.preimage_image],
end
protected lemma smul (μ : measure α) [outer_regular μ] {x : ℝ≥0∞} (hx : x ≠ ∞) :
  (x • μ).outer_regular :=
begin
  rcases eq_or_ne x 0 with rfl|h0,
  { rw zero_smul, exact outer_regular.zero },
  { refine ⟨λ A hA r hr, _⟩,
    rw [smul_apply, A.measure_eq_infi_is_open, smul_eq_mul] at hr,
    simpa only [ennreal.mul_infi_of_ne h0 hx, gt_iff_lt, infi_lt_iff, exists_prop] using hr }
end
end outer_regular
protected lemma finite_spanning_sets_in.outer_regular [opens_measurable_space α] {μ : measure α}
  (s : μ.finite_spanning_sets_in {U | is_open U ∧ outer_regular (μ.restrict U)}) :
  outer_regular μ :=
begin
  refine ⟨λ A hA r hr, _⟩,
  have hm : ∀ n, measurable_set (s.set n), from λ n, (s.set_mem n).1.measurable_set,
  haveI : ∀ n, outer_regular (μ.restrict (s.set n)) := λ n, (s.set_mem n).2,
lemma measurable_set_of_open [outer_regular μ]
  (H : inner_regular μ p is_open) (h0 : p ∅) (hd : ∀ ⦃s U⦄, p s → is_open U → p (s \ U)) :
  inner_regular μ p (λ s, measurable_set s ∧ μ s ≠ ∞) :=
begin
  rintros s ⟨hs, hμs⟩ r hr,
  obtain ⟨ε, hε, hεs, rfl⟩ : ∃ ε ≠ 0, ε + ε ≤ μ s ∧ r = μ s - (ε + ε),
  { use (μ s - r) / 2, simp [*, hr.le, ennreal.add_halves, ennreal.sub_sub_cancel, le_add_right] },
  rcases hs.exists_is_open_diff_lt hμs hε with ⟨U, hsU, hUo, hUt, hμU⟩,
  rcases (U \ s).exists_is_open_lt_of_lt _ hμU with ⟨U', hsU', hU'o, hμU'⟩,
  replace hsU' := diff_subset_comm.1 hsU',
  rcases H.exists_subset_lt_add h0 hUo hUt.ne hε with ⟨K, hKU, hKc, hKr⟩,
  refine ⟨K \ U', λ x hx, hsU' ⟨hKU hx.1, hx.2⟩, hd hKc hU'o, ennreal.sub_lt_of_lt_add hεs _⟩,
  calc μ s ≤ μ U                   : μ.mono hsU
       ... < μ K + ε               : hKr
       ... ≤ μ (K \ U') + μ U' + ε :
    add_le_add_right (tsub_le_iff_right.1 le_measure_diff) _
       ... ≤ μ (K \ U') + ε + ε    : by { mono*, exacts [hμU'.le, le_rfl] }
       ... = μ (K \ U') + (ε + ε)  : add_assoc _ _ _
end
open finset
lemma weakly_regular_of_finite [borel_space α] (μ : measure α) [is_finite_measure μ]
  (H : inner_regular μ is_closed is_open) : weakly_regular μ :=
begin
  have hfin : ∀ {s}, μ s ≠ ⊤ := measure_ne_top μ,
  suffices : ∀ s, measurable_set s → ∀ ε ≠ 0,
    ∃ (F ⊆ s) (U ⊇ s), is_closed F ∧ is_open U ∧ μ s ≤ μ F + ε ∧ μ U ≤ μ s + ε,
  { refine { outer_regular := λ s hs r hr, _, inner_regular := H },
    rcases exists_between hr with ⟨r', hsr', hr'r⟩,
    rcases this s hs _ (tsub_pos_iff_lt.2 hsr').ne' with ⟨-, -, U, hsU, -, hUo, -, H⟩,
    refine ⟨U, hsU, hUo, _⟩,
    rw [add_tsub_cancel_of_le hsr'.le] at H, exact H.trans_lt hr'r },
  refine measurable_set.induction_on_open _ _ _,
lemma of_pseudo_emetric_space {X : Type*} [pseudo_emetric_space X]
  [measurable_space X] (μ : measure X) :
  inner_regular μ is_closed is_open :=
begin
  intros U hU r hr,
  rcases hU.exists_Union_is_closed with ⟨F, F_closed, -, rfl, F_mono⟩,
  rw measure_Union_eq_supr F_mono.directed_le at hr,
  rcases lt_supr_iff.1 hr with ⟨n, hn⟩,
  exact ⟨F n, subset_Union _ _, F_closed n, hn⟩
end
lemma is_compact_is_closed {X : Type*} [topological_space X]
  [sigma_compact_space X] [measurable_space X] (μ : measure X) :
  inner_regular μ is_compact is_closed :=
begin
  intros F hF r hr,
  set B : ℕ → set X := compact_covering X,
  have hBc : ∀ n, is_compact (F ∩ B n), from λ n, (is_compact_compact_covering X n).inter_left hF,
  have hBU : (⋃ n, F ∩ B n) = F, by rw [← inter_Union, Union_compact_covering, set.inter_univ],
  have : μ F = ⨆ n, μ (F ∩ B n),
  { rw [← measure_Union_eq_supr, hBU],
    exact monotone.directed_le
      (λ m n h, inter_subset_inter_right _ (compact_covering_subset _ h)) },
  rw this at hr, rcases lt_supr_iff.1 hr with ⟨n, hn⟩,
  exact ⟨_, inter_subset_left _ _, hBc n, hn⟩
end
end inner_regular
namespace regular
instance zero : regular (0 : measure α) :=
⟨λ U hU r hr, ⟨∅, empty_subset _, is_compact_empty, hr⟩⟩
lemma _root_.is_open.exists_lt_is_compact [regular μ] ⦃U : set α⦄ (hU : is_open U)
  {r : ℝ≥0∞} (hr : r < μ U) :
  ∃ K ⊆ U, is_compact K ∧ r < μ K :=
regular.inner_regular hU r hr
lemma _root_.is_open.measure_eq_supr_is_compact ⦃U : set α⦄ (hU : is_open U)
  (μ : measure α) [regular μ] :
  μ U = (⨆ (K : set α) (h : K ⊆ U) (h2 : is_compact K), μ K) :=
regular.inner_regular.measure_eq_supr hU
lemma exists_compact_not_null [regular μ] : (∃ K, is_compact K ∧ μ K ≠ 0) ↔ μ ≠ 0 :=
by simp_rw [ne.def, ← measure_univ_eq_zero, is_open_univ.measure_eq_supr_is_compact,
    ennreal.supr_eq_zero, not_forall, exists_prop, subset_univ, true_and]
lemma inner_regular_measurable [regular μ] :
  inner_regular μ is_compact (λ s, measurable_set s ∧ μ s ≠ ∞) :=
regular.inner_regular.measurable_set_of_open is_compact_empty (λ _ _, is_compact.diff)
lemma _root_.measurable_set.exists_is_compact_lt_add
  [regular μ] ⦃A : set α⦄ (hA : measurable_set A) (h'A : μ A ≠ ∞) {ε : ℝ≥0∞} (hε : ε ≠ 0) :
  ∃ K ⊆ A, is_compact K ∧ μ A < μ K + ε :=
regular.inner_regular_measurable.exists_subset_lt_add is_compact_empty ⟨hA, h'A⟩ h'A hε
lemma _root_.measurable_set.exists_is_compact_diff_lt [opens_measurable_space α] [t2_space α]
  [regular μ] ⦃A : set α⦄ (hA : measurable_set A) (h'A : μ A ≠ ∞) {ε : ℝ≥0∞} (hε : ε ≠ 0) :
  ∃ K ⊆ A, is_compact K ∧ μ (A \ K) < ε :=
begin
  rcases hA.exists_is_compact_lt_add h'A hε with ⟨K, hKA, hKc, hK⟩,
  exact ⟨K, hKA, hKc, measure_diff_lt_of_lt_add hKc.measurable_set hKA
    (ne_top_of_le_ne_top h'A $ measure_mono hKA) hK⟩
end
lemma _root_.measurable_set.exists_lt_is_compact_of_ne_top [regular μ] ⦃A : set α⦄
  (hA : measurable_set A) (h'A : μ A ≠ ∞) {r : ℝ≥0∞} (hr : r < μ A) :
  ∃ K ⊆ A, is_compact K ∧ r < μ K :=
regular.inner_regular_measurable ⟨hA, h'A⟩ _ hr
lemma _root_.measurable_set.measure_eq_supr_is_compact_of_ne_top [regular μ]
  ⦃A : set α⦄ (hA : measurable_set A) (h'A : μ A ≠ ∞) :
  μ A = (⨆ (K ⊆ A) (h : is_compact K), μ K) :=
regular.inner_regular_measurable.measure_eq_supr ⟨hA, h'A⟩
protected lemma map [opens_measurable_space α] [measurable_space β] [topological_space β]
  [t2_space β] [borel_space β] [regular μ] (f : α ≃ₜ β) :
  (measure.map f μ).regular :=
begin
  haveI := outer_regular.map f μ,
  haveI := is_finite_measure_on_compacts.map μ f,
  exact ⟨regular.inner_regular.map f.to_equiv f.measurable.ae_measurable
    (λ U hU, hU.preimage f.continuous) (λ K hK, hK.image f.continuous)
    (λ K hK, hK.measurable_set) (λ U hU, hU.measurable_set)⟩
end
protected lemma smul [regular μ] {x : ℝ≥0∞} (hx : x ≠ ∞) :
  (x • μ).regular :=
begin
  haveI := outer_regular.smul μ hx,
  haveI := is_finite_measure_on_compacts.smul μ hx,
  exact ⟨regular.inner_regular.smul x⟩
end
lemma _root_.is_open.exists_lt_is_closed [weakly_regular μ] ⦃U : set α⦄ (hU : is_open U)
  {r : ℝ≥0∞} (hr : r < μ U) :
  ∃ F ⊆ U, is_closed F ∧ r < μ F :=
weakly_regular.inner_regular hU r hr
lemma _root_.is_open.measure_eq_supr_is_closed ⦃U : set α⦄ (hU : is_open U)
  (μ : measure α) [weakly_regular μ] :
  μ U = (⨆ (F ⊆ U) (h : is_closed F), μ F) :=
weakly_regular.inner_regular.measure_eq_supr hU
lemma inner_regular_measurable [weakly_regular μ] :
  inner_regular μ is_closed (λ s, measurable_set s ∧ μ s ≠ ∞) :=
weakly_regular.inner_regular.measurable_set_of_open is_closed_empty
  (λ _ _ h₁ h₂, h₁.inter h₂.is_closed_compl)
lemma _root_.measurable_set.exists_is_closed_lt_add [weakly_regular μ] {s : set α}
  (hs : measurable_set s) (hμs : μ s ≠ ∞) {ε : ℝ≥0∞} (hε : ε ≠ 0) :
  ∃ K ⊆ s, is_closed K ∧ μ s < μ K + ε :=
inner_regular_measurable.exists_subset_lt_add is_closed_empty ⟨hs, hμs⟩ hμs hε
lemma _root_.measurable_set.exists_is_closed_diff_lt [opens_measurable_space α]
  [weakly_regular μ] ⦃A : set α⦄ (hA : measurable_set A) (h'A : μ A ≠ ∞) {ε : ℝ≥0∞} (hε : ε ≠ 0) :
  ∃ F ⊆ A, is_closed F ∧ μ (A \ F) < ε :=
begin
  rcases hA.exists_is_closed_lt_add h'A hε with ⟨F, hFA, hFc, hF⟩,
  exact ⟨F, hFA, hFc, measure_diff_lt_of_lt_add hFc.measurable_set hFA
    (ne_top_of_le_ne_top h'A $ measure_mono hFA) hF⟩
end
lemma _root_.measurable_set.exists_lt_is_closed_of_ne_top [weakly_regular μ]
  ⦃A : set α⦄ (hA : measurable_set A) (h'A : μ A ≠ ∞) {r : ℝ≥0∞} (hr : r < μ A) :
  ∃ K ⊆ A, is_closed K ∧ r < μ K :=
inner_regular_measurable ⟨hA, h'A⟩ _ hr
lemma _root_.measurable_set.measure_eq_supr_is_closed_of_ne_top [weakly_regular μ] ⦃A : set α⦄
  (hA : measurable_set A) (h'A : μ A ≠ ∞) :
  μ A = (⨆ (K ⊆ A) (h : is_closed K), μ K) :=
inner_regular_measurable.measure_eq_supr ⟨hA, h'A⟩
lemma restrict_of_measurable_set [borel_space α] [weakly_regular μ] (A : set α)
  (hA : measurable_set A) (h'A : μ A ≠ ∞) : weakly_regular (μ.restrict A) :=
begin
  haveI : fact (μ A < ∞) := ⟨h'A.lt_top⟩,
  refine inner_regular.weakly_regular_of_finite _ (λ V V_open, _),
  simp only [restrict_apply' hA], intros r hr,
  have : μ (V ∩ A) ≠ ∞, from ne_top_of_le_ne_top h'A (measure_mono $ inter_subset_right _ _),
  rcases (V_open.measurable_set.inter hA).exists_lt_is_closed_of_ne_top this hr
    with ⟨F, hFVA, hFc, hF⟩,
  refine ⟨F, hFVA.trans (inter_subset_left _ _), hFc, _⟩,
  rwa inter_eq_self_of_subset_left (hFVA.trans $ inter_subset_right _ _)
end
