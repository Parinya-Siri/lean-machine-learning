import data.int.basic
import category_theory.shift
noncomputable theory
open category_theory
open category_theory.limits
universes v v‚ÇÄ v‚ÇÅ v‚ÇÇ u u‚ÇÄ u‚ÇÅ u‚ÇÇ
namespace category_theory.triangulated
open category_theory.category
variables (C : Type u) [category.{v} C] [has_shift C ‚Ñ§]
structure triangle := mk' ::
(obj‚ÇÅ : C)
(obj‚ÇÇ : C)
(obj‚ÇÉ : C)
(mor‚ÇÅ : obj‚ÇÅ ‚ü∂ obj‚ÇÇ)
(mor‚ÇÇ : obj‚ÇÇ ‚ü∂ obj‚ÇÉ)
(mor‚ÇÉ : obj‚ÇÉ ‚ü∂ obj‚ÇÅ‚ü¶(1:‚Ñ§)‚üß)
@[simps]
def triangle.mk {X Y Z : C} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) (h : Z ‚ü∂ X‚ü¶(1:‚Ñ§)‚üß) : triangle C :=
{ obj‚ÇÅ := X,
  obj‚ÇÇ := Y,
  obj‚ÇÉ := Z,
  mor‚ÇÅ := f,
  mor‚ÇÇ := g,
  mor‚ÇÉ := h }
section
variables [has_zero_object C] [has_zero_morphisms C]
open_locale zero_object
instance : inhabited (triangle C) :=
‚ü®‚ü®0,0,0,0,0,0‚ü©‚ü©
@[simps]
def contractible_triangle (X : C) : triangle C := triangle.mk C (ùüô X) (0 : X ‚ü∂ 0) 0
end
variable {C}
@[ext]
structure triangle_morphism (T‚ÇÅ : triangle C) (T‚ÇÇ : triangle C) :=
(hom‚ÇÅ : T‚ÇÅ.obj‚ÇÅ ‚ü∂ T‚ÇÇ.obj‚ÇÅ)
(hom‚ÇÇ : T‚ÇÅ.obj‚ÇÇ ‚ü∂ T‚ÇÇ.obj‚ÇÇ)
(hom‚ÇÉ : T‚ÇÅ.obj‚ÇÉ ‚ü∂ T‚ÇÇ.obj‚ÇÉ)
(comm‚ÇÅ' : T‚ÇÅ.mor‚ÇÅ ‚â´ hom‚ÇÇ = hom‚ÇÅ ‚â´ T‚ÇÇ.mor‚ÇÅ . obviously)
(comm‚ÇÇ' : T‚ÇÅ.mor‚ÇÇ ‚â´ hom‚ÇÉ = hom‚ÇÇ ‚â´ T‚ÇÇ.mor‚ÇÇ . obviously)
(comm‚ÇÉ' : T‚ÇÅ.mor‚ÇÉ ‚â´ hom‚ÇÅ‚ü¶1‚üß' = hom‚ÇÉ ‚â´ T‚ÇÇ.mor‚ÇÉ . obviously)
restate_axiom triangle_morphism.comm‚ÇÅ'
restate_axiom triangle_morphism.comm‚ÇÇ'
restate_axiom triangle_morphism.comm‚ÇÉ'
attribute [simp, reassoc] triangle_morphism.comm‚ÇÅ triangle_morphism.comm‚ÇÇ triangle_morphism.comm‚ÇÉ
@[simps]
def triangle_morphism_id (T : triangle C) : triangle_morphism T T :=
{ hom‚ÇÅ := ùüô T.obj‚ÇÅ,
  hom‚ÇÇ := ùüô T.obj‚ÇÇ,
  hom‚ÇÉ := ùüô T.obj‚ÇÉ }
instance (T : triangle C) : inhabited (triangle_morphism T T) := ‚ü®triangle_morphism_id T‚ü©
variables {T‚ÇÅ T‚ÇÇ T‚ÇÉ : triangle C}
@[simps]
def triangle_morphism.comp (f : triangle_morphism T‚ÇÅ T‚ÇÇ) (g : triangle_morphism T‚ÇÇ T‚ÇÉ) :
  triangle_morphism T‚ÇÅ T‚ÇÉ :=
{ hom‚ÇÅ := f.hom‚ÇÅ ‚â´ g.hom‚ÇÅ,
  hom‚ÇÇ := f.hom‚ÇÇ ‚â´ g.hom‚ÇÇ,
  hom‚ÇÉ := f.hom‚ÇÉ ‚â´ g.hom‚ÇÉ }
@[simps]
instance triangle_category : category (triangle C) :=
{ hom   := Œª A B, triangle_morphism A B,
  id    := Œª A, triangle_morphism_id A,
  comp  := Œª A B C f g, f.comp g }
end category_theory.triangulated
