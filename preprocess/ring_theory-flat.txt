import ring_theory.noetherian
universes u v
namespace module
open function (injective)
open linear_map (lsmul)
open_locale tensor_product
class flat (R : Type u) (M : Type v) [comm_ring R] [add_comm_group M] [module R M] : Prop :=
(out : ∀ ⦃I : ideal R⦄ (hI : I.fg), injective (tensor_product.lift ((lsmul R M).comp I.subtype)))
namespace flat
open tensor_product linear_map _root_.submodule
instance self (R : Type u) [comm_ring R] : flat R R :=
⟨begin
  intros I hI,
  rw ← equiv.injective_comp (tensor_product.rid R I).symm.to_equiv,
  convert subtype.coe_injective using 1,
  ext x,
  simp only [function.comp_app, linear_equiv.coe_to_equiv, rid_symm_apply, comp_apply,
    mul_one, lift.tmul, subtype_apply, algebra.id.smul_eq_mul, lsmul_apply]
end⟩
end flat
end module
