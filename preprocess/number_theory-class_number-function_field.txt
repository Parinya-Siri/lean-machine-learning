import number_theory.class_number.admissible_card_pow_degree
import number_theory.class_number.finite
import number_theory.function_field
namespace function_field
open_locale polynomial
variables (Fq F : Type) [field Fq] [fintype Fq] [field F]
variables [algebra Fq[X] F] [algebra (ratfunc Fq) F]
variables [is_scalar_tower Fq[X] (ratfunc Fq) F]
variables [function_field Fq F] [is_separable (ratfunc Fq) F]
open_locale classical
namespace ring_of_integers
open function_field
noncomputable instance  : fintype (class_group (ring_of_integers Fq F) F) :=
class_group.fintype_of_admissible_of_finite (ratfunc Fq) F
  (polynomial.card_pow_degree_is_admissible : absolute_value.is_admissible
    (polynomial.card_pow_degree : absolute_value Fq[X] ℤ))
end ring_of_integers
noncomputable def class_number : ℕ := fintype.card (class_group (ring_of_integers Fq F) F)
theorem class_number_eq_one_iff :
  class_number Fq F = 1 ↔ is_principal_ideal_ring (ring_of_integers Fq F) :=
card_class_group_eq_one_iff
end function_field
