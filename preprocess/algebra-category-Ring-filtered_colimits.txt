import algebra.category.Ring.basic
import algebra.category.Group.filtered_colimits
universes v u
noncomputable theory
open_locale classical
open category_theory
open category_theory.limits
abbreviation R : Mon := Mon.filtered_colimits.colimit (F ‚ãô forget‚ÇÇ SemiRing Mon.{max v u})
instance colimit_semiring : semiring R :=
{ mul_zero := Œª x, begin
    apply quot.induction_on x, clear x, intro x,
    cases x with j x,
    erw [colimit_zero_eq _ j, colimit_mul_mk_eq _ ‚ü®j, _‚ü© ‚ü®j, _‚ü© j (ùüô j) (ùüô j)],
    rw [category_theory.functor.map_id, id_apply, id_apply, mul_zero x],
    refl,
  end,
  zero_mul := Œª x, begin
    apply quot.induction_on x, clear x, intro x,
    cases x with j x,
    erw [colimit_zero_eq _ j, colimit_mul_mk_eq _ ‚ü®j, _‚ü© ‚ü®j, _‚ü© j (ùüô j) (ùüô j)],
    rw [category_theory.functor.map_id, id_apply, id_apply, zero_mul x],
    refl,
  end,
  left_distrib := Œª x y z, begin
    apply quot.induction_on‚ÇÉ x y z, clear x y z, intros x y z,
    cases x with j‚ÇÅ x, cases y with j‚ÇÇ y, cases z with j‚ÇÉ z,
    let k := max‚ÇÉ j‚ÇÅ j‚ÇÇ j‚ÇÉ,
    let f := first_to_max‚ÇÉ j‚ÇÅ j‚ÇÇ j‚ÇÉ,
    let g := second_to_max‚ÇÉ j‚ÇÅ j‚ÇÇ j‚ÇÉ,
    let h := third_to_max‚ÇÉ j‚ÇÅ j‚ÇÇ j‚ÇÉ,
    erw [colimit_add_mk_eq _ ‚ü®j‚ÇÇ, _‚ü© ‚ü®j‚ÇÉ, _‚ü© k g h, colimit_mul_mk_eq _ ‚ü®j‚ÇÅ, _‚ü© ‚ü®k, _‚ü© k f (ùüô k),
      colimit_mul_mk_eq _ ‚ü®j‚ÇÅ, _‚ü© ‚ü®j‚ÇÇ, _‚ü© k f g, colimit_mul_mk_eq _ ‚ü®j‚ÇÅ, _‚ü© ‚ü®j‚ÇÉ, _‚ü© k f h,
      colimit_add_mk_eq _ ‚ü®k, _‚ü© ‚ü®k, _‚ü© k (ùüô k) (ùüô k)],
    simp only [category_theory.functor.map_id, id_apply],
    erw left_distrib (F.map f x) (F.map g y) (F.map h z),
    refl,
  end,
  right_distrib := Œª x y z, begin
    apply quot.induction_on‚ÇÉ x y z, clear x y z, intros x y z,
    cases x with j‚ÇÅ x, cases y with j‚ÇÇ y, cases z with j‚ÇÉ z,
    let k := max‚ÇÉ j‚ÇÅ j‚ÇÇ j‚ÇÉ,
    let f := first_to_max‚ÇÉ j‚ÇÅ j‚ÇÇ j‚ÇÉ,
    let g := second_to_max‚ÇÉ j‚ÇÅ j‚ÇÇ j‚ÇÉ,
    let h := third_to_max‚ÇÉ j‚ÇÅ j‚ÇÇ j‚ÇÉ,
    erw [colimit_add_mk_eq _ ‚ü®j‚ÇÅ, _‚ü© ‚ü®j‚ÇÇ, _‚ü© k f g, colimit_mul_mk_eq _ ‚ü®k, _‚ü© ‚ü®j‚ÇÉ, _‚ü© k (ùüô k) h,
      colimit_mul_mk_eq _ ‚ü®j‚ÇÅ, _‚ü© ‚ü®j‚ÇÉ, _‚ü© k f h, colimit_mul_mk_eq _ ‚ü®j‚ÇÇ, _‚ü© ‚ü®j‚ÇÉ, _‚ü© k g h,
      colimit_add_mk_eq _ ‚ü®k, _‚ü© ‚ü®k, _‚ü© k (ùüô k) (ùüô k)],
    simp only [category_theory.functor.map_id, id_apply],
    erw right_distrib (F.map f x) (F.map g y) (F.map h z),
    refl,
  end,
  ..R.monoid,
  ..AddCommMon.filtered_colimits.colimit_add_comm_monoid
    (F ‚ãô forget‚ÇÇ SemiRing AddCommMon.{max v u}) }
def colimit : SemiRing := SemiRing.of R
def colimit_cocone : cocone F :=
{ X := colimit,
  Œπ :=
  { app := Œª j,
    { ..(Mon.filtered_colimits.colimit_cocone (F ‚ãô forget‚ÇÇ SemiRing Mon.{max v u})).Œπ.app j,
      ..(AddCommMon.filtered_colimits.colimit_cocone
        (F ‚ãô forget‚ÇÇ SemiRing AddCommMon.{max v u})).Œπ.app j },
    naturality' := Œª j j' f,
      (ring_hom.coe_inj ((types.colimit_cocone (F ‚ãô forget SemiRing)).Œπ.naturality f)) } }
def colimit_cocone_is_colimit : is_colimit colimit_cocone :=
{ desc := Œª t,
  { .. (Mon.filtered_colimits.colimit_cocone_is_colimit
    (F ‚ãô forget‚ÇÇ SemiRing Mon.{max v u})).desc ((forget‚ÇÇ SemiRing Mon.{max v u}).map_cocone t),
    .. (AddCommMon.filtered_colimits.colimit_cocone_is_colimit
    (F ‚ãô forget‚ÇÇ SemiRing AddCommMon.{max v u})).desc
      ((forget‚ÇÇ SemiRing AddCommMon.{max v u}).map_cocone t), },
  fac' := Œª t j, ring_hom.coe_inj $
  (types.colimit_cocone_is_colimit (F ‚ãô forget SemiRing)).fac ((forget SemiRing).map_cocone t) j,
  uniq' := Œª t m h, ring_hom.coe_inj $
  (types.colimit_cocone_is_colimit (F ‚ãô forget SemiRing)).uniq ((forget SemiRing).map_cocone t) m
    (Œª j, funext $ Œª x, ring_hom.congr_fun (h j) x) }
instance forget‚ÇÇ_Mon_preserves_filtered_colimits :
  preserves_filtered_colimits (forget‚ÇÇ SemiRing Mon.{u}) :=
{ preserves_filtered_colimits := Œª J _ _, by exactI
  { preserves_colimit := Œª F, preserves_colimit_of_preserves_colimit_cocone
      (colimit_cocone_is_colimit.{u u} F)
      (Mon.filtered_colimits.colimit_cocone_is_colimit (F ‚ãô forget‚ÇÇ SemiRing Mon.{u})) } }
instance forget_preserves_filtered_colimits :
  preserves_filtered_colimits (forget SemiRing.{u}) :=
limits.comp_preserves_filtered_colimits (forget‚ÇÇ SemiRing Mon) (forget Mon.{u})
end
end SemiRing.filtered_colimits
namespace CommSemiRing.filtered_colimits
section
abbreviation R : SemiRing :=
SemiRing.filtered_colimits.colimit (F ‚ãô forget‚ÇÇ CommSemiRing SemiRing.{max v u})
instance colimit_comm_semiring : comm_semiring R :=
{ ..R.semiring,
  ..CommMon.filtered_colimits.colimit_comm_monoid (F ‚ãô forget‚ÇÇ CommSemiRing CommMon.{max v u}) }
def colimit : CommSemiRing := CommSemiRing.of R
def colimit_cocone : cocone F :=
{ X := colimit,
  Œπ :=
  { ..(SemiRing.filtered_colimits.colimit_cocone
      (F ‚ãô forget‚ÇÇ CommSemiRing SemiRing.{max v u})).Œπ } }
def colimit_cocone_is_colimit : is_colimit colimit_cocone :=
{ desc := Œª t,
  (SemiRing.filtered_colimits.colimit_cocone_is_colimit
    (F ‚ãô forget‚ÇÇ CommSemiRing SemiRing.{max v u})).desc
    ((forget‚ÇÇ CommSemiRing SemiRing).map_cocone t),
  fac' := Œª t j, ring_hom.coe_inj $
  (types.colimit_cocone_is_colimit (F ‚ãô forget CommSemiRing)).fac
    ((forget CommSemiRing).map_cocone t) j,
  uniq' := Œª t m h, ring_hom.coe_inj $
  (types.colimit_cocone_is_colimit (F ‚ãô forget CommSemiRing)).uniq
    ((forget CommSemiRing).map_cocone t) m (Œª j, funext $ Œª x, ring_hom.congr_fun (h j) x) }
instance forget‚ÇÇ_SemiRing_preserves_filtered_colimits :
  preserves_filtered_colimits (forget‚ÇÇ CommSemiRing SemiRing.{u}) :=
{ preserves_filtered_colimits := Œª J _ _, by exactI
  { preserves_colimit := Œª F, preserves_colimit_of_preserves_colimit_cocone
      (colimit_cocone_is_colimit.{u u} F)
      (SemiRing.filtered_colimits.colimit_cocone_is_colimit
        (F ‚ãô forget‚ÇÇ CommSemiRing SemiRing.{u})) } }
instance forget_preserves_filtered_colimits :
  preserves_filtered_colimits (forget CommSemiRing.{u}) :=
limits.comp_preserves_filtered_colimits (forget‚ÇÇ CommSemiRing SemiRing) (forget SemiRing.{u})
end
end CommSemiRing.filtered_colimits
namespace Ring.filtered_colimits
section
abbreviation R : SemiRing :=
SemiRing.filtered_colimits.colimit (F ‚ãô forget‚ÇÇ Ring SemiRing.{max v u})
instance colimit_ring : ring R :=
{ ..R.semiring,
  ..AddCommGroup.filtered_colimits.colimit_add_comm_group
    (F ‚ãô forget‚ÇÇ Ring AddCommGroup.{max v u}) }
def colimit : Ring := Ring.of R
def colimit_cocone : cocone F :=
{ X := colimit,
  Œπ := { ..(SemiRing.filtered_colimits.colimit_cocone (F ‚ãô forget‚ÇÇ Ring SemiRing.{max v u})).Œπ } }
def colimit_cocone_is_colimit : is_colimit colimit_cocone :=
{ desc := Œª t,
  (SemiRing.filtered_colimits.colimit_cocone_is_colimit (F ‚ãô forget‚ÇÇ Ring SemiRing.{max v u})).desc
    ((forget‚ÇÇ Ring SemiRing).map_cocone t),
  fac' := Œª t j, ring_hom.coe_inj $
  (types.colimit_cocone_is_colimit (F ‚ãô forget Ring)).fac ((forget Ring).map_cocone t) j,
  uniq' := Œª t m h, ring_hom.coe_inj $
  (types.colimit_cocone_is_colimit (F ‚ãô forget Ring)).uniq
    ((forget Ring).map_cocone t) m (Œª j, funext $ Œª x, ring_hom.congr_fun (h j) x) }
instance forget‚ÇÇ_SemiRing_preserves_filtered_colimits :
  preserves_filtered_colimits (forget‚ÇÇ Ring SemiRing.{u}) :=
{ preserves_filtered_colimits := Œª J _ _, by exactI
  { preserves_colimit := Œª F, preserves_colimit_of_preserves_colimit_cocone
      (colimit_cocone_is_colimit.{u u} F)
      (SemiRing.filtered_colimits.colimit_cocone_is_colimit
        (F ‚ãô forget‚ÇÇ Ring SemiRing.{u})) } }
instance forget_preserves_filtered_colimits :
  preserves_filtered_colimits (forget Ring.{u}) :=
limits.comp_preserves_filtered_colimits (forget‚ÇÇ Ring SemiRing) (forget SemiRing.{u})
end
end Ring.filtered_colimits
namespace CommRing.filtered_colimits
section
abbreviation R : Ring :=
Ring.filtered_colimits.colimit (F ‚ãô forget‚ÇÇ CommRing Ring.{max v u})
instance colimit_comm_ring : comm_ring R :=
{ ..R.ring,
  ..CommSemiRing.filtered_colimits.colimit_comm_semiring
    (F ‚ãô forget‚ÇÇ CommRing CommSemiRing.{max v u}) }
def colimit : CommRing := CommRing.of R
def colimit_cocone : cocone F :=
{ X := colimit,
  Œπ := { ..(Ring.filtered_colimits.colimit_cocone (F ‚ãô forget‚ÇÇ CommRing Ring.{max v u})).Œπ } }
def colimit_cocone_is_colimit : is_colimit colimit_cocone :=
{ desc := Œª t,
  (Ring.filtered_colimits.colimit_cocone_is_colimit (F ‚ãô forget‚ÇÇ CommRing Ring.{max v u})).desc
    ((forget‚ÇÇ CommRing Ring).map_cocone t),
  fac' := Œª t j, ring_hom.coe_inj $
  (types.colimit_cocone_is_colimit (F ‚ãô forget CommRing)).fac ((forget CommRing).map_cocone t) j,
  uniq' := Œª t m h, ring_hom.coe_inj $
  (types.colimit_cocone_is_colimit (F ‚ãô forget CommRing)).uniq
    ((forget CommRing).map_cocone t) m (Œª j, funext $ Œª x, ring_hom.congr_fun (h j) x) }
instance forget‚ÇÇ_Ring_preserves_filtered_colimits :
  preserves_filtered_colimits (forget‚ÇÇ CommRing Ring.{u}) :=
{ preserves_filtered_colimits := Œª J _ _, by exactI
  { preserves_colimit := Œª F, preserves_colimit_of_preserves_colimit_cocone
      (colimit_cocone_is_colimit.{u u} F)
      (Ring.filtered_colimits.colimit_cocone_is_colimit (F ‚ãô forget‚ÇÇ CommRing Ring.{u})) } }
instance forget_preserves_filtered_colimits :
  preserves_filtered_colimits (forget CommRing.{u}) :=
limits.comp_preserves_filtered_colimits (forget‚ÇÇ CommRing Ring) (forget Ring.{u})
end
end CommRing.filtered_colimits
