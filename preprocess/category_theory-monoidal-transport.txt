import category_theory.monoidal.natural_transformation
universes v₁ v₂ u₁ u₂
noncomputable theory
open category_theory
open category_theory.category
open category_theory.monoidal_category
namespace category_theory.monoidal
variables {C : Type u₁} [category.{v₁} C] [monoidal_category.{v₁} C]
variables {D : Type u₂} [category.{v₂} D]
@[derive category, nolint unused_arguments]
def transported (e : C ≌ D) := D
instance (e : C ≌ D) : monoidal_category (transported e) := transport e
instance (e : C ≌ D) : inhabited (transported e) := ⟨𝟙_ _⟩
section
local attribute [simp] transport_tensor_unit
section
local attribute [simp] transport_tensor_hom transport_associator
  transport_left_unitor transport_right_unitor
@[simps]
def lax_to_transported (e : C ≌ D) : lax_monoidal_functor C (transported e) :=
{ to_functor := e.functor,
  ε := 𝟙 (e.functor.obj (𝟙_ C)),
  μ := λ X Y, e.functor.map (e.unit_inv.app X ⊗ e.unit_inv.app Y),
  μ_natural' := λ X Y X' Y' f g,
  begin
    dsimp,
    simp only [equivalence.inv_fun_map, functor.map_comp, tensor_comp, category.assoc],
    simp only [←e.functor.map_comp],
    congr' 1,
    rw [←tensor_comp, iso.hom_inv_id_app, iso.hom_inv_id_app, ←tensor_comp],
    dsimp,
    rw [comp_id, comp_id],
  end,
  associativity' := λ X Y Z,
  begin
    dsimp,
    simp only [comp_tensor_id, assoc, equivalence.inv_fun_map, functor.map_comp, id_tensor_comp,
      e.inverse.map_id],
    simp only [←e.functor.map_comp],
    congr' 2,
    slice_lhs 3 3 { rw [←tensor_id_comp_id_tensor], },
    slice_lhs 2 3 { rw [←comp_tensor_id, iso.hom_inv_id_app], dsimp, rw [tensor_id] },
    simp only [id_comp],
    slice_rhs 2 3 { rw [←id_tensor_comp, iso.hom_inv_id_app], dsimp, rw [tensor_id] },
    simp only [id_comp],
    conv_rhs { rw [←id_tensor_comp_tensor_id _ (e.unit_inv.app X)], },
    dsimp only [functor.comp_obj],
    slice_rhs 3 4 { rw [←id_tensor_comp, iso.hom_inv_id_app], dsimp, rw [tensor_id] },
    simp only [associator_conjugation, ←tensor_id, ←tensor_comp, iso.inv_hom_id,
      iso.inv_hom_id_assoc, category.assoc, category.id_comp, category.comp_id],
  end,
  left_unitality' := λ X,
  begin
    dsimp,
    simp only [tensor_id, assoc, id_comp, functor.map_comp, e.inverse.map_id],
    rw equivalence.counit_app_functor,
    simp only [←e.functor.map_comp],
    congr' 1,
    simp only [←left_unitor_naturality, id_comp, ←tensor_comp_assoc, comp_id],
  end,
  right_unitality' := λ X,
  begin
    dsimp,
    simp only [tensor_id, assoc, id_comp, functor.map_comp, e.inverse.map_id],
    rw equivalence.counit_app_functor,
    simp only [←e.functor.map_comp],
    congr' 1,
    simp only [←right_unitor_naturality, id_comp, ←tensor_comp_assoc, comp_id],
  end, }.
end
@[simps]
def to_transported (e : C ≌ D) : monoidal_functor C (transported e) :=
{ to_lax_monoidal_functor := lax_to_transported e,
  ε_is_iso := by { dsimp, apply_instance, },
  μ_is_iso := λ X Y, by { dsimp, apply_instance, }, }
end
instance (e : C ≌ D) : is_equivalence (to_transported e).to_functor :=
by { dsimp, apply_instance, }
@[simps]
def from_transported (e : C ≌ D) : monoidal_functor (transported e) C :=
monoidal_inverse (to_transported e)
@[simps]
def transported_monoidal_unit_iso (e : C ≌ D) :
  lax_monoidal_functor.id C ≅
    lax_to_transported e ⊗⋙ (from_transported e).to_lax_monoidal_functor :=
as_iso (monoidal_unit (to_transported e))
@[simps]
def transported_monoidal_counit_iso (e : C ≌ D) :
  (from_transported e).to_lax_monoidal_functor ⊗⋙ lax_to_transported e ≅
    lax_monoidal_functor.id (transported e) :=
as_iso (monoidal_counit (to_transported e))
end category_theory.monoidal
