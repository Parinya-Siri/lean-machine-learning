import algebra.smul_with_zero
import algebra.regular.basic
variables {R S : Type*} (M : Type*) {a b : R} {s : S}
def is_smul_regular [has_smul R M] (c : R) := function.injective ((•) c : M → M)
lemma is_left_regular.is_smul_regular [has_mul R] {c : R} (h : is_left_regular c) :
  is_smul_regular R c := h
lemma is_left_regular_iff [has_mul R] {a : R} :
  is_left_regular a ↔ is_smul_regular R a := iff.rfl
lemma is_right_regular.is_smul_regular [has_mul R] {c : R} (h : is_right_regular c) :
  is_smul_regular R (mul_opposite.op c) := h
lemma is_right_regular_iff [has_mul R] {a : R} :
  is_right_regular a ↔ is_smul_regular R (mul_opposite.op a) := iff.rfl
namespace is_smul_regular
variables {M}
section has_smul
variables [has_smul R M] [has_smul R S] [has_smul S M] [is_scalar_tower R S M]
lemma smul (ra : is_smul_regular M a) (rs : is_smul_regular M s) :
  is_smul_regular M (a • s) :=
λ a b ab, rs (ra ((smul_assoc _ _ _).symm.trans (ab.trans (smul_assoc _ _ _))))
lemma of_smul (a : R) (ab : is_smul_regular M (a • s)) :
  is_smul_regular M s :=
@function.injective.of_comp _ _ _ (λ m : M, a • m) _ (λ c d cd, ab
  (by rwa [smul_assoc, smul_assoc]))
@[simp] lemma smul_iff (b : S) (ha : is_smul_regular M a) :
  is_smul_regular M (a • b) ↔ is_smul_regular M b :=
⟨of_smul _, ha.smul⟩
lemma is_left_regular [has_mul R] {a : R} (h : is_smul_regular R a) :
  is_left_regular a := h
lemma is_right_regular [has_mul R] {a : R} (h : is_smul_regular R (mul_opposite.op a)) :
  is_right_regular a := h
lemma mul [has_mul R] [is_scalar_tower R R M]
  (ra : is_smul_regular M a) (rb : is_smul_regular M b) : is_smul_regular M (a * b) :=
ra.smul rb
lemma of_mul [has_mul R] [is_scalar_tower R R M] (ab : is_smul_regular M (a * b)) :
  is_smul_regular M b :=
by { rw ← smul_eq_mul at ab, exact ab.of_smul _ }
@[simp] lemma mul_iff_right [has_mul R] [is_scalar_tower R R M] (ha : is_smul_regular M a) :
  is_smul_regular M (a * b) ↔ is_smul_regular M b :=
⟨of_mul, ha.mul⟩
lemma mul_and_mul_iff [has_mul R] [is_scalar_tower R R M] :
  is_smul_regular M (a * b) ∧ is_smul_regular M (b * a) ↔
  is_smul_regular M a ∧ is_smul_regular M b :=
begin
  refine ⟨_, _⟩,
  { rintros ⟨ab, ba⟩,
    refine ⟨ba.of_mul, ab.of_mul⟩ },
  { rintros ⟨ha, hb⟩,
    exact ⟨ha.mul hb, hb.mul ha⟩ }
end
end has_smul
section monoid
variables [monoid R] [mul_action R M]
variable (M)
@[simp] lemma one : is_smul_regular M (1 : R) :=
λ a b ab, by rwa [one_smul, one_smul] at ab
variable {M}
lemma of_mul_eq_one (h : a * b = 1) : is_smul_regular M b :=
of_mul (by { rw h, exact one M })
lemma pow (n : ℕ) (ra : is_smul_regular M a) : is_smul_regular M (a ^ n) :=
begin
  induction n with n hn,
  { simp only [one, pow_zero] },
  { rw pow_succ, exact (ra.smul_iff (a ^ n)).mpr hn }
end
lemma pow_iff {n : ℕ} (n0 : 0 < n) :
  is_smul_regular M (a ^ n) ↔ is_smul_regular M a :=
begin
  refine ⟨_, pow n⟩,
  rw [← nat.succ_pred_eq_of_pos n0, pow_succ', ← smul_eq_mul],
  exact of_smul _,
end
end monoid
section monoid_smul
variables [monoid S] [has_smul R M] [has_smul R S] [mul_action S M] [is_scalar_tower R S M]
lemma of_smul_eq_one (h : a • s = 1) : is_smul_regular M s :=
of_smul a (by { rw h, exact one M })
end monoid_smul
section monoid_with_zero
variables [monoid_with_zero R] [monoid_with_zero S] [has_zero M]
          [mul_action_with_zero R M] [mul_action_with_zero R S] [mul_action_with_zero S M]
          [is_scalar_tower R S M]
protected lemma subsingleton (h : is_smul_regular M (0 : R)) : subsingleton M :=
⟨λ a b, h (by repeat { rw mul_action_with_zero.zero_smul })⟩
lemma zero_iff_subsingleton : is_smul_regular M (0 : R) ↔ subsingleton M :=
⟨λ h, h.subsingleton, λ H a b h, @subsingleton.elim _ H a b⟩
lemma not_zero_iff : ¬ is_smul_regular M (0 : R) ↔ nontrivial M :=
begin
  rw [nontrivial_iff, not_iff_comm, zero_iff_subsingleton, subsingleton_iff],
  push_neg,
  exact iff.rfl
end
lemma zero [sM : subsingleton M] : is_smul_regular M (0 : R) :=
zero_iff_subsingleton.mpr sM
lemma not_zero [nM : nontrivial M] : ¬ is_smul_regular M (0 : R) :=
not_zero_iff.mpr nM
end monoid_with_zero
section comm_semigroup
variables [comm_semigroup R] [has_smul R M] [is_scalar_tower R R M]
lemma mul_iff : is_smul_regular M (a * b) ↔
  is_smul_regular M a ∧ is_smul_regular M b :=
begin
  rw ← mul_and_mul_iff,
  exact ⟨λ ab, ⟨ab, by rwa mul_comm⟩, λ rab, rab.1⟩
end
end comm_semigroup
end is_smul_regular
section group
variables {G : Type*} [group G]
lemma is_smul_regular_of_group [mul_action G R] (g : G) : is_smul_regular R g :=
begin
  intros x y h,
  convert congr_arg ((•) g⁻¹) h using 1;
  simp [←smul_assoc]
end
end group
section units
variables [monoid R] [mul_action R M]
lemma units.is_smul_regular (a : Rˣ) : is_smul_regular M (a : R) :=
is_smul_regular.of_mul_eq_one a.inv_val
lemma is_unit.is_smul_regular (ua : is_unit a) : is_smul_regular M a :=
begin
  rcases ua with ⟨a, rfl⟩,
  exact a.is_smul_regular M
end
end units
