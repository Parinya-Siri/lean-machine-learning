import category_theory.subobject.lattice
import category_theory.essentially_small
import category_theory.simple
namespace category_theory
open category_theory.limits
variables {C : Type*} [category C]
class noetherian_object (X : C) : Prop :=
(subobject_gt_well_founded : well_founded ((>) : subobject X → subobject X → Prop))
class artinian_object (X : C) : Prop :=
(subobject_lt_well_founded [] : well_founded ((<) : subobject X → subobject X → Prop))
variables (C)
class noetherian extends essentially_small C :=
(noetherian_object : ∀ (X : C), noetherian_object X)
attribute [priority 100, instance] noetherian.noetherian_object
class artinian extends essentially_small C :=
(artinian_object : ∀ (X : C), artinian_object X)
attribute [priority 100, instance] artinian.artinian_object
variables {C}
open subobject
variables [has_zero_morphisms C] [has_zero_object C]
lemma exists_simple_subobject {X : C} [artinian_object X] (h : ¬ is_zero X) :
  ∃ (Y : subobject X), simple (Y : C) :=
begin
  haveI : nontrivial (subobject X) := nontrivial_of_not_is_zero h,
  haveI := is_atomic_of_order_bot_well_founded_lt (artinian_object.subobject_lt_well_founded X),
  have := is_atomic.eq_bot_or_exists_atom_le (⊤ : subobject X),
  obtain ⟨Y, s⟩ := (is_atomic.eq_bot_or_exists_atom_le (⊤ : subobject X)).resolve_left top_ne_bot,
  exact ⟨Y, (subobject_simple_iff_is_atom _).mpr s.1⟩,
end
noncomputable def simple_subobject {X : C} [artinian_object X] (h : ¬ is_zero X) : C :=
(exists_simple_subobject h).some
@[derive mono]
noncomputable def simple_subobject_arrow {X : C} [artinian_object X] (h : ¬ is_zero X) :
  simple_subobject h ⟶ X :=
(exists_simple_subobject h).some.arrow
instance {X : C} [artinian_object X] (h : ¬ is_zero X) : simple (simple_subobject h) :=
(exists_simple_subobject h).some_spec
end category_theory
