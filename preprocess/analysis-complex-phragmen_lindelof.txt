import analysis.complex.abs_max
import analysis.asymptotics.superpolynomial_decay
open set function filter asymptotics metric complex
open_locale topological_space filter real
local notation `expR` := real.exp
namespace phragmen_lindelof
variables {E : Type*} [normed_group E]
lemma is_O_sub_exp_exp {a : ‚Ñù} {f g : ‚ÑÇ ‚Üí E} {l : filter ‚ÑÇ} {u : ‚ÑÇ ‚Üí ‚Ñù}
  (hBf : ‚àÉ (c < a) B, f =O[l] (Œª z, expR (B * expR (c * |u z|))))
  (hBg : ‚àÉ (c < a) B, g =O[l] (Œª z, expR (B * expR (c * |u z|)))) :
  ‚àÉ (c < a) B, (f - g) =O[l] (Œª z, expR (B * expR (c * |u z|))) :=
begin
  have : ‚àÄ {c‚ÇÅ c‚ÇÇ B‚ÇÅ B‚ÇÇ}, c‚ÇÅ ‚â§ c‚ÇÇ ‚Üí 0 ‚â§ B‚ÇÇ ‚Üí B‚ÇÅ ‚â§ B‚ÇÇ ‚Üí ‚àÄ z,
    ‚à•expR (B‚ÇÅ * expR (c‚ÇÅ * |u z|))‚à• ‚â§ ‚à•expR (B‚ÇÇ * expR (c‚ÇÇ * |u z|))‚à•,
  { intros c‚ÇÅ c‚ÇÇ B‚ÇÅ B‚ÇÇ hc hB‚ÇÄ hB z,
    rw [real.norm_eq_abs, real.norm_eq_abs, real.abs_exp, real.abs_exp, real.exp_le_exp],
    exact mul_le_mul hB (real.exp_le_exp.2 $ mul_le_mul_of_nonneg_right hc $ abs_nonneg _)
      (real.exp_pos _).le hB‚ÇÄ },
  rcases hBf with ‚ü®cf, hcf, Bf, hOf‚ü©, rcases hBg with ‚ü®cg, hcg, Bg, hOg‚ü©,
  refine ‚ü®max cf cg, max_lt hcf hcg, max 0 (max Bf Bg), _‚ü©,
  refine (hOf.trans_le $ this _ _ _).sub (hOg.trans_le $ this _ _ _),
  exacts [le_max_left _ _, le_max_left _ _, (le_max_left _ _).trans (le_max_right _ _),
    le_max_right _ _, le_max_left _ _, (le_max_right _ _).trans (le_max_right _ _)]
end
lemma is_O_sub_exp_rpow {a : ‚Ñù} {f g : ‚ÑÇ ‚Üí E} {l : filter ‚ÑÇ}
  (hBf : ‚àÉ (c < a) B, f =O[comap complex.abs at_top ‚äì l] (Œª z, expR (B * (abs z) ^ c)))
  (hBg : ‚àÉ (c < a) B, g =O[comap complex.abs at_top ‚äì l] (Œª z, expR (B * (abs z) ^ c))) :
  ‚àÉ (c < a) B, (f - g) =O[comap complex.abs at_top ‚äì l] (Œª z, expR (B * (abs z) ^ c)) :=
begin
  have : ‚àÄ {c‚ÇÅ c‚ÇÇ B‚ÇÅ B‚ÇÇ : ‚Ñù}, c‚ÇÅ ‚â§ c‚ÇÇ ‚Üí 0 ‚â§ B‚ÇÇ ‚Üí B‚ÇÅ ‚â§ B‚ÇÇ ‚Üí
    (Œª z : ‚ÑÇ, expR (B‚ÇÅ * (abs z) ^ c‚ÇÅ)) =O[comap complex.abs at_top ‚äì l]
      (Œª z, expR (B‚ÇÇ * (abs z) ^ c‚ÇÇ)),
  { have : ‚àÄ·∂† z : ‚ÑÇ in comap abs at_top ‚äì l, 1 ‚â§ abs z,
      from ((eventually_ge_at_top 1).comap _).filter_mono inf_le_left,
    refine Œª c‚ÇÅ c‚ÇÇ B‚ÇÅ B‚ÇÇ hc hB‚ÇÄ hB, is_O.of_bound 1 (this.mono $ Œª z hz, _),
    rw [one_mul, real.norm_eq_abs, real.norm_eq_abs, real.abs_exp, real.abs_exp, real.exp_le_exp],
    exact mul_le_mul hB (real.rpow_le_rpow_of_exponent_le hz hc)
      (real.rpow_nonneg_of_nonneg (abs_nonneg _) _) hB‚ÇÄ },
  rcases hBf with ‚ü®cf, hcf, Bf, hOf‚ü©, rcases hBg with ‚ü®cg, hcg, Bg, hOg‚ü©,
  refine ‚ü®max cf cg, max_lt hcf hcg, max 0 (max Bf Bg), _‚ü©,
  refine (hOf.trans $ this _ _ _).sub (hOg.trans $ this _ _ _),
  exacts [le_max_left _ _, le_max_left _ _, (le_max_left _ _).trans (le_max_right _ _),
    le_max_right _ _, le_max_left _ _, (le_max_right _ _).trans (le_max_right _ _)]
end
variables [normed_space ‚ÑÇ E] {a b C : ‚Ñù} {f g : ‚ÑÇ ‚Üí E} {z : ‚ÑÇ}
lemma horizontal_strip (hfd : diff_cont_on_cl ‚ÑÇ f (im ‚Åª¬π' Ioo a b))
  (hB : ‚àÉ (c < œÄ / (b - a)) B, f =O[comap (has_abs.abs ‚àò re) at_top ‚äì ùìü (im ‚Åª¬π' Ioo a b)]
    (Œª z, expR (B * expR (c * |z.re|))))
  (hle_a : ‚àÄ z : ‚ÑÇ, im z = a ‚Üí ‚à•f z‚à• ‚â§ C) (hle_b : ‚àÄ z, im z = b ‚Üí ‚à•f z‚à• ‚â§ C)
  (hza : a ‚â§ im z) (hzb : im z ‚â§ b) :
  ‚à•f z‚à• ‚â§ C :=
begin
  suffices : ‚àÄ·∂† Œµ : ‚Ñù in ùìù[<] 0, ‚à•g Œµ z ‚Ä¢ f z‚à• ‚â§ C,
  { refine le_of_tendsto (tendsto.mono_left _ nhds_within_le_nhds) this,
    apply ((continuous_of_real.mul continuous_const).cexp.smul continuous_const).norm.tendsto',
    simp, apply_instance },
  filter_upwards [self_mem_nhds_within] with Œµ Œµ‚ÇÄ, change Œµ < 0 at Œµ‚ÇÄ,
  obtain ‚ü®R, hzR, hR‚ü© : ‚àÉ R : ‚Ñù, |z.re| < R ‚àß ‚àÄ w, |re w| = R ‚Üí im w ‚àà Ioo (a - b) (a + b) ‚Üí
    ‚à•g Œµ w ‚Ä¢ f w‚à• ‚â§ C,
  { refine ((eventually_gt_at_top _).and _).exists,
    rcases hO.exists_pos with ‚ü®A, hA‚ÇÄ, hA‚ü©,
    simp only [is_O_with_iff, eventually_inf_principal, eventually_comap, mem_Ioo, ‚Üê abs_lt,
      mem_preimage, (‚àò), real.norm_eq_abs, abs_of_pos (real.exp_pos _)] at hA,
    suffices : tendsto (Œª R, expR (Œ¥ * expR (d * R) + B * expR (c * R) + real.log A)) at_top (ùìù 0),
    { filter_upwards [this.eventually (ge_mem_nhds hC‚ÇÄ), hA] with R hR Hle w hre him,
      calc ‚à•g Œµ w ‚Ä¢ f w‚à• ‚â§ expR (Œ¥ * expR (d * R) + B * expR (c * R) + real.log A) : _
      ... ‚â§ C : hR,
      rw [norm_smul, real.exp_add, ‚Üê hre, real.exp_add, real.exp_log hA‚ÇÄ, mul_assoc, mul_comm _ A],
      exact mul_le_mul (hŒ¥ $ Ioo_subset_Icc_self him) (Hle _ hre him) (norm_nonneg _)
        (real.exp_pos _).le },
    refine real.tendsto_exp_at_bot.comp _,
    suffices H : tendsto (Œª R, Œ¥ + B * (expR ((d - c) * R))‚Åª¬π) at_top (ùìù (Œ¥ + B * 0)),
    { rw [mul_zero, add_zero] at H,
      refine tendsto.at_bot_add _ tendsto_const_nhds,
      simpa only [id, (‚àò), add_mul, mul_assoc, ‚Üê div_eq_inv_mul, ‚Üê real.exp_sub,
        ‚Üê sub_mul, sub_sub_cancel]
        using H.neg_mul_at_top Œ¥‚ÇÄ (real.tendsto_exp_at_top.comp $
          tendsto_const_nhds.mul_at_top hd‚ÇÄ tendsto_id) },
    refine tendsto_const_nhds.add (tendsto_const_nhds.mul _),
    exact tendsto_inv_at_top_zero.comp (real.tendsto_exp_at_top.comp $
      tendsto_const_nhds.mul_at_top (sub_pos.2 hcd) tendsto_id) },
  have hR‚ÇÄ : 0 < R, from (_root_.abs_nonneg _).trans_lt hzR,
  have hgd : differentiable ‚ÑÇ (g Œµ),
    from ((((differentiable_id.sub_const _).const_mul _).cexp.add
      ((differentiable_id.sub_const _).const_mul _).neg.cexp).const_mul _).cexp,
  replace hd : diff_cont_on_cl ‚ÑÇ (Œª w, g Œµ w ‚Ä¢ f w) (Ioo (-R) R √ó‚ÑÇ Ioo (a - b) (a + b)),
    from (hgd.diff_cont_on_cl.smul hfd).mono (inter_subset_right _ _),
  convert norm_le_of_forall_mem_frontier_norm_le ((bounded_Ioo _ _).re_prod_im (bounded_Ioo _ _))
    hd (Œª w hw, _) _,
  { have hwc := frontier_subset_closure hw,
    rw [frontier_re_prod_im, closure_Ioo (neg_lt_self hR‚ÇÄ).ne, frontier_Ioo hab,
      closure_Ioo hab.ne, frontier_Ioo (neg_lt_self hR‚ÇÄ)] at hw,
    by_cases him : w.im = a - b ‚à® w.im = a + b,
    { rw [closure_re_prod_im, closure_Ioo (neg_lt_self hR‚ÇÄ).ne] at hwc,
      rw [norm_smul, ‚Üê one_mul C],
      exact mul_le_mul (hg‚ÇÅ _ him) (him.by_cases (hle_a _) (hle_b _)) (norm_nonneg _) zero_le_one },
    { replace hw : w ‚àà {-R, R} √ó‚ÑÇ Icc (a - b) (a + b), from hw.resolve_left (Œª h, him h.2),
      have hw' := eq_endpoints_or_mem_Ioo_of_mem_Icc hw.2, rw ‚Üê or.assoc at hw',
      exact hR _ ((abs_eq hR‚ÇÄ.le).2 hw.1.symm) (hw'.resolve_left him) } },
  { rw [closure_re_prod_im, closure_Ioo hab.ne, closure_Ioo (neg_lt_self hR‚ÇÄ).ne],
    exact ‚ü®abs_le.1 hzR.le, ‚ü®hza.le, hzb.le‚ü©‚ü© }
end
lemma eq_zero_on_horizontal_strip (hd : diff_cont_on_cl ‚ÑÇ f (im ‚Åª¬π' Ioo a b))
  (hB : ‚àÉ (c < œÄ / (b - a)) B, f =O[comap (has_abs.abs ‚àò re) at_top ‚äì ùìü (im ‚Åª¬π' Ioo a b)]
    (Œª z, expR (B * expR (c * |z.re|))))
  (ha : ‚àÄ z : ‚ÑÇ, z.im = a ‚Üí f z = 0) (hb : ‚àÄ z : ‚ÑÇ, z.im = b ‚Üí f z = 0) :
  eq_on f 0 (im ‚Åª¬π' Icc a b) :=
Œª z hz, norm_le_zero_iff.1 $ horizontal_strip hd hB
  (Œª z hz, (ha z hz).symm ‚ñ∏ norm_zero.le) (Œª z hz, (hb z hz).symm ‚ñ∏ norm_zero.le) hz.1 hz.2
lemma eq_on_horizontal_strip {g : ‚ÑÇ ‚Üí E} (hdf : diff_cont_on_cl ‚ÑÇ f (im ‚Åª¬π' Ioo a b))
  (hBf : ‚àÉ (c < œÄ / (b - a)) B, f =O[comap (has_abs.abs ‚àò re) at_top ‚äì ùìü (im ‚Åª¬π' Ioo a b)]
    (Œª z, expR (B * expR (c * |z.re|))))
  (hdg : diff_cont_on_cl ‚ÑÇ g (im ‚Åª¬π' Ioo a b))
  (hBg : ‚àÉ (c < œÄ / (b - a)) B, g =O[comap (has_abs.abs ‚àò re) at_top ‚äì ùìü (im ‚Åª¬π' Ioo a b)]
    (Œª z, expR (B * expR (c * |z.re|))))
  (ha : ‚àÄ z : ‚ÑÇ, z.im = a ‚Üí f z = g z) (hb : ‚àÄ z : ‚ÑÇ, z.im = b ‚Üí f z = g z) :
  eq_on f g (im ‚Åª¬π' Icc a b) :=
Œª z hz, sub_eq_zero.1 (eq_zero_on_horizontal_strip (hdf.sub hdg) (is_O_sub_exp_exp hBf hBg)
  (Œª w hw, sub_eq_zero.2 (ha w hw)) (Œª w hw, sub_eq_zero.2 (hb w hw)) hz)
lemma vertical_strip (hfd : diff_cont_on_cl ‚ÑÇ f (re ‚Åª¬π' Ioo a b))
  (hB : ‚àÉ (c < œÄ / (b - a)) B, f =O[comap (has_abs.abs ‚àò im) at_top ‚äì ùìü (re ‚Åª¬π' Ioo a b)]
    (Œª z, expR (B * expR (c * |z.im|))))
  (hle_a : ‚àÄ z : ‚ÑÇ, re z = a ‚Üí ‚à•f z‚à• ‚â§ C) (hle_b : ‚àÄ z, re z = b ‚Üí ‚à•f z‚à• ‚â§ C)
  (hza : a ‚â§ re z) (hzb : re z ‚â§ b) :
  ‚à•f z‚à• ‚â§ C :=
begin
  suffices : ‚à•(Œª z, f (z * (-I))) (z * I)‚à• ‚â§ C, by simpa [mul_assoc] using this,
  have H : maps_to (Œª z, z * (-I)) (im ‚Åª¬π' Ioo a b) (re ‚Åª¬π' Ioo a b),
  { intros z hz, simpa using hz },
  refine horizontal_strip (hfd.comp (differentiable_id.mul_const _).diff_cont_on_cl H)
    _ (Œª z hz, hle_a _ _) (Œª z hz, hle_b _ _) _ _,
  { refine Exists‚ÇÉ.imp (Œª c hc B hO, _) hB,
    have : tendsto (Œª z, z * (-I)) (comap (has_abs.abs ‚àò re) at_top ‚äì ùìü (im ‚Åª¬π' Ioo a b))
      (comap (has_abs.abs ‚àò im) at_top ‚äì ùìü (re ‚Åª¬π' Ioo a b)),
    { refine (tendsto_comap_iff.2 _).inf H.tendsto,
      simpa [(‚àò)] using tendsto_comap },
    simpa [(‚àò)] using hO.comp_tendsto this },
  all_goals { simpa }
end
lemma eq_zero_on_vertical_strip (hd : diff_cont_on_cl ‚ÑÇ f (re ‚Åª¬π' Ioo a b))
  (hB : ‚àÉ (c < œÄ / (b - a)) B, f =O[comap (has_abs.abs ‚àò im) at_top ‚äì ùìü (re ‚Åª¬π' Ioo a b)]
    (Œª z, expR (B * expR (c * |z.im|))))
  (ha : ‚àÄ z : ‚ÑÇ, re z = a ‚Üí f z = 0) (hb : ‚àÄ z : ‚ÑÇ, re z = b ‚Üí f z = 0) :
  eq_on f 0 (re ‚Åª¬π' Icc a b) :=
Œª z hz, norm_le_zero_iff.1 $ vertical_strip hd hB
  (Œª z hz, (ha z hz).symm ‚ñ∏ norm_zero.le) (Œª z hz, (hb z hz).symm ‚ñ∏ norm_zero.le) hz.1 hz.2
lemma eq_on_vertical_strip {g : ‚ÑÇ ‚Üí E} (hdf : diff_cont_on_cl ‚ÑÇ f (re ‚Åª¬π' Ioo a b))
  (hBf : ‚àÉ (c < œÄ / (b - a)) B, f =O[comap (has_abs.abs ‚àò im) at_top ‚äì ùìü (re ‚Åª¬π' Ioo a b)]
    (Œª z, expR (B * expR (c * |z.im|))))
  (hdg : diff_cont_on_cl ‚ÑÇ g (re ‚Åª¬π' Ioo a b))
  (hBg : ‚àÉ (c < œÄ / (b - a)) B, g =O[comap (has_abs.abs ‚àò im) at_top ‚äì ùìü (re ‚Åª¬π' Ioo a b)]
    (Œª z, expR (B * expR (c * |z.im|))))
  (ha : ‚àÄ z : ‚ÑÇ, re z = a ‚Üí f z = g z) (hb : ‚àÄ z : ‚ÑÇ, re z = b ‚Üí f z = g z) :
  eq_on f g (re ‚Åª¬π' Icc a b) :=
Œª z hz, sub_eq_zero.1 (eq_zero_on_vertical_strip (hdf.sub hdg) (is_O_sub_exp_exp hBf hBg)
  (Œª w hw, sub_eq_zero.2 (ha w hw)) (Œª w hw, sub_eq_zero.2 (hb w hw)) hz)
lemma quadrant_I (hd : diff_cont_on_cl ‚ÑÇ f (Ioi 0 √ó‚ÑÇ Ioi 0))
  (hB : ‚àÉ (c < (2 : ‚Ñù)) B, f =O[comap complex.abs at_top ‚äì ùìü (Ioi 0 √ó‚ÑÇ Ioi 0)]
    (Œª z, expR (B * (abs z) ^ c)))
  (hre : ‚àÄ x : ‚Ñù, 0 ‚â§ x ‚Üí ‚à•f x‚à• ‚â§ C) (him : ‚àÄ x : ‚Ñù, 0 ‚â§ x ‚Üí ‚à•f (x * I)‚à• ‚â§ C)
  (hz_re : 0 ‚â§ z.re) (hz_im : 0 ‚â§ z.im) :
  ‚à•f z‚à• ‚â§ C :=
begin
lemma eq_zero_on_quadrant_I (hd : diff_cont_on_cl ‚ÑÇ f (Ioi 0 √ó‚ÑÇ Ioi 0))
  (hB : ‚àÉ (c < (2 : ‚Ñù)) B, f =O[comap complex.abs at_top ‚äì ùìü (Ioi 0 √ó‚ÑÇ Ioi 0)]
    (Œª z, expR (B * (abs z) ^ c)))
  (hre : ‚àÄ x : ‚Ñù, 0 ‚â§ x ‚Üí f x = 0) (him : ‚àÄ x : ‚Ñù, 0 ‚â§ x ‚Üí f (x * I) = 0) :
  eq_on f 0 {z | 0 ‚â§ z.re ‚àß 0 ‚â§ z.im} :=
Œª z hz, norm_le_zero_iff.1 $ quadrant_I hd hB (Œª x hx, norm_le_zero_iff.2 $ hre x hx)
  (Œª x hx, norm_le_zero_iff.2 $ him x hx) hz.1 hz.2
lemma eq_on_quadrant_I (hdf : diff_cont_on_cl ‚ÑÇ f (Ioi 0 √ó‚ÑÇ Ioi 0))
  (hBf : ‚àÉ (c < (2 : ‚Ñù)) B, f =O[comap complex.abs at_top ‚äì ùìü (Ioi 0 √ó‚ÑÇ Ioi 0)]
    (Œª z, expR (B * (abs z) ^ c)))
  (hdg : diff_cont_on_cl ‚ÑÇ g (Ioi 0 √ó‚ÑÇ Ioi 0))
  (hBg : ‚àÉ (c < (2 : ‚Ñù)) B, g =O[comap complex.abs at_top ‚äì ùìü (Ioi 0 √ó‚ÑÇ Ioi 0)]
    (Œª z, expR (B * (abs z) ^ c)))
  (hre : ‚àÄ x : ‚Ñù, 0 ‚â§ x ‚Üí f x = g x) (him : ‚àÄ x : ‚Ñù, 0 ‚â§ x ‚Üí f (x * I) = g (x * I)) :
  eq_on f g {z | 0 ‚â§ z.re ‚àß 0 ‚â§ z.im} :=
Œª z hz, sub_eq_zero.1 $ eq_zero_on_quadrant_I (hdf.sub hdg) (is_O_sub_exp_rpow hBf hBg)
  (Œª x hx, sub_eq_zero.2 $ hre x hx) (Œª x hx, sub_eq_zero.2 $ him x hx) hz
lemma quadrant_II (hd : diff_cont_on_cl ‚ÑÇ f (Iio 0 √ó‚ÑÇ Ioi 0))
  (hB : ‚àÉ (c < (2 : ‚Ñù)) B, f =O[comap complex.abs at_top ‚äì ùìü (Iio 0 √ó‚ÑÇ Ioi 0)]
    (Œª z, expR (B * (abs z) ^ c)))
  (hre : ‚àÄ x : ‚Ñù, x ‚â§ 0 ‚Üí ‚à•f x‚à• ‚â§ C) (him : ‚àÄ x : ‚Ñù, 0 ‚â§ x ‚Üí ‚à•f (x * I)‚à• ‚â§ C)
  (hz_re : z.re ‚â§ 0) (hz_im : 0 ‚â§ z.im) :
  ‚à•f z‚à• ‚â§ C :=
begin
  obtain ‚ü®z, rfl‚ü© : ‚àÉ z', z' * I = z, from ‚ü®z / I, div_mul_cancel _ I_ne_zero‚ü©,
  simp only [mul_I_re, mul_I_im, neg_nonpos] at hz_re hz_im,
  change ‚à•(f ‚àò (* I)) z‚à• ‚â§ C,
  have H : maps_to (* I) (Ioi 0 √ó‚ÑÇ Ioi 0) (Iio 0 √ó‚ÑÇ Ioi 0),
  { intros w hw,
    simpa only [mem_re_prod_im, mul_I_re, mul_I_im, neg_lt_zero, mem_Iio] using hw.symm },
  refine quadrant_I (hd.comp (differentiable_id.mul_const _).diff_cont_on_cl H)
    (Exists‚ÇÉ.imp (Œª c hc B hO, _) hB) him (Œª x hx, _) hz_im hz_re,
  { simpa only [(‚àò), complex.abs_mul, abs_I, mul_one]
      using hO.comp_tendsto ((tendsto_mul_right_cobounded I_ne_zero).inf H.tendsto) },
  { rw [comp_app, mul_assoc, I_mul_I, mul_neg_one, ‚Üê of_real_neg],
    exact hre _ (neg_nonpos.2 hx) }
end
lemma eq_zero_on_quadrant_II (hd : diff_cont_on_cl ‚ÑÇ f (Iio 0 √ó‚ÑÇ Ioi 0))
  (hB : ‚àÉ (c < (2 : ‚Ñù)) B, f =O[comap complex.abs at_top ‚äì ùìü (Iio 0 √ó‚ÑÇ Ioi 0)]
    (Œª z, expR (B * (abs z) ^ c)))
  (hre : ‚àÄ x : ‚Ñù, x ‚â§ 0 ‚Üí f x = 0) (him : ‚àÄ x : ‚Ñù, 0 ‚â§ x ‚Üí f (x * I) = 0) :
  eq_on f 0 {z | z.re ‚â§ 0 ‚àß 0 ‚â§ z.im} :=
Œª z hz, norm_le_zero_iff.1 $ quadrant_II hd hB (Œª x hx, norm_le_zero_iff.2 $ hre x hx)
  (Œª x hx, norm_le_zero_iff.2 $ him x hx) hz.1 hz.2
lemma eq_on_quadrant_II (hdf : diff_cont_on_cl ‚ÑÇ f (Iio 0 √ó‚ÑÇ Ioi 0))
  (hBf : ‚àÉ (c < (2 : ‚Ñù)) B, f =O[comap complex.abs at_top ‚äì ùìü (Iio 0 √ó‚ÑÇ Ioi 0)]
    (Œª z, expR (B * (abs z) ^ c)))
  (hdg : diff_cont_on_cl ‚ÑÇ g (Iio 0 √ó‚ÑÇ Ioi 0))
  (hBg : ‚àÉ (c < (2 : ‚Ñù)) B, g =O[comap complex.abs at_top ‚äì ùìü (Iio 0 √ó‚ÑÇ Ioi 0)]
    (Œª z, expR (B * (abs z) ^ c)))
  (hre : ‚àÄ x : ‚Ñù, x ‚â§ 0 ‚Üí f x = g x) (him : ‚àÄ x : ‚Ñù, 0 ‚â§ x ‚Üí f (x * I) = g (x * I)) :
  eq_on f g {z | z.re ‚â§ 0 ‚àß 0 ‚â§ z.im} :=
Œª z hz, sub_eq_zero.1 $ eq_zero_on_quadrant_II (hdf.sub hdg) (is_O_sub_exp_rpow hBf hBg)
  (Œª x hx, sub_eq_zero.2 $ hre x hx) (Œª x hx, sub_eq_zero.2 $ him x hx) hz
lemma quadrant_III (hd : diff_cont_on_cl ‚ÑÇ f (Iio 0 √ó‚ÑÇ Iio 0))
  (hB : ‚àÉ (c < (2 : ‚Ñù)) B, f =O[comap complex.abs at_top ‚äì ùìü (Iio 0 √ó‚ÑÇ Iio 0)]
    (Œª z, expR (B * (abs z) ^ c)))
  (hre : ‚àÄ x : ‚Ñù, x ‚â§ 0 ‚Üí ‚à•f x‚à• ‚â§ C) (him : ‚àÄ x : ‚Ñù, x ‚â§ 0 ‚Üí ‚à•f (x * I)‚à• ‚â§ C)
  (hz_re : z.re ‚â§ 0) (hz_im : z.im ‚â§ 0) :
  ‚à•f z‚à• ‚â§ C :=
begin
  obtain ‚ü®z, rfl‚ü© : ‚àÉ z', -z' = z, from ‚ü®-z, neg_neg z‚ü©,
  simp only [neg_re, neg_im, neg_nonpos] at hz_re hz_im,
  change ‚à•(f ‚àò has_neg.neg) z‚à• ‚â§ C,
  have H : maps_to has_neg.neg (Ioi 0 √ó‚ÑÇ Ioi 0) (Iio 0 √ó‚ÑÇ Iio 0),
  { intros w hw,
    simpa only [mem_re_prod_im, neg_re, neg_im, neg_lt_zero, mem_Iio] using hw },
  refine quadrant_I (hd.comp differentiable_neg.diff_cont_on_cl H) _ (Œª x hx, _) (Œª x hx, _)
    hz_re hz_im,
  { refine Exists‚ÇÉ.imp (Œª c hc B hO, _) hB,
    simpa only [(‚àò), complex.abs_neg]
      using hO.comp_tendsto (tendsto_neg_cobounded.inf H.tendsto) },
  { rw [comp_app, ‚Üê of_real_neg],
    exact hre (-x) (neg_nonpos.2 hx) },
  { rw [comp_app, ‚Üê neg_mul, ‚Üê of_real_neg],
    exact him (-x) (neg_nonpos.2 hx) }
end
lemma eq_zero_on_quadrant_III (hd : diff_cont_on_cl ‚ÑÇ f (Iio 0 √ó‚ÑÇ Iio 0))
  (hB : ‚àÉ (c < (2 : ‚Ñù)) B, f =O[comap complex.abs at_top ‚äì ùìü (Iio 0 √ó‚ÑÇ Iio 0)]
    (Œª z, expR (B * (abs z) ^ c)))
  (hre : ‚àÄ x : ‚Ñù, x ‚â§ 0 ‚Üí f x = 0) (him : ‚àÄ x : ‚Ñù, x ‚â§ 0 ‚Üí f (x * I) = 0) :
  eq_on f 0 {z | z.re ‚â§ 0 ‚àß z.im ‚â§ 0} :=
Œª z hz, norm_le_zero_iff.1 $ quadrant_III hd hB (Œª x hx, norm_le_zero_iff.2 $ hre x hx)
  (Œª x hx, norm_le_zero_iff.2 $ him x hx) hz.1 hz.2
lemma eq_on_quadrant_III (hdf : diff_cont_on_cl ‚ÑÇ f (Iio 0 √ó‚ÑÇ Iio 0))
  (hBf : ‚àÉ (c < (2 : ‚Ñù)) B, f =O[comap complex.abs at_top ‚äì ùìü (Iio 0 √ó‚ÑÇ Iio 0)]
    (Œª z, expR (B * (abs z) ^ c)))
  (hdg : diff_cont_on_cl ‚ÑÇ g (Iio 0 √ó‚ÑÇ Iio 0))
  (hBg : ‚àÉ (c < (2 : ‚Ñù)) B, g =O[comap complex.abs at_top ‚äì ùìü (Iio 0 √ó‚ÑÇ Iio 0)]
    (Œª z, expR (B * (abs z) ^ c)))
  (hre : ‚àÄ x : ‚Ñù, x ‚â§ 0 ‚Üí f x = g x) (him : ‚àÄ x : ‚Ñù, x ‚â§ 0 ‚Üí f (x * I) = g (x * I)) :
  eq_on f g {z | z.re ‚â§ 0 ‚àß z.im ‚â§ 0} :=
Œª z hz, sub_eq_zero.1 $ eq_zero_on_quadrant_III (hdf.sub hdg) (is_O_sub_exp_rpow hBf hBg)
  (Œª x hx, sub_eq_zero.2 $ hre x hx) (Œª x hx, sub_eq_zero.2 $ him x hx) hz
lemma quadrant_IV (hd : diff_cont_on_cl ‚ÑÇ f (Ioi 0 √ó‚ÑÇ Iio 0))
  (hB : ‚àÉ (c < (2 : ‚Ñù)) B, f =O[comap complex.abs at_top ‚äì ùìü (Ioi 0 √ó‚ÑÇ Iio 0)]
    (Œª z, expR (B * (abs z) ^ c)))
  (hre : ‚àÄ x : ‚Ñù, 0 ‚â§ x ‚Üí ‚à•f x‚à• ‚â§ C) (him : ‚àÄ x : ‚Ñù, x ‚â§ 0 ‚Üí ‚à•f (x * I)‚à• ‚â§ C)
  (hz_re : 0 ‚â§ z.re) (hz_im : z.im ‚â§ 0) :
  ‚à•f z‚à• ‚â§ C :=
begin
  obtain ‚ü®z, rfl‚ü© : ‚àÉ z', -z' = z, from ‚ü®-z, neg_neg z‚ü©,
  simp only [neg_re, neg_im, neg_nonpos, neg_nonneg] at hz_re hz_im,
  change ‚à•(f ‚àò has_neg.neg) z‚à• ‚â§ C,
  have H : maps_to has_neg.neg (Iio 0 √ó‚ÑÇ Ioi 0) (Ioi 0 √ó‚ÑÇ Iio 0),
  { intros w hw,
    simpa only [mem_re_prod_im, neg_re, neg_im, neg_lt_zero, neg_pos, mem_Ioi, mem_Iio] using hw },
  refine quadrant_II (hd.comp differentiable_neg.diff_cont_on_cl H) _ (Œª x hx, _) (Œª x hx, _)
    hz_re hz_im,
  { refine Exists‚ÇÉ.imp (Œª c hc B hO, _) hB,
    simpa only [(‚àò), complex.abs_neg]
      using hO.comp_tendsto (tendsto_neg_cobounded.inf H.tendsto) },
  { rw [comp_app, ‚Üê of_real_neg],
    exact hre (-x) (neg_nonneg.2 hx) },
  { rw [comp_app, ‚Üê neg_mul, ‚Üê of_real_neg],
    exact him (-x) (neg_nonpos.2 hx) }
end
lemma eq_zero_on_quadrant_IV (hd : diff_cont_on_cl ‚ÑÇ f (Ioi 0 √ó‚ÑÇ Iio 0))
  (hB : ‚àÉ (c < (2 : ‚Ñù)) B, f =O[comap complex.abs at_top ‚äì ùìü (Ioi 0 √ó‚ÑÇ Iio 0)]
    (Œª z, expR (B * (abs z) ^ c)))
  (hre : ‚àÄ x : ‚Ñù, 0 ‚â§ x ‚Üí f x = 0) (him : ‚àÄ x : ‚Ñù, x ‚â§ 0 ‚Üí f (x * I) = 0) :
  eq_on f 0 {z | 0 ‚â§ z.re ‚àß z.im ‚â§ 0} :=
Œª z hz, norm_le_zero_iff.1 $ quadrant_IV hd hB (Œª x hx, norm_le_zero_iff.2 $ hre x hx)
  (Œª x hx, norm_le_zero_iff.2 $ him x hx) hz.1 hz.2
lemma eq_on_quadrant_IV (hdf : diff_cont_on_cl ‚ÑÇ f (Ioi 0 √ó‚ÑÇ Iio 0))
  (hBf : ‚àÉ (c < (2 : ‚Ñù)) B, f =O[comap complex.abs at_top ‚äì ùìü (Ioi 0 √ó‚ÑÇ Iio 0)]
    (Œª z, expR (B * (abs z) ^ c)))
  (hdg : diff_cont_on_cl ‚ÑÇ g (Ioi 0 √ó‚ÑÇ Iio 0))
  (hBg : ‚àÉ (c < (2 : ‚Ñù)) B, g =O[comap complex.abs at_top ‚äì ùìü (Ioi 0 √ó‚ÑÇ Iio 0)]
    (Œª z, expR (B * (abs z) ^ c)))
  (hre : ‚àÄ x : ‚Ñù, 0 ‚â§ x ‚Üí f x = g x) (him : ‚àÄ x : ‚Ñù, x ‚â§ 0 ‚Üí f (x * I) = g (x * I)) :
  eq_on f g {z | 0 ‚â§ z.re ‚àß z.im ‚â§ 0} :=
Œª z hz, sub_eq_zero.1 $ eq_zero_on_quadrant_IV (hdf.sub hdg) (is_O_sub_exp_rpow hBf hBg)
  (Œª x hx, sub_eq_zero.2 $ hre x hx) (Œª x hx, sub_eq_zero.2 $ him x hx) hz
lemma right_half_plane_of_tendsto_zero_on_real (hd : diff_cont_on_cl ‚ÑÇ f {z | 0 < z.re})
  (hexp : ‚àÉ (c < (2 : ‚Ñù)) B, f =O[comap complex.abs at_top ‚äì ùìü {z | 0 < z.re}]
    (Œª z, expR (B * (abs z) ^ c)))
  (hre : tendsto (Œª x : ‚Ñù, f x) at_top (ùìù 0)) (him : ‚àÄ x : ‚Ñù, ‚à•f (x * I)‚à• ‚â§ C) (hz : 0 ‚â§ z.re) :
  ‚à•f z‚à• ‚â§ C :=
begin
  revert z,
  have hle : ‚àÄ C', (‚àÄ x : ‚Ñù, 0 ‚â§ x ‚Üí ‚à•f x‚à• ‚â§ C') ‚Üí ‚àÄ z : ‚ÑÇ, 0 ‚â§ z.re ‚Üí ‚à•f z‚à• ‚â§ max C C',
  { intros C' hC' z hz,
    cases le_total z.im 0,
    { refine quadrant_IV (hd.mono $ Œª _, and.left) (Exists‚ÇÉ.imp (Œª c hc B hO, _) hexp)
        (Œª x hx, (hC' x hx).trans $ le_max_right _ _) (Œª x hx, (him x).trans (le_max_left _ _))
        hz h,
      exact hO.mono (inf_le_inf_left _ $ principal_mono.2 $ Œª _, and.left) },
    { refine quadrant_I (hd.mono $ Œª _, and.left) (Exists‚ÇÉ.imp (Œª c hc B hO, _) hexp)
        (Œª x hx, (hC' x hx).trans $ le_max_right _ _) (Œª x hx, (him x).trans (le_max_left _ _))
        hz h,
      exact hO.mono (inf_le_inf_left _ $ principal_mono.2 $ Œª _, and.left) } },
lemma right_half_plane_of_bounded_on_real (hd : diff_cont_on_cl ‚ÑÇ f {z | 0 < z.re})
  (hexp : ‚àÉ (c < (2 : ‚Ñù)) B, f =O[comap complex.abs at_top ‚äì ùìü {z | 0 < z.re}]
    (Œª z, expR (B * (abs z) ^ c)))
  (hre : is_bounded_under (‚â§) at_top (Œª x : ‚Ñù, ‚à•f x‚à•))
  (him : ‚àÄ x : ‚Ñù, ‚à•f (x * I)‚à• ‚â§ C) (hz : 0 ‚â§ z.re) :
  ‚à•f z‚à• ‚â§ C :=
begin
lemma eq_zero_on_right_half_plane_of_superexponential_decay
  (hd : diff_cont_on_cl ‚ÑÇ f {z | 0 < z.re})
  (hexp : ‚àÉ (c < (2 : ‚Ñù)) B, f =O[comap complex.abs at_top ‚äì ùìü {z | 0 < z.re}]
    (Œª z, expR (B * (abs z) ^ c)))
  (hre : superpolynomial_decay at_top expR (Œª x, ‚à•f x‚à•))
  (him : ‚àÉ C, ‚àÄ x : ‚Ñù, ‚à•f (x * I)‚à• ‚â§ C) :
  eq_on f 0 {z : ‚ÑÇ | 0 ‚â§ z.re} :=
begin
  rcases him with ‚ü®C, hC‚ü©,
lemma eq_on_right_half_plane_of_superexponential_decay {g : ‚ÑÇ ‚Üí E}
  (hfd : diff_cont_on_cl ‚ÑÇ f {z | 0 < z.re}) (hgd : diff_cont_on_cl ‚ÑÇ g {z | 0 < z.re})
  (hfexp : ‚àÉ (c < (2 : ‚Ñù)) B, f =O[comap complex.abs at_top ‚äì ùìü {z | 0 < z.re}]
    (Œª z, expR (B * (abs z) ^ c)))
  (hgexp : ‚àÉ (c < (2 : ‚Ñù)) B, g =O[comap complex.abs at_top ‚äì ùìü {z | 0 < z.re}]
    (Œª z, expR (B * (abs z) ^ c)))
  (hre : superpolynomial_decay at_top expR (Œª x, ‚à•f x - g x‚à•))
  (hfim : ‚àÉ C, ‚àÄ x : ‚Ñù, ‚à•f (x * I)‚à• ‚â§ C) (hgim : ‚àÉ C, ‚àÄ x : ‚Ñù, ‚à•g (x * I)‚à• ‚â§ C) :
  eq_on f g {z : ‚ÑÇ | 0 ‚â§ z.re} :=
begin
  suffices : eq_on (f - g) 0 {z : ‚ÑÇ | 0 ‚â§ z.re},
    by simpa only [eq_on, pi.sub_apply, pi.zero_apply, sub_eq_zero] using this,
  refine eq_zero_on_right_half_plane_of_superexponential_decay (hfd.sub hgd) _ hre _,
  { set l : filter ‚ÑÇ := comap abs at_top ‚äì ùìü {z : ‚ÑÇ | 0 < z.re},
    suffices : ‚àÄ {c‚ÇÅ c‚ÇÇ B‚ÇÅ B‚ÇÇ : ‚Ñù}, c‚ÇÅ ‚â§ c‚ÇÇ ‚Üí B‚ÇÅ ‚â§ B‚ÇÇ ‚Üí 0 ‚â§ B‚ÇÇ ‚Üí
      (Œª z, expR (B‚ÇÅ * abs z ^ c‚ÇÅ)) =O[l] (Œª z, expR (B‚ÇÇ * abs z ^ c‚ÇÇ)),
    { rcases hfexp with ‚ü®cf, hcf, Bf, hOf‚ü©, rcases hgexp with ‚ü®cg, hcg, Bg, hOg‚ü©,
      refine ‚ü®max cf cg, max_lt hcf hcg, max 0 (max Bf Bg), _‚ü©,
      refine is_O.sub (hOf.trans $ this _ _ _) (hOg.trans $ this _ _ _); simp },
    intros c‚ÇÅ c‚ÇÇ B‚ÇÅ B‚ÇÇ hc hB hB‚ÇÇ,
    have : ‚àÄ·∂† z : ‚ÑÇ in l, 1 ‚â§ abs z,
      from ((eventually_ge_at_top 1).comap _).filter_mono inf_le_left,
    refine is_O.of_bound 1 (this.mono $ Œª z hz, _),
    simp only [real.norm_of_nonneg (real.exp_pos _).le, real.exp_le_exp, one_mul],
    exact mul_le_mul hB (real.rpow_le_rpow_of_exponent_le hz hc)
      (real.rpow_nonneg_of_nonneg (abs_nonneg _) _) hB‚ÇÇ },
  { rcases hfim with ‚ü®Cf, hCf‚ü©, rcases hgim with ‚ü®Cg, hCg‚ü©,
    exact ‚ü®Cf + Cg, Œª x, norm_sub_le_of_le (hCf x) (hCg x)‚ü© }
end
end phragmen_lindelof
