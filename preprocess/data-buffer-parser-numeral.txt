import data.buffer.parser.basic
open parser parse_result
namespace parser
variables (α : Type) [has_zero α] [has_one α] [has_add α]
@[derive [mono, bounded, prog]]
def numeral : parser α :=
nat.bin_cast <$> nat
@[derive [mono, bounded, prog]]
def numeral.of_fintype [fintype α] : parser α :=
do
  c ← nat,
  decorate_error (sformat!"<numeral less than {to_string (fintype.card α)}>")
    (guard (c < fintype.card α)),
  pure $ nat.bin_cast c
@[derive [mono, bounded, prog]]
def numeral.from_one : parser α :=
do
  c ← nat,
  decorate_error ("<positive numeral>")
    (guard (0 < c)),
  pure $ nat.bin_cast (c - 1)
@[derive [mono, bounded, prog]]
def numeral.from_one.of_fintype [fintype α] : parser α :=
do
  c ← nat,
  decorate_error (sformat!"<positive numeral less than or equal to {to_string (fintype.card α)}>")
    (guard (0 < c ∧ c ≤ fintype.card α)),
  pure $ nat.bin_cast (c - 1)
@[derive [mono, bounded, err_static, step]]
def numeral.char (fromc toc : char) : parser α :=
do
  c ← decorate_error
    (sformat!"<char between '{fromc.to_string}' to '{toc.to_string}' inclusively>")
    (sat (λ c, fromc ≤ c ∧ c ≤ toc)),
  pure $ nat.bin_cast (c.to_nat - fromc.to_nat)
@[derive [mono, bounded, err_static, step]]
def numeral.char.of_fintype [fintype α] (fromc : char) : parser α :=
do
  c ← decorate_error
    (sformat!"<char from '{fromc.to_string}' to '
    { (char.of_nat (fromc.to_nat + fintype.card α - 1)).to_string}' inclusively>")
    (sat (λ c, fromc ≤ c ∧ c.to_nat - fintype.card α < fromc.to_nat)),
  pure $ nat.bin_cast (c.to_nat - fromc.to_nat)
end parser
