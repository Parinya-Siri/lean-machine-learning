import data.fintype.basic
import tactic.norm_num
namespace tactic
open expr
open conv.interactive
meta def guard_mem_fin (e : expr) : tactic expr :=
do t ← infer_type e,
   α ← mk_mvar,
   to_expr ``(_ ∈ (_ : finset %%α))   tt ff >>= unify t <|>
   to_expr ``(_ ∈ (_ : multiset %%α)) tt ff >>= unify t <|>
   to_expr ``(_ ∈ (_ : list %%α))     tt ff >>= unify t,
   instantiate_mvars α
meta def expr_list_to_list_expr : Π (e : expr), tactic (list expr)
| `(list.cons %%h %%t) := list.cons h <$> expr_list_to_list_expr t
| `([]) := return []
| _ := failed
private meta def fin_cases_at_aux : Π (with_list : list expr) (e : expr), tactic unit
| with_list e :=
(do
  result ← cases_core e,
  match result with
meta def fin_cases_at (nm : option name) : Π (with_list : option pexpr) (e : expr), tactic unit
| with_list e :=
do ty ← try_core $ guard_mem_fin e,
    match ty with
meta def fin_cases :
  parse hyp → parse (tk "with" *> texpr)? → parse (tk "using" *> ident)? → tactic unit
| none none nm := focus1 $ do
    ctx ← local_context,
    ctx.mfirst (fin_cases_at nm none) <|>
      fail ("No hypothesis of the forms `x ∈ A`, where " ++
        "`A : finset X`, `A : list X`, or `A : multiset X`, or `x : A`, with `[fintype A]`.")
| none (some _) _ := fail "Specify a single hypothesis when using a `with` argument."
| (some n) with_list nm :=
  do
    h ← get_local n,
    focus1 $ fin_cases_at nm with_list h
end interactive
add_tactic_doc
{ name       := "fin_cases",
  category   := doc_category.tactic,
  decl_names := [`tactic.interactive.fin_cases],
  tags       := ["case bashing"] }
end tactic
