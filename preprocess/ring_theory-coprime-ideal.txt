import linear_algebra.dfinsupp
import ring_theory.ideal.operations
namespace ideal
variables {ι R : Type*} [comm_semiring R]
lemma supr_infi_eq_top_iff_pairwise {t : finset ι} (h : t.nonempty) (I : ι → ideal R) :
  (⨆ i ∈ t, ⨅ j (hj : j ∈ t) (ij : j ≠ i), I j) = ⊤ ↔
    (t : set ι).pairwise (λ i j, I i ⊔ I j = ⊤) :=
begin
  haveI : decidable_eq ι := classical.dec_eq ι,
  rw [eq_top_iff_one, submodule.mem_supr_finset_iff_exists_sum],
  refine h.cons_induction _ _; clear' t h,
  { simp only [finset.sum_singleton, finset.coe_singleton, set.pairwise_singleton, iff_true],
    refine λ a, ⟨λ i, if h : i = a then ⟨1, _⟩ else 0, _⟩,
    { rw h, simp only [finset.mem_singleton, ne.def, infi_infi_eq_left, eq_self_iff_true,
        not_true, infi_false]},
    { simp only [dif_pos, dif_ctx_congr, submodule.coe_mk, eq_self_iff_true] } },
  intros a t hat h ih,
  rw [finset.coe_cons,
    set.pairwise_insert_of_symmetric (λ i j (h : I i ⊔ I j = ⊤), sup_comm.trans h)],
  split,
  { rintro ⟨μ, hμ⟩, rw finset.sum_cons at hμ,
    refine ⟨ih.mp ⟨pi.single h.some ⟨μ a, _⟩ + λ i, ⟨μ i, _⟩, _⟩, λ b hb ab, _⟩,
    { have := submodule.coe_mem (μ a), rw mem_infi at this ⊢,
