import category_theory.functor
namespace category_theory
def map (F : C ‚Üí D) [functorial.{v‚ÇÅ v‚ÇÇ} F] {X Y : C} (f : X ‚ü∂ Y) : F X ‚ü∂ F Y :=
functorial.map.{v‚ÇÅ v‚ÇÇ} f
@[simp] lemma map_as_map {F : C ‚Üí D} [functorial.{v‚ÇÅ v‚ÇÇ} F] {X Y : C} {f : X ‚ü∂ Y} :
  functorial.map.{v‚ÇÅ v‚ÇÇ} f = map F f := rfl
@[simp] lemma functorial.map_id {F : C ‚Üí D} [functorial.{v‚ÇÅ v‚ÇÇ} F] {X : C} :
  map F (ùüô X) = ùüô (F X) := functorial.map_id' X
@[simp] lemma functorial.map_comp
  {F : C ‚Üí D} [functorial.{v‚ÇÅ v‚ÇÇ} F] {X Y Z : C} {f : X ‚ü∂ Y} {g : Y ‚ü∂ Z} :
  map F (f ‚â´ g) = map F f ‚â´ map F g := functorial.map_comp' f g
namespace functor
def of (F : C ‚Üí D) [I : functorial.{v‚ÇÅ v‚ÇÇ} F] : C ‚•§ D :=
{ obj := F,
  ..I }
end functor
instance (F : C ‚•§ D) : functorial.{v‚ÇÅ v‚ÇÇ} (F.obj) := { .. F }
@[simp]
lemma map_functorial_obj (F : C ‚•§ D) {X Y : C} (f : X ‚ü∂ Y) : map F.obj f = F.map f := rfl
instance functorial_id : functorial.{v‚ÇÅ v‚ÇÅ} (id : C ‚Üí C) :=
{ map := Œª X Y f, f }
section
variables {E : Type u‚ÇÉ} [category.{v‚ÇÉ} E]
