import topology.category.Profinite
import topology.stone_cech
import category_theory.preadditive.projective
noncomputable theory
universes u v w
open category_theory function
namespace Profinite
instance projective_ultrafilter (X : Type u) :
  projective (of $ ultrafilter X) :=
{ factors := Œª Y Z f g hg,
  begin
    rw epi_iff_surjective at hg,
    obtain ‚ü®g', hg'‚ü© := hg.has_right_inverse,
    let t : X ‚Üí Y := g' ‚àò f ‚àò (pure : X ‚Üí ultrafilter X),
    let h : ultrafilter X ‚Üí Y := ultrafilter.extend t,
    have hh : continuous h := continuous_ultrafilter_extend _,
    use ‚ü®h, hh‚ü©,
    apply faithful.map_injective (forget Profinite),
    simp only [forget_map_eq_coe, continuous_map.coe_mk, coe_comp],
    refine dense_range_pure.equalizer (g.continuous.comp hh) f.continuous _,
    rw [comp.assoc, ultrafilter_extend_extends, ‚Üê comp.assoc, hg'.comp_eq_id, comp.left_id],
  end }
def projective_presentation (X : Profinite.{u}) : projective_presentation X :=
{ P := of $ ultrafilter X,
  f := ‚ü®_, continuous_ultrafilter_extend id‚ü©,
  projective := Profinite.projective_ultrafilter X,
  epi := concrete_category.epi_of_surjective _ $
    Œª x, ‚ü®(pure x : ultrafilter X), congr_fun (ultrafilter_extend_extends (ùüô X)) x‚ü© }
instance : enough_projectives Profinite.{u} :=
{ presentation := Œª X, ‚ü®projective_presentation X‚ü© }
end Profinite
