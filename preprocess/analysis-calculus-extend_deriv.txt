import analysis.calculus.mean_value
variables {E : Type*} [normed_group E] [normed_space ℝ E]
          {F : Type*} [normed_group F] [normed_space ℝ F]
open filter set metric continuous_linear_map
open_locale topological_space
local attribute [mono] prod_mono
theorem has_fderiv_at_boundary_of_tendsto_fderiv {f : E → F} {s : set E} {x : E} {f' : E →L[ℝ] F}
  (f_diff : differentiable_on ℝ f s) (s_conv : convex ℝ s) (s_open : is_open s)
  (f_cont : ∀y ∈ closure s, continuous_within_at f s y)
  (h : tendsto (λy, fderiv ℝ f y) (𝓝[s] x) (𝓝 f')) :
  has_fderiv_within_at f f' (closure s) x :=
begin
  classical,
  assume ε ε_pos,
  obtain ⟨δ, δ_pos, hδ⟩ : ∃ δ > 0, ∀ y ∈ s, dist y x < δ → ∥fderiv ℝ f y - f'∥ < ε,
    by simpa [dist_zero_right] using tendsto_nhds_within_nhds.1 h ε ε_pos,
  set B := ball x δ,
  suffices : ∀ y ∈ B ∩ (closure s), ∥f y - f x - (f' y - f' x)∥ ≤ ε * ∥y - x∥,
    from mem_nhds_within_iff.2 ⟨δ, δ_pos, λy hy, by simpa using this y hy⟩,
  suffices : ∀ p : E × E, p ∈ closure ((B ∩ s) ×ˢ (B ∩ s)) → ∥f p.2 - f p.1 - (f' p.2 - f' p.1)∥
    ≤ ε * ∥p.2 - p.1∥,
  { rw closure_prod_eq at this,
    intros y y_in,
    apply this ⟨x, y⟩,
    have : B ∩ closure s ⊆ closure (B ∩ s), from closure_inter_open is_open_ball,
    exact ⟨this ⟨mem_ball_self δ_pos, hx⟩, this y_in⟩ },
  have key : ∀ p : E × E, p ∈ (B ∩ s) ×ˢ (B ∩ s) → ∥f p.2 - f p.1 - (f' p.2 - f' p.1)∥
    ≤ ε * ∥p.2 - p.1∥,
  { rintros ⟨u, v⟩ ⟨u_in, v_in⟩,
    have conv : convex ℝ (B ∩ s) := (convex_ball _ _).inter s_conv,
    have diff : differentiable_on ℝ f (B ∩ s) := f_diff.mono (inter_subset_right _ _),
    have bound : ∀ z ∈ (B ∩ s), ∥fderiv_within ℝ f (B ∩ s) z - f'∥ ≤ ε,
    { intros z z_in,
      convert le_of_lt (hδ _ z_in.2 z_in.1),
      have op : is_open (B ∩ s) := is_open_ball.inter s_open,
      rw differentiable_at.fderiv_within _ (op.unique_diff_on z z_in),
      exact (diff z z_in).differentiable_at (is_open.mem_nhds op z_in) },
    simpa using conv.norm_image_sub_le_of_norm_fderiv_within_le' diff bound u_in v_in },
  rintros ⟨u, v⟩ uv_in,
  refine continuous_within_at.closure_le uv_in _ _ key,
  have f_cont' : ∀y ∈ closure s, continuous_within_at (f - f') s y,
  { intros y y_in,
    exact tendsto.sub (f_cont y y_in) (f'.cont.continuous_within_at) },
lemma has_deriv_at_interval_left_endpoint_of_tendsto_deriv {s : set ℝ} {e : E} {a : ℝ} {f : ℝ → E}
  (f_diff : differentiable_on ℝ f s) (f_lim : continuous_within_at f s a)
  (hs : s ∈ 𝓝[>] a)
  (f_lim' : tendsto (λx, deriv f x) (𝓝[>] a) (𝓝 e)) :
  has_deriv_within_at f e (Ici a) a :=
begin
  obtain ⟨b, ab : a < b, sab : Ioc a b ⊆ s⟩ :=
    mem_nhds_within_Ioi_iff_exists_Ioc_subset.1 hs,
  let t := Ioo a b,
  have ts : t ⊆ s := subset.trans Ioo_subset_Ioc_self sab,
  have t_diff : differentiable_on ℝ f t := f_diff.mono ts,
  have t_conv : convex ℝ t := convex_Ioo a b,
  have t_open : is_open t := is_open_Ioo,
  have t_closure : closure t = Icc a b := closure_Ioo ab.ne,
  have t_cont : ∀y ∈ closure t, continuous_within_at f t y,
  { rw t_closure,
    assume y hy,
    by_cases h : y = a,
    { rw h, exact f_lim.mono ts },
    { have : y ∈ s := sab ⟨lt_of_le_of_ne hy.1 (ne.symm h), hy.2⟩,
      exact (f_diff.continuous_on y this).mono ts } },
  have t_diff' : tendsto (λx, fderiv ℝ f x) (𝓝[t] a) (𝓝 (smul_right 1 e)),
  { simp only [deriv_fderiv.symm],
    exact tendsto.comp
      (is_bounded_bilinear_map_smul_right : is_bounded_bilinear_map ℝ _)
        .continuous_right.continuous_at
      (tendsto_nhds_within_mono_left Ioo_subset_Ioi_self f_lim'), },
lemma has_deriv_at_interval_right_endpoint_of_tendsto_deriv {s : set ℝ} {e : E} {a : ℝ} {f : ℝ → E}
  (f_diff : differentiable_on ℝ f s) (f_lim : continuous_within_at f s a)
  (hs : s ∈ 𝓝[<] a)
  (f_lim' : tendsto (λx, deriv f x) (𝓝[<] a) (𝓝 e)) :
  has_deriv_within_at f e (Iic a) a :=
begin
  obtain ⟨b, ba, sab⟩ : ∃ b ∈ Iio a, Ico b a ⊆ s :=
    mem_nhds_within_Iio_iff_exists_Ico_subset.1 hs,
  let t := Ioo b a,
  have ts : t ⊆ s := subset.trans Ioo_subset_Ico_self sab,
  have t_diff : differentiable_on ℝ f t := f_diff.mono ts,
  have t_conv : convex ℝ t := convex_Ioo b a,
  have t_open : is_open t := is_open_Ioo,
  have t_closure : closure t = Icc b a := closure_Ioo (ne_of_lt ba),
  have t_cont : ∀y ∈ closure t, continuous_within_at f t y,
  { rw t_closure,
    assume y hy,
    by_cases h : y = a,
    { rw h, exact f_lim.mono ts },
    { have : y ∈ s := sab ⟨hy.1, lt_of_le_of_ne hy.2 h⟩,
      exact (f_diff.continuous_on y this).mono ts } },
  have t_diff' : tendsto (λx, fderiv ℝ f x) (𝓝[t] a) (𝓝 (smul_right 1 e)),
  { simp only [deriv_fderiv.symm],
    exact tendsto.comp
      (is_bounded_bilinear_map_smul_right : is_bounded_bilinear_map ℝ _)
        .continuous_right.continuous_at
      (tendsto_nhds_within_mono_left Ioo_subset_Iio_self f_lim'), },
lemma has_deriv_at_of_has_deriv_at_of_ne {f g : ℝ → E} {x : ℝ}
  (f_diff : ∀ y ≠ x, has_deriv_at f (g y) y)
  (hf : continuous_at f x) (hg : continuous_at g x) :
  has_deriv_at f (g x) x :=
begin
  have A : has_deriv_within_at f (g x) (Ici x) x,
  { have diff : differentiable_on ℝ f (Ioi x) :=
      λy hy, (f_diff y (ne_of_gt hy)).differentiable_at.differentiable_within_at,
lemma has_deriv_at_of_has_deriv_at_of_ne' {f g : ℝ → E} {x : ℝ}
  (f_diff : ∀ y ≠ x, has_deriv_at f (g y) y)
  (hf : continuous_at f x) (hg : continuous_at g x) (y : ℝ) :
  has_deriv_at f (g y) y :=
begin
  rcases eq_or_ne y x with rfl|hne,
  { exact has_deriv_at_of_has_deriv_at_of_ne f_diff hf hg },
  { exact f_diff y hne }
end
