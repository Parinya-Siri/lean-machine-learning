import category_theory.category.preorder
import category_theory.isomorphism_classes
import category_theory.thin
universes v‚ÇÅ v‚ÇÇ v‚ÇÉ u‚ÇÅ u‚ÇÇ u‚ÇÉ
namespace category_theory
open category
variables (C : Type u‚ÇÅ) [category.{v‚ÇÅ} C]
variables (D : Type u‚ÇÇ) [category.{v‚ÇÇ} D]
variables {E : Type u‚ÇÉ} [category.{v‚ÇÉ} E]
def skeletal : Prop := ‚àÄ ‚¶ÉX Y : C‚¶Ñ, is_isomorphic X Y ‚Üí X = Y
structure is_skeleton_of (F : D ‚•§ C) :=
(skel : skeletal D)
(eqv : is_equivalence F)
local attribute [instance] is_isomorphic_setoid
variables {C D}
lemma functor.eq_of_iso {F‚ÇÅ F‚ÇÇ : D ‚•§ C} [‚àÄ X Y : C, subsingleton (X ‚ü∂ Y)] (hC : skeletal C)
  (hF : F‚ÇÅ ‚âÖ F‚ÇÇ) : F‚ÇÅ = F‚ÇÇ :=
functor.ext (Œª X, hC ‚ü®hF.app X‚ü©) (Œª _ _ _, subsingleton.elim _ _)
lemma functor_skeletal [‚àÄ X Y : C, subsingleton (X ‚ü∂ Y)] (hC : skeletal C) : skeletal (D ‚•§ C) :=
Œª F‚ÇÅ F‚ÇÇ h, h.elim (functor.eq_of_iso hC)
variables (C D)
@[derive category]
def skeleton : Type u‚ÇÅ := induced_category C quotient.out
instance [inhabited C] : inhabited (skeleton C) := ‚ü®‚ü¶default‚üß‚ü©
@[simps, derive [full, faithful]]
noncomputable def from_skeleton : skeleton C ‚•§ C := induced_functor _
instance : ess_surj (from_skeleton C) :=
{ mem_ess_image := Œª X, ‚ü®quotient.mk X, quotient.mk_out X‚ü© }
noncomputable instance : is_equivalence (from_skeleton C) :=
equivalence.of_fully_faithfully_ess_surj (from_skeleton C)
noncomputable def skeleton_equivalence : skeleton C ‚âå C :=
(from_skeleton C).as_equivalence
lemma skeleton_skeletal : skeletal (skeleton C) :=
begin
  rintro X Y ‚ü®h‚ü©,
  have : X.out ‚âà Y.out := ‚ü®(from_skeleton C).map_iso h‚ü©,
  simpa using quotient.sound this,
end
noncomputable def skeleton_is_skeleton : is_skeleton_of C (skeleton C) (from_skeleton C) :=
{ skel := skeleton_skeletal C,
  eqv := from_skeleton.is_equivalence C }
section
variables {C D}
noncomputable
def equivalence.skeleton_equiv (e : C ‚âå D) : skeleton C ‚âÉ skeleton D :=
let f := ((skeleton_equivalence C).trans e).trans (skeleton_equivalence D).symm in
{ to_fun := f.functor.obj,
  inv_fun := f.inverse.obj,
  left_inv := Œª X, skeleton_skeletal C ‚ü®(f.unit_iso.app X).symm‚ü©,
  right_inv := Œª Y, skeleton_skeletal D ‚ü®(f.counit_iso.app Y)‚ü©, }
end
def thin_skeleton : Type u‚ÇÅ := quotient (is_isomorphic_setoid C)
instance inhabited_thin_skeleton [inhabited C] : inhabited (thin_skeleton C) :=
‚ü®quotient.mk default‚ü©
instance thin_skeleton.preorder : preorder (thin_skeleton C) :=
{ le := quotient.lift‚ÇÇ (Œª X Y, nonempty (X ‚ü∂ Y))
  begin
    rintros _ _ _ _ ‚ü®i‚ÇÅ‚ü© ‚ü®i‚ÇÇ‚ü©,
    exact propext ‚ü®nonempty.map (Œª f, i‚ÇÅ.inv ‚â´ f ‚â´ i‚ÇÇ.hom),
      nonempty.map (Œª f, i‚ÇÅ.hom ‚â´ f ‚â´ i‚ÇÇ.inv)‚ü©,
  end,
  le_refl :=
  begin
    refine quotient.ind (Œª a, _),
    exact ‚ü®ùüô _‚ü©,
  end,
  le_trans := Œª a b c, quotient.induction_on‚ÇÉ a b c $ Œª A B C, nonempty.map2 (‚â´) }
@[simps]
def to_thin_skeleton : C ‚•§ thin_skeleton C :=
{ obj := quotient.mk,
  map := Œª X Y f, hom_of_le (nonempty.intro f) }
namespace thin_skeleton
instance thin {X Y : thin_skeleton C} : subsingleton (X ‚ü∂ Y) :=
‚ü®by { rintros ‚ü®‚ü®f‚ÇÅ‚ü©‚ü© ‚ü®‚ü®f‚ÇÇ‚ü©‚ü©, refl }‚ü©
variables {C} {D}
@[simps]
def map (F : C ‚•§ D) : thin_skeleton C ‚•§ thin_skeleton D :=
{ obj := quotient.map F.obj $ Œª X‚ÇÅ X‚ÇÇ ‚ü®hX‚ü©, ‚ü®F.map_iso hX‚ü©,
  map := Œª X Y, quotient.rec_on_subsingleton‚ÇÇ X Y $
           Œª x y k, hom_of_le (k.le.elim (Œª t, ‚ü®F.map t‚ü©)) }
lemma comp_to_thin_skeleton (F : C ‚•§ D) : F ‚ãô to_thin_skeleton D = to_thin_skeleton C ‚ãô map F :=
rfl
def map_nat_trans {F‚ÇÅ F‚ÇÇ : C ‚•§ D} (k : F‚ÇÅ ‚ü∂ F‚ÇÇ) : map F‚ÇÅ ‚ü∂ map F‚ÇÇ :=
{ app := Œª X, quotient.rec_on_subsingleton X (Œª x, ‚ü®‚ü®‚ü®k.app x‚ü©‚ü©‚ü©) }
@[simps]
def map‚ÇÇ (F : C ‚•§ D ‚•§ E) :
  thin_skeleton C ‚•§ thin_skeleton D ‚•§ thin_skeleton E :=
{ obj := Œª x,
  { obj := Œª y, quotient.map‚ÇÇ (Œª X Y, (F.obj X).obj Y)
                (Œª X‚ÇÅ X‚ÇÇ ‚ü®hX‚ü© Y‚ÇÅ Y‚ÇÇ ‚ü®hY‚ü©, ‚ü®(F.obj X‚ÇÅ).map_iso hY ‚â™‚â´ (F.map_iso hX).app Y‚ÇÇ‚ü©) x y,
    map := Œª y‚ÇÅ y‚ÇÇ, quotient.rec_on_subsingleton x $
            Œª X, quotient.rec_on_subsingleton‚ÇÇ y‚ÇÅ y‚ÇÇ $
              Œª Y‚ÇÅ Y‚ÇÇ hY, hom_of_le (hY.le.elim (Œª g, ‚ü®(F.obj X).map g‚ü©)) },
  map := Œª x‚ÇÅ x‚ÇÇ, quotient.rec_on_subsingleton‚ÇÇ x‚ÇÅ x‚ÇÇ $
           Œª X‚ÇÅ X‚ÇÇ f,
           { app := Œª y, quotient.rec_on_subsingleton y
              (Œª Y, hom_of_le (f.le.elim (Œª f', ‚ü®(F.map f').app Y‚ü©))) } }
variables (C)
section
variables [‚àÄ X Y : C, subsingleton (X ‚ü∂ Y)]
instance to_thin_skeleton_faithful : faithful (to_thin_skeleton C) := {}
@[simps]
noncomputable def from_thin_skeleton : thin_skeleton C ‚•§ C :=
{ obj := quotient.out,
  map := Œª x y, quotient.rec_on_subsingleton‚ÇÇ x y $
    Œª X Y f,
            (nonempty.some (quotient.mk_out X)).hom
          ‚â´ f.le.some
          ‚â´ (nonempty.some (quotient.mk_out Y)).inv }
noncomputable instance from_thin_skeleton_equivalence : is_equivalence (from_thin_skeleton C) :=
{ inverse := to_thin_skeleton C,
  counit_iso := nat_iso.of_components (Œª X, (nonempty.some (quotient.mk_out X))) (by tidy),
  unit_iso :=
    nat_iso.of_components
      (Œª x, quotient.rec_on_subsingleton x
        (Œª X, eq_to_iso (quotient.sound ‚ü®(nonempty.some (quotient.mk_out X)).symm‚ü©)))
      (by tidy) }
noncomputable def equivalence : thin_skeleton C ‚âå C :=
(from_thin_skeleton C).as_equivalence
variables {C}
lemma equiv_of_both_ways {X Y : C} (f : X ‚ü∂ Y) (g : Y ‚ü∂ X) : X ‚âà Y :=
‚ü®iso_of_both_ways f g‚ü©
instance thin_skeleton_partial_order : partial_order (thin_skeleton C) :=
{ le_antisymm := quotient.ind‚ÇÇ
  begin
    rintros _ _ ‚ü®f‚ü© ‚ü®g‚ü©,
    apply quotient.sound (equiv_of_both_ways f g),
  end,
  ..category_theory.thin_skeleton.preorder C }
lemma skeletal : skeletal (thin_skeleton C) :=
Œª X Y, quotient.induction_on‚ÇÇ X Y $ Œª x y h, h.elim $ Œª i, i.1.le.antisymm i.2.le
lemma map_comp_eq (F : E ‚•§ D) (G : D ‚•§ C) : map (F ‚ãô G) = map F ‚ãô map G :=
functor.eq_of_iso skeletal $
  nat_iso.of_components (Œª X, quotient.rec_on_subsingleton X (Œª x, iso.refl _)) (by tidy)
lemma map_id_eq : map (ùü≠ C) = ùü≠ (thin_skeleton C) :=
functor.eq_of_iso skeletal $
  nat_iso.of_components (Œª X, quotient.rec_on_subsingleton X (Œª x, iso.refl _)) (by tidy)
lemma map_iso_eq {F‚ÇÅ F‚ÇÇ : D ‚•§ C} (h : F‚ÇÅ ‚âÖ F‚ÇÇ) : map F‚ÇÅ = map F‚ÇÇ :=
functor.eq_of_iso skeletal { hom := map_nat_trans h.hom, inv := map_nat_trans h.inv }
noncomputable def thin_skeleton_is_skeleton : is_skeleton_of C (thin_skeleton C)
  (from_thin_skeleton C) :=
{ skel := skeletal,
  eqv := thin_skeleton.from_thin_skeleton_equivalence C }
noncomputable instance is_skeleton_of_inhabited :
  inhabited (is_skeleton_of C (thin_skeleton C) (from_thin_skeleton C)) :=
‚ü®thin_skeleton_is_skeleton‚ü©
end
variables {C}
def lower_adjunction
  (R : D ‚•§ C) (L : C ‚•§ D) (h : L ‚ä£ R) :
  thin_skeleton.map L ‚ä£ thin_skeleton.map R :=
adjunction.mk_of_unit_counit
{ unit :=
  { app := Œª X,
    begin
      letI := is_isomorphic_setoid C,
      refine quotient.rec_on_subsingleton X (Œª x, hom_of_le ‚ü®h.unit.app x‚ü©),
noncomputable
def equivalence.thin_skeleton_order_iso
  [‚àÄ X Y : C, subsingleton (X ‚ü∂ Y)] (e : C ‚âå Œ±) : thin_skeleton C ‚âÉo Œ± :=
((thin_skeleton.equivalence C).trans e).to_order_iso
end
end category_theory
