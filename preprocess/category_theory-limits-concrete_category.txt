import category_theory.limits.preserves.basic
import category_theory.limits.types
import category_theory.limits.shapes.wide_pullbacks
import category_theory.limits.shapes.multiequalizer
import category_theory.concrete_category.elementwise
universes w v u
open category_theory
namespace category_theory.limits
local attribute [instance] concrete_category.has_coe_to_fun concrete_category.has_coe_to_sort
section limits
variables {C : Type u} [category.{v} C] [concrete_category.{(max w v)} C]
  {J : Type w} [small_category J] (F : J ‚•§ C) [preserves_limit F (forget C)]
lemma concrete.to_product_injective_of_is_limit {D : cone F} (hD : is_limit D) :
  function.injective (Œª (x : D.X) (j : J), D.œÄ.app j x) :=
begin
  let E := (forget C).map_cone D,
  let hE : is_limit E := is_limit_of_preserves _ hD,
  let G := types.limit_cone.{w v} (F ‚ãô forget C),
  let hG := types.limit_cone_is_limit.{w v} (F ‚ãô forget C),
  let T : E.X ‚âÖ G.X := hE.cone_point_unique_up_to_iso hG,
  change function.injective (T.hom ‚â´ (Œª x j, G.œÄ.app j x)),
  have h : function.injective T.hom,
  { intros a b h,
    suffices : T.inv (T.hom a) = T.inv (T.hom b), by simpa,
    rw h },
  suffices : function.injective (Œª (x : G.X) j, G.œÄ.app j x),
    by exact this.comp h,
  apply subtype.ext,
end
lemma concrete.is_limit_ext {D : cone F} (hD : is_limit D) (x y : D.X) :
  (‚àÄ j, D.œÄ.app j x = D.œÄ.app j y) ‚Üí x = y :=
Œª h, concrete.to_product_injective_of_is_limit _ hD (funext h)
lemma concrete.limit_ext [has_limit F] (x y : limit F) :
  (‚àÄ j, limit.œÄ F j x = limit.œÄ F j y) ‚Üí x = y :=
concrete.is_limit_ext F (limit.is_limit _) _ _
section wide_pullback
open wide_pullback
open wide_pullback_shape
lemma concrete.wide_pullback_ext {B : C} {Œπ : Type w} {X : Œπ ‚Üí C} (f : Œ† j : Œπ, X j ‚ü∂ B)
  [has_wide_pullback B X f] [preserves_limit (wide_cospan B X f) (forget C)]
  (x y : wide_pullback B X f) (h‚ÇÄ : base f x = base f y)
  (h : ‚àÄ j, œÄ f j x = œÄ f j y) : x = y :=
begin
  apply concrete.limit_ext,
  rintro (_|j),
  { exact h‚ÇÄ },
  { apply h }
end
lemma concrete.wide_pullback_ext' {B : C} {Œπ : Type w} [nonempty Œπ]
  {X : Œπ ‚Üí C} (f : Œ† j : Œπ, X j ‚ü∂ B) [has_wide_pullback.{w} B X f]
  [preserves_limit (wide_cospan B X f) (forget C)]
  (x y : wide_pullback B X f) (h : ‚àÄ j, œÄ f j x = œÄ f j y) : x = y :=
begin
  apply concrete.wide_pullback_ext _ _ _ _ h,
  inhabit Œπ,
  simp only [‚Üê œÄ_arrow f (arbitrary _), comp_apply, h],
end
end wide_pullback
section multiequalizer
lemma concrete.multiequalizer_ext {I : multicospan_index.{w} C} [has_multiequalizer I]
  [preserves_limit I.multicospan (forget C)] (x y : multiequalizer I)
  (h : ‚àÄ (t : I.L), multiequalizer.Œπ I t x = multiequalizer.Œπ I t y) : x = y :=
begin
  apply concrete.limit_ext,
  rintros (a|b),
  { apply h },
  { rw [‚Üê limit.w I.multicospan (walking_multicospan.hom.fst b),
      comp_apply, comp_apply, h] }
end
def concrete.multiequalizer_equiv_aux (I : multicospan_index C) :
  (I.multicospan ‚ãô (forget C)).sections ‚âÉ
  { x : Œ† (i : I.L), I.left i // ‚àÄ (i : I.R), I.fst i (x _) = I.snd i (x _) } :=
{ to_fun := Œª x, ‚ü®Œª i, x.1 (walking_multicospan.left _), Œª i, begin
    have a := x.2 (walking_multicospan.hom.fst i),
    have b := x.2 (walking_multicospan.hom.snd i),
    rw ‚Üê b at a,
    exact a,
  end‚ü©,
  inv_fun := Œª x,
  { val := Œª j,
    match j with
    | walking_multicospan.left a := x.1 _
    | walking_multicospan.right b := I.fst b (x.1 _)
    end,
    property := begin
      rintros (a|b) (a'|b') (f|f|f),
      { change (I.multicospan.map (ùüô _)) _ = _, simp },
      { refl },
      { dsimp, erw ‚Üê x.2 b', refl },
      { change (I.multicospan.map (ùüô _)) _ = _, simp },
    end },
  left_inv := begin
    intros x, ext (a|b),
    { refl },
    { change _ = x.val _,
      rw ‚Üê x.2 (walking_multicospan.hom.fst b),
      refl }
  end,
  right_inv := by { intros x, ext i, refl } }
noncomputable
def concrete.multiequalizer_equiv (I : multicospan_index.{w} C) [has_multiequalizer I]
  [preserves_limit I.multicospan (forget C)] : (multiequalizer I : C) ‚âÉ
    { x : Œ† (i : I.L), I.left i // ‚àÄ (i : I.R), I.fst i (x _) = I.snd i (x _) } :=
let h1 := (limit.is_limit I.multicospan),
    h2 := (is_limit_of_preserves (forget C) h1),
    E := h2.cone_point_unique_up_to_iso (types.limit_cone_is_limit _) in
equiv.trans E.to_equiv (concrete.multiequalizer_equiv_aux I)
@[simp]
lemma concrete.multiequalizer_equiv_apply (I : multicospan_index.{w} C) [has_multiequalizer I]
  [preserves_limit I.multicospan (forget C)] (x : multiequalizer I) (i : I.L) :
  ((concrete.multiequalizer_equiv I) x : Œ† (i : I.L), I.left i) i = multiequalizer.Œπ I i x := rfl
end multiequalizer
