import data.nat.basic
namespace nat
@[reducible]
def upto (p : ℕ → Prop) : Type := {i : ℕ // ∀ j < i, ¬ p j}
namespace upto
variable {p : ℕ → Prop}
protected def gt (p) (x y : upto p) : Prop := x.1 > y.1
instance : has_lt (upto p) := ⟨λ x y, x.1 < y.1⟩
protected lemma wf : (∃ x, p x) → well_founded (upto.gt p)
| ⟨x, h⟩ := begin
  suffices : upto.gt p = measure (λ y : nat.upto p, x - y.val),
  { rw this, apply measure_wf },
  ext ⟨a, ha⟩ ⟨b, _⟩,
  dsimp [measure, inv_image, upto.gt],
  rw tsub_lt_tsub_iff_left_of_le,
  exact le_of_not_lt (λ h', ha _ h' h),
end
def zero : nat.upto p := ⟨0, λ j h, false.elim (nat.not_lt_zero _ h)⟩
def succ (x : nat.upto p) (h : ¬ p x.val) : nat.upto p :=
⟨x.val.succ, λ j h', begin
  rcases nat.lt_succ_iff_lt_or_eq.1 h' with h' | rfl;
  [exact x.2 _ h', exact h]
end⟩
end upto
end nat
