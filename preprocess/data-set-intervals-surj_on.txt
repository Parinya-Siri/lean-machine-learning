import data.set.intervals.basic
import data.set.function
variables {α : Type*} {β : Type*} [linear_order α] [partial_order β] {f : α → β}
open set function order_dual (to_dual)
lemma surj_on_Ioo_of_monotone_surjective
  (h_mono : monotone f) (h_surj : function.surjective f) (a b : α) :
  surj_on f (Ioo a b) (Ioo (f a) (f b)) :=
begin
  intros p hp,
  rcases h_surj p with ⟨x, rfl⟩,
  refine ⟨x, mem_Ioo.2 _, rfl⟩,
  contrapose! hp,
  exact λ h, h.2.not_le (h_mono $ hp $ h_mono.reflect_lt h.1)
end
lemma surj_on_Ico_of_monotone_surjective
  (h_mono : monotone f) (h_surj : function.surjective f) (a b : α) :
  surj_on f (Ico a b) (Ico (f a) (f b)) :=
begin
  obtain hab | hab := lt_or_le a b,
  { intros p hp,
    rcases eq_left_or_mem_Ioo_of_mem_Ico hp with rfl|hp',
    { exact mem_image_of_mem f (left_mem_Ico.mpr hab) },
    { have := surj_on_Ioo_of_monotone_surjective h_mono h_surj a b hp',
      exact image_subset f Ioo_subset_Ico_self this } },
  { rw Ico_eq_empty (h_mono hab).not_lt,
    exact surj_on_empty f _ }
end
lemma surj_on_Ioc_of_monotone_surjective
  (h_mono : monotone f) (h_surj : function.surjective f) (a b : α) :
  surj_on f (Ioc a b) (Ioc (f a) (f b)) :=
by simpa using surj_on_Ico_of_monotone_surjective h_mono.dual h_surj (to_dual b) (to_dual a)
