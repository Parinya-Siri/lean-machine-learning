import data.fin.tuple
import data.real.basic
import combinatorics.pigeonhole
import algebra.order.euclidean_absolute_value
local infix ` ≺ `:50 := euclidean_domain.r
namespace absolute_value
variables {R : Type*} [euclidean_domain R]
variables (abv : absolute_value R ℤ)
structure is_admissible extends is_euclidean abv :=
(card : ℝ → ℕ)
(exists_partition' : ∀ (n : ℕ) {ε : ℝ} (hε : 0 < ε) {b : R} (hb : b ≠ 0) (A : fin n → R),
                     ∃ (t : fin n → fin (card ε)),
                     ∀ i₀ i₁, t i₀ = t i₁ → (abv (A i₁ % b - A i₀ % b) : ℝ) < abv b • ε)
attribute [protected] is_admissible.card
namespace is_admissible
variables {abv}
lemma exists_partition {ι : Type*} [fintype ι] {ε : ℝ} (hε : 0 < ε) {b : R} (hb : b ≠ 0)
  (A : ι → R) (h : abv.is_admissible) :
  ∃ (t : ι → fin (h.card ε)),
  ∀ i₀ i₁, t i₀ = t i₁ → (abv (A i₁ % b - A i₀ % b) : ℝ) < abv b • ε :=
begin
  let e := fintype.equiv_fin ι,
  obtain ⟨t, ht⟩ := h.exists_partition' (fintype.card ι) hε hb (A ∘ e.symm),
  refine ⟨t ∘ e, λ i₀ i₁ h, _⟩,
  convert ht (e i₀) (e i₁) h; simp only [e.symm_apply_apply]
end
lemma exists_approx_aux (n : ℕ) (h : abv.is_admissible) :
  ∀ {ε : ℝ} (hε : 0 < ε) {b : R} (hb : b ≠ 0) (A : fin (h.card ε ^ n).succ → (fin n → R)),
  ∃ (i₀ i₁), (i₀ ≠ i₁) ∧ ∀ k, (abv (A i₁ k % b - A i₀ k % b) : ℝ) < abv b • ε :=
begin
  haveI := classical.dec_eq R,
  induction n with n ih,
  { intros ε hε b hb A,
    refine ⟨0, 1, _, _⟩,
    { simp },
    rintros ⟨i, ⟨⟩⟩ },
  intros ε hε b hb A,
  set M := h.card ε with hM,
lemma exists_approx {ι : Type*} [fintype ι] {ε : ℝ} (hε : 0 < ε) {b : R} (hb : b ≠ 0)
  (h : abv.is_admissible)
  (A : fin (h.card ε ^ fintype.card ι).succ → ι → R) :
  ∃ (i₀ i₁), (i₀ ≠ i₁) ∧ ∀ k, (abv (A i₁ k % b - A i₀ k % b) : ℝ) < abv b • ε :=
begin
  let e := fintype.equiv_fin ι,
  obtain ⟨i₀, i₁, ne, h⟩ := h.exists_approx_aux (fintype.card ι) hε hb (λ x y, A x (e.symm y)),
  refine ⟨i₀, i₁, ne, λ k, _⟩,
  convert h (e k); simp only [e.symm_apply_apply]
end
end is_admissible
end absolute_value
