import analysis.normed.group.hom
import category_theory.limits.shapes.zero_morphisms
import category_theory.concrete_category.bundled_hom
import category_theory.elementwise
noncomputable theory
universes u
open category_theory
def SemiNormedGroup : Type (u+1) := bundled semi_normed_group
namespace SemiNormedGroup
instance bundled_hom : bundled_hom @normed_group_hom :=
‚ü®@normed_group_hom.to_fun, @normed_group_hom.id, @normed_group_hom.comp, @normed_group_hom.coe_inj‚ü©
attribute [derive [large_category, concrete_category]] SemiNormedGroup
instance : has_coe_to_sort SemiNormedGroup (Type u) := bundled.has_coe_to_sort
def of (M : Type u) [semi_normed_group M] : SemiNormedGroup := bundled.of M
instance (M : SemiNormedGroup) : semi_normed_group M := M.str
@[simp] lemma coe_of (V : Type u) [semi_normed_group V] : (SemiNormedGroup.of V : Type u) = V := rfl
@[simp] lemma coe_id (V : SemiNormedGroup) : ‚áë(ùüô V) = id := rfl
@[simp] lemma coe_comp {M N K : SemiNormedGroup} (f : M ‚ü∂ N) (g : N ‚ü∂ K) :
  ((f ‚â´ g) : M ‚Üí K) = g ‚àò f := rfl
instance : inhabited SemiNormedGroup := ‚ü®of punit‚ü©
instance of_unique (V : Type u) [semi_normed_group V] [i : unique V] :
  unique (SemiNormedGroup.of V) := i
instance : limits.has_zero_morphisms.{u (u+1)} SemiNormedGroup := {}
@[simp] lemma zero_apply {V W : SemiNormedGroup} (x : V) : (0 : V ‚ü∂ W) x = 0 := rfl
lemma is_zero_of_subsingleton (V : SemiNormedGroup) [subsingleton V] :
  limits.is_zero V :=
begin
  refine ‚ü®Œª X, ‚ü®‚ü®‚ü®0‚ü©, Œª f, _‚ü©‚ü©, Œª X, ‚ü®‚ü®‚ü®0‚ü©, Œª f, _‚ü©‚ü©‚ü©,
  { ext, have : x = 0 := subsingleton.elim _ _, simp only [this, map_zero], },
  { ext, apply subsingleton.elim }
end
instance has_zero_object : limits.has_zero_object SemiNormedGroup.{u} :=
‚ü®‚ü®of punit, is_zero_of_subsingleton _‚ü©‚ü©
lemma iso_isometry_of_norm_noninc {V W : SemiNormedGroup} (i : V ‚âÖ W)
  (h1 : i.hom.norm_noninc) (h2 : i.inv.norm_noninc) :
  isometry i.hom :=
begin
  apply add_monoid_hom_class.isometry_of_norm,
  intro v,
  apply le_antisymm (h1 v),
  calc ‚à•v‚à• = ‚à•i.inv (i.hom v)‚à• : by rw [iso.hom_inv_id_apply]
  ... ‚â§ ‚à•i.hom v‚à• : h2 _,
end
end SemiNormedGroup
def SemiNormedGroup‚ÇÅ : Type (u+1) := bundled semi_normed_group
namespace SemiNormedGroup‚ÇÅ
instance : has_coe_to_sort SemiNormedGroup‚ÇÅ (Type u) := bundled.has_coe_to_sort
instance : large_category.{u} SemiNormedGroup‚ÇÅ :=
{ hom := Œª X Y, { f : normed_group_hom X Y // f.norm_noninc },
  id := Œª X, ‚ü®normed_group_hom.id X, normed_group_hom.norm_noninc.id‚ü©,
  comp := Œª X Y Z f g, ‚ü®(g : normed_group_hom Y Z).comp (f : normed_group_hom X Y), g.2.comp f.2‚ü©, }
@[ext] lemma hom_ext {M N : SemiNormedGroup‚ÇÅ} (f g : M ‚ü∂ N) (w : (f : M ‚Üí N) = (g : M ‚Üí N)) :
  f = g :=
subtype.eq (normed_group_hom.ext (congr_fun w))
instance : concrete_category.{u} SemiNormedGroup‚ÇÅ :=
{ forget :=
  { obj := Œª X, X,
    map := Œª X Y f, f, },
  forget_faithful := {} }
def of (M : Type u) [semi_normed_group M] : SemiNormedGroup‚ÇÅ := bundled.of M
instance (M : SemiNormedGroup‚ÇÅ) : semi_normed_group M := M.str
def mk_hom {M N : SemiNormedGroup} (f : M ‚ü∂ N) (i : f.norm_noninc) :
  SemiNormedGroup‚ÇÅ.of M ‚ü∂ SemiNormedGroup‚ÇÅ.of N :=
‚ü®f, i‚ü©
@[simp] lemma mk_hom_apply {M N : SemiNormedGroup} (f : M ‚ü∂ N) (i : f.norm_noninc) (x) :
  mk_hom f i x = f x := rfl
@[simps]
def mk_iso {M N : SemiNormedGroup} (f : M ‚âÖ N) (i : f.hom.norm_noninc) (i' : f.inv.norm_noninc) :
  SemiNormedGroup‚ÇÅ.of M ‚âÖ SemiNormedGroup‚ÇÅ.of N :=
{ hom := mk_hom f.hom i,
  inv := mk_hom f.inv i',
  hom_inv_id' := by { apply subtype.eq, exact f.hom_inv_id, },
  inv_hom_id' := by { apply subtype.eq, exact f.inv_hom_id, }, }
instance : has_forget‚ÇÇ SemiNormedGroup‚ÇÅ SemiNormedGroup :=
{ forget‚ÇÇ :=
  { obj := Œª X, X,
    map := Œª X Y f, f.1, }, }
@[simp] lemma coe_of (V : Type u) [semi_normed_group V] : (SemiNormedGroup‚ÇÅ.of V : Type u) = V :=
rfl
@[simp] lemma coe_id (V : SemiNormedGroup‚ÇÅ) : ‚áë(ùüô V) = id := rfl
@[simp] lemma coe_comp {M N K : SemiNormedGroup‚ÇÅ} (f : M ‚ü∂ N) (g : N ‚ü∂ K) :
  ((f ‚â´ g) : M ‚Üí K) = g ‚àò f := rfl
