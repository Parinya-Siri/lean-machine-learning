import logic.function.basic
import tactic.core
namespace tactic
meta def mk_sometimes (u : level) (α nonemp p : expr) :
  list expr → expr × expr → tactic (expr × expr)
| [] (val, spec) := pure (val, spec)
| (e :: ctxt) (val, spec) := do
  (val, spec) ← mk_sometimes ctxt (val, spec),
  t ← infer_type e,
  b ← is_prop t,
  pure $ if b then
    let val' := expr.bind_lambda val e in
    (expr.const ``function.sometimes [level.zero, u] t α nonemp val',
     expr.const ``function.sometimes_spec [u] t α nonemp p val' e spec)
  else (val, spec)
meta def choose1 (nondep : bool) (h : expr) (data : name) (spec : name) :
  tactic (expr × option (option expr)) := do
  t ← infer_type h,
  (ctxt, t) ← whnf t >>= open_pis,
  t ← whnf t transparency.all,
  match t with
  | `(@Exists %%α %%p) := do
    α_t ← infer_type α,
    expr.sort u ← whnf α_t transparency.all,
    (ne_fail, nonemp) ← if nondep then do
      let ne := expr.const ``nonempty [u] α,
      nonemp ← try_core (mk_instance ne <|> retrieve' (do
        m ← mk_meta_var ne,
        set_goals [m],
        ctxt.mmap' (λ e, do
          b ← is_proof e,
          monad.unlessb b $
            (mk_app ``nonempty.intro [e] >>= note_anon none) $> ()),
        reset_instance_cache,
        apply_instance,
        instantiate_mvars m)),
      pure (some (option.guard (λ _, nonemp.is_none) ne), nonemp)
    else pure (none, none),
    ctxt' ← if nonemp.is_some then ctxt.mfilter (λ e, bnot <$> is_proof e) else pure ctxt,
    value ← mk_local_def data (α.pis ctxt'),
    t' ← head_beta (p.app (value.mk_app ctxt')),
    spec ← mk_local_def spec (t'.pis ctxt),
    (value_proof, spec_proof) ← nonemp.elim pure (λ nonemp, mk_sometimes u α nonemp p ctxt)
      (expr.const ``classical.some [u] α p (h.mk_app ctxt),
       expr.const ``classical.some_spec [u] α p (h.mk_app ctxt)),
    dependent_pose_core [(value, value_proof.lambdas ctxt'), (spec, spec_proof.lambdas ctxt)],
    try (tactic.clear h),
    intro1,
    e ← intro1,
    pure (e, ne_fail)
  | `(%%p ∧ %%q) := do
    mk_app ``and.elim_left [h.mk_app ctxt] >>= lambdas ctxt >>= note data none,
    hq ← mk_app ``and.elim_right [h.mk_app ctxt] >>= lambdas ctxt >>= note spec none,
    try (tactic.clear h),
    pure (hq, none)
  | _ := fail "expected a term of the shape `∀xs, ∃a, p xs a` or `∀xs, p xs ∧ q xs`"
  end
meta def choose (nondep : bool) : expr → list name →
  opt_param (option (option expr)) none → tactic unit
| h [] _ := fail "expect list of variables"
| h [n] (some (some ne)) := do
meta def choose (nondep : parse (tk "!")?) (first : parse ident) (names : parse ident*)
  (tgt : parse (tk "using" *> texpr)?) : tactic unit := do
tgt ← match tgt with
  | none := get_local `this
  | some e := tactic.i_to_expr_strict e
  end,
tactic.choose nondep.is_some tgt (first :: names),
try (interactive.simp none none tt [simp_arg_type.expr
  ``(exists_prop)] [] (loc.ns $ some <$> names)),
try (tactic.clear tgt)
add_tactic_doc
{ name       := "choose",
  category   := doc_category.tactic,
  decl_names := [`tactic.interactive.choose],
  tags       := ["classical logic"] }
end interactive
end tactic
