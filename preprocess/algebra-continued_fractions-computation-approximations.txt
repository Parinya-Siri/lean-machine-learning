import algebra.continued_fractions.computation.correctness_terminating
import data.nat.fib
import tactic.solve_by_elim
namespace generalized_continued_fraction
open generalized_continued_fraction (of) int
variables {K : Type*} {v : K} {n : ℕ} [linear_ordered_field K] [floor_ring K]
namespace int_fract_pair
lemma nth_stream_fr_nonneg_lt_one {ifp_n : int_fract_pair K}
  (nth_stream_eq : int_fract_pair.stream v n = some ifp_n) :
  0 ≤ ifp_n.fr ∧ ifp_n.fr < 1 :=
begin
  cases n,
  case nat.zero
  { have : int_fract_pair.of v = ifp_n, by injection nth_stream_eq,
    rw [←this, int_fract_pair.of],
    exact ⟨fract_nonneg _, fract_lt_one _⟩ },
  case nat.succ
  { rcases (succ_nth_stream_eq_some_iff.elim_left nth_stream_eq) with ⟨_, _, _, ifp_of_eq_ifp_n⟩,
    rw [←ifp_of_eq_ifp_n, int_fract_pair.of],
    exact ⟨fract_nonneg _, fract_lt_one _⟩ }
end
lemma nth_stream_fr_nonneg {ifp_n : int_fract_pair K}
  (nth_stream_eq : int_fract_pair.stream v n = some ifp_n) :
  0 ≤ ifp_n.fr :=
(nth_stream_fr_nonneg_lt_one nth_stream_eq).left
lemma nth_stream_fr_lt_one {ifp_n : int_fract_pair K}
  (nth_stream_eq : int_fract_pair.stream v n = some ifp_n) :
  ifp_n.fr < 1 :=
(nth_stream_fr_nonneg_lt_one nth_stream_eq).right
lemma one_le_succ_nth_stream_b {ifp_succ_n : int_fract_pair K}
  (succ_nth_stream_eq : int_fract_pair.stream v (n + 1) = some ifp_succ_n) :
  1 ≤ ifp_succ_n.b :=
begin
  obtain ⟨ifp_n, nth_stream_eq, stream_nth_fr_ne_zero, ⟨-⟩⟩ :
    ∃ ifp_n, int_fract_pair.stream v n = some ifp_n ∧ ifp_n.fr ≠ 0
    ∧ int_fract_pair.of ifp_n.fr⁻¹ = ifp_succ_n, from
      succ_nth_stream_eq_some_iff.elim_left succ_nth_stream_eq,
  suffices : 1 ≤ ifp_n.fr⁻¹, { rw_mod_cast [le_floor], assumption },
  suffices : ifp_n.fr ≤ 1,
  { have h : 0 < ifp_n.fr, from
      lt_of_le_of_ne (nth_stream_fr_nonneg nth_stream_eq) stream_nth_fr_ne_zero.symm,
    apply one_le_inv h this },
  simp only [le_of_lt (nth_stream_fr_lt_one nth_stream_eq)]
end
lemma succ_nth_stream_b_le_nth_stream_fr_inv {ifp_n ifp_succ_n : int_fract_pair K}
  (nth_stream_eq : int_fract_pair.stream v n = some ifp_n)
  (succ_nth_stream_eq : int_fract_pair.stream v (n + 1) = some ifp_succ_n) :
  (ifp_succ_n.b : K) ≤ ifp_n.fr⁻¹ :=
begin
  suffices : (⌊ifp_n.fr⁻¹⌋ : K) ≤ ifp_n.fr⁻¹,
  { cases ifp_n with _ ifp_n_fr,
    have : ifp_n_fr ≠ 0,
    { intro h, simpa [h, int_fract_pair.stream, nth_stream_eq] using succ_nth_stream_eq },
    have : int_fract_pair.of ifp_n_fr⁻¹ = ifp_succ_n,
    { simpa [this, int_fract_pair.stream, nth_stream_eq, option.coe_def] using succ_nth_stream_eq },
    rwa ←this },
  exact (floor_le ifp_n.fr⁻¹)
end
end int_fract_pair
lemma of_one_le_nth_part_denom {b : K}
  (nth_part_denom_eq : (of v).partial_denominators.nth n = some b) :
  1 ≤ b :=
begin
  obtain ⟨gp_n,  nth_s_eq, ⟨-⟩⟩ : ∃ gp_n, (of v).s.nth n = some gp_n ∧ gp_n.b = b, from
    exists_s_b_of_part_denom nth_part_denom_eq,
  obtain ⟨ifp_n, succ_nth_stream_eq, ifp_n_b_eq_gp_n_b⟩ :
    ∃ ifp, int_fract_pair.stream v (n + 1) = some ifp ∧ (ifp.b : K) = gp_n.b, from
      int_fract_pair.exists_succ_nth_stream_of_gcf_of_nth_eq_some nth_s_eq,
  rw [←ifp_n_b_eq_gp_n_b],
  exact_mod_cast (int_fract_pair.one_le_succ_nth_stream_b succ_nth_stream_eq)
end
lemma of_part_num_eq_one_and_exists_int_part_denom_eq {gp : generalized_continued_fraction.pair K}
  (nth_s_eq : (of v).s.nth n = some gp) :
  gp.a = 1 ∧ ∃ (z : ℤ), gp.b = (z : K) :=
begin
  obtain ⟨ifp, stream_succ_nth_eq, -⟩ :
    ∃ ifp, int_fract_pair.stream v (n + 1) = some ifp ∧ _,
      from int_fract_pair.exists_succ_nth_stream_of_gcf_of_nth_eq_some nth_s_eq,
  have : gp = ⟨1, ifp.b⟩, by
  { have : (of v).s.nth n = some ⟨1, ifp.b⟩, from
      nth_of_eq_some_of_succ_nth_int_fract_pair_stream stream_succ_nth_eq,
    have : some gp = some ⟨1, ifp.b⟩, by rwa nth_s_eq at this,
    injection this },
  simp [this],
end
lemma of_part_num_eq_one {a : K} (nth_part_num_eq : (of v).partial_numerators.nth n = some a) :
  a = 1 :=
begin
  obtain ⟨gp, nth_s_eq, gp_a_eq_a_n⟩ : ∃ gp, (of v).s.nth n = some gp ∧ gp.a = a, from
    exists_s_a_of_part_num nth_part_num_eq,
  have : gp.a = 1, from (of_part_num_eq_one_and_exists_int_part_denom_eq nth_s_eq).left,
  rwa gp_a_eq_a_n at this
end
lemma exists_int_eq_of_part_denom {b : K}
  (nth_part_denom_eq : (of v).partial_denominators.nth n = some b) :
  ∃ (z : ℤ), b = (z : K) :=
begin
  obtain ⟨gp, nth_s_eq, gp_b_eq_b_n⟩ : ∃ gp, (of v).s.nth n = some gp ∧ gp.b = b, from
    exists_s_b_of_part_denom nth_part_denom_eq,
  have : ∃ (z : ℤ), gp.b = (z : K), from
    (of_part_num_eq_one_and_exists_int_part_denom_eq nth_s_eq).right,
  rwa gp_b_eq_b_n at this
end
lemma succ_nth_fib_le_of_nth_denom (hyp: n = 0 ∨ ¬(of v).terminated_at (n - 1)) :
  (fib (n + 1) : K) ≤ (of v).denominators n :=
begin
  rw [denom_eq_conts_b, nth_cont_eq_succ_nth_cont_aux],
  have : (n + 1) ≤ 1 ∨ ¬(of v).terminated_at (n - 1), by
  { cases n,
    case nat.zero : { exact (or.inl $ le_refl 1) },
    case nat.succ : { exact or.inr (or.resolve_left hyp n.succ_ne_zero) } },
  exact (fib_le_of_continuants_aux_b this)
end
lemma zero_le_of_continuants_aux_b : 0 ≤ ((of v).continuants_aux n).b :=
begin
  let g := of v,
  induction n with n IH,
  case nat.zero: { refl },
  case nat.succ:
  { cases (decidable.em $ g.terminated_at (n - 1)) with terminated not_terminated,
lemma zero_le_of_denom : 0 ≤ (of v).denominators n :=
by { rw [denom_eq_conts_b, nth_cont_eq_succ_nth_cont_aux], exact zero_le_of_continuants_aux_b }
lemma le_of_succ_succ_nth_continuants_aux_b {b : K}
  (nth_part_denom_eq : (of v).partial_denominators.nth n = some b) :
  b * ((of v).continuants_aux $ n + 1).b ≤ ((of v).continuants_aux $ n + 2).b :=
begin
  set g := of v with g_eq,
  obtain ⟨gp_n, nth_s_eq, gpnb_eq_b⟩ : ∃ gp_n, g.s.nth n = some gp_n ∧ gp_n.b = b, from
    exists_s_b_of_part_denom nth_part_denom_eq,
  subst gpnb_eq_b,
  let conts := g.continuants_aux (n + 2),
  set pconts := g.continuants_aux (n + 1) with pconts_eq,
  set ppconts := g.continuants_aux n with ppconts_eq,
  have h1 : 0 ≤ ppconts.b, from zero_le_of_continuants_aux_b,
  have h2 : gp_n.b * pconts.b ≤ ppconts.b + gp_n.b * pconts.b,
  { solve_by_elim [le_add_of_nonneg_of_le, le_refl] },
theorem le_of_succ_nth_denom {b : K}
  (nth_part_denom_eq : (of v).partial_denominators.nth n = some b) :
  b * (of v).denominators n ≤ (of v).denominators (n + 1) :=
begin
  rw [denom_eq_conts_b, nth_cont_eq_succ_nth_cont_aux],
  exact (le_of_succ_succ_nth_continuants_aux_b nth_part_denom_eq)
end
theorem of_denom_mono : (of v).denominators n ≤ (of v).denominators (n + 1) :=
begin
  let g := of v,
  cases (decidable.em $ g.partial_denominators.terminated_at n) with terminated not_terminated,
  { have : g.partial_denominators.nth n = none, by rwa seq.terminated_at at terminated,
    have : g.terminated_at n, from
      terminated_at_iff_part_denom_none.elim_right (by rwa seq.terminated_at at terminated),
    have : g.denominators (n + 1) = g.denominators n, from
      denominators_stable_of_terminated n.le_succ this,
    rw this },
  { obtain ⟨b, nth_part_denom_eq⟩ : ∃ b, g.partial_denominators.nth n = some b, from
      option.ne_none_iff_exists'.mp not_terminated,
    have : 1 ≤ b, from of_one_le_nth_part_denom nth_part_denom_eq,
    calc g.denominators n
        ≤ b * g.denominators n   : by simpa using (mul_le_mul_of_nonneg_right this zero_le_of_denom)
    ... ≤ g.denominators (n + 1) : le_of_succ_nth_denom nth_part_denom_eq }
end
section determinant
lemma determinant_aux (hyp: n = 0 ∨ ¬(of v).terminated_at (n - 1)) :
    ((of v).continuants_aux n).a * ((of v).continuants_aux (n + 1)).b
    - ((of v).continuants_aux n).b * ((of v).continuants_aux (n + 1)).a
  = (-1)^n :=
begin
  induction n with n IH,
  case nat.zero { simp [continuants_aux] },
  case nat.succ
lemma determinant (not_terminated_at_n : ¬(of v).terminated_at n) :
    (of v).numerators n * (of v).denominators (n + 1)
    - (of v).denominators n * (of v).numerators (n + 1)
  = (-1)^(n + 1) :=
(determinant_aux $ or.inr $ not_terminated_at_n)
end determinant
section error_term
lemma sub_convergents_eq {ifp : int_fract_pair K}
  (stream_nth_eq : int_fract_pair.stream v n = some ifp) :
  let g := of v in
  let B := (g.continuants_aux (n + 1)).b in
  let pB := (g.continuants_aux n).b in
  v - g.convergents n = if ifp.fr = 0 then 0 else (-1)^n / (B * (ifp.fr⁻¹ * B + pB)) :=
begin
theorem abs_sub_convergents_le (not_terminated_at_n : ¬(of v).terminated_at n) :
    |v - (of v).convergents n|
  ≤ 1 / (((of v).denominators n) * ((of v).denominators $ n + 1)) :=
begin
lemma abs_sub_convergents_le' {b : K}
  (nth_part_denom_eq : (of v).partial_denominators.nth n = some b) :
    |v - (of v).convergents n|
  ≤ 1 / (b * ((of v).denominators n) * ((of v).denominators n)) :=
begin
  let g := of v,
  let B := g.denominators n,
  let nB := g.denominators (n + 1),
  have not_terminated_at_n : ¬g.terminated_at n, by
  { have : g.partial_denominators.nth n ≠ none, by simp [nth_part_denom_eq],
    exact (not_iff_not_of_iff terminated_at_iff_part_denom_none).elim_right this },
  suffices : 1 / (B * nB) ≤ (1 : K) / (b * B * B), by
  { have : |v - g.convergents n| ≤ 1 / (B * nB), from abs_sub_convergents_le not_terminated_at_n,
    transitivity;
    assumption },
