import category_theory.limits.preserves.shapes.equalizers
import category_theory.limits.shapes.reflexive
import category_theory.monad.coequalizer
import category_theory.monad.limits
universes v‚ÇÅ v‚ÇÇ u‚ÇÅ u‚ÇÇ
namespace category_theory
namespace monad
open limits
noncomputable theory
instance main_pair_reflexive (A : adj .to_monad.algebra) :
  is_reflexive_pair (F .map A.a) (adj .counit.app (F .obj A.A)) :=
begin
  apply is_reflexive_pair.mk' (F .map (adj .unit.app _)) _ _,
  { rw [‚Üê F .map_comp, ‚Üê F .map_id],
    exact congr_arg (Œª _, F .map _) A.unit },
  { rw adj .left_triangle_components,
    refl },
end
instance main_pair_G_split (A : adj .to_monad.algebra) :
  G.is_split_pair (F .map A.a) (adj .counit.app (F .obj A.A)) :=
{ splittable := ‚ü®_, _, ‚ü®beck_split_coequalizer A‚ü©‚ü© }
def comparison_left_adjoint_obj
  (A : adj .to_monad.algebra) [has_coequalizer (F .map A.a) (adj .counit.app _)] : D :=
coequalizer (F .map A.a) (adj .counit.app _)
@[simps]
def comparison_left_adjoint_hom_equiv (A : adj .to_monad.algebra) (B : D)
  [has_coequalizer (F .map A.a) (adj .counit.app (F .obj A.A))] :
  (comparison_left_adjoint_obj A ‚ü∂ B) ‚âÉ (A ‚ü∂ (comparison adj).obj B) :=
calc (comparison_left_adjoint_obj A ‚ü∂ B) ‚âÉ {f : F .obj A.A ‚ü∂ B // _} :
        cofork.is_colimit.hom_iso (colimit.is_colimit _) B
     ... ‚âÉ {g : A.A ‚ü∂ G.obj B // G.map (F .map g) ‚â´ G.map (adj .counit.app B) = A.a ‚â´ g} :
      begin
        refine (adj .hom_equiv _ _).subtype_equiv _,
        intro f,
        rw [‚Üê (adj .hom_equiv _ _).injective.eq_iff, adjunction.hom_equiv_naturality_left,
            adj .hom_equiv_unit, adj .hom_equiv_unit, G.map_comp],
        dsimp,
        rw [adj .right_triangle_components_assoc, ‚Üê G.map_comp, F .map_comp, category.assoc,
            adj .counit_naturality, adj .left_triangle_components_assoc],
        apply eq_comm,
      end
     ... ‚âÉ (A ‚ü∂ (comparison adj).obj B) :
     { to_fun := Œª g, { f := _, h' := g.prop },
       inv_fun := Œª f, ‚ü®f.f, f.h‚ü©,
       left_inv := Œª g, begin ext, refl end,
       right_inv := Œª f, begin ext, refl end }
def left_adjoint_comparison
  [‚àÄ (A : adj .to_monad.algebra), has_coequalizer (F .map A.a) (adj .counit.app (F .obj A.A))] :
  adj .to_monad.algebra ‚•§ D :=
begin
  refine @adjunction.left_adjoint_of_equiv _ _ _ _
              (comparison adj) (Œª A, comparison_left_adjoint_obj A) (Œª A B, _) _,
  { apply comparison_left_adjoint_hom_equiv },
  { intros A B B' g h,
    ext1,
    dsimp [comparison_left_adjoint_hom_equiv],
    rw [‚Üê adj .hom_equiv_naturality_right, category.assoc] },
end
@[simps counit]
def comparison_adjunction
  [‚àÄ (A : adj .to_monad.algebra), has_coequalizer (F .map A.a) (adj .counit.app (F .obj A.A))] :
  left_adjoint_comparison ‚ä£ comparison adj :=
adjunction.adjunction_of_equiv_left _ _
lemma comparison_adjunction_unit_f_aux
  [‚àÄ (A : adj .to_monad.algebra), has_coequalizer (F .map A.a) (adj .counit.app (F .obj A.A))]
  (A : adj .to_monad.algebra) :
  (comparison_adjunction.unit.app A).f =
    adj .hom_equiv A.A _ (coequalizer.œÄ (F .map A.a) (adj .counit.app (F .obj A.A))) :=
congr_arg (adj .hom_equiv _ _) (category.comp_id _)
@[simps X]
def unit_cofork (A : adj .to_monad.algebra)
  [has_coequalizer (F .map A.a) (adj .counit.app (F .obj A.A))] :
  cofork (G.map (F .map A.a)) (G.map (adj .counit.app (F .obj A.A))) :=
cofork.of_œÄ (G.map (coequalizer.œÄ (F .map A.a) (adj .counit.app (F .obj A.A))))
begin
  change _ = G.map _ ‚â´ _,
  rw [‚Üê G.map_comp, coequalizer.condition, G.map_comp],
end
@[simp] lemma unit_cofork_œÄ (A : adj .to_monad.algebra)
  [has_coequalizer (F .map A.a) (adj .counit.app (F .obj A.A))] :
  (unit_cofork A).œÄ = G.map (coequalizer.œÄ (F .map A.a) (adj .counit.app (F .obj A.A))) := rfl
lemma comparison_adjunction_unit_f
  [‚àÄ (A : adj .to_monad.algebra), has_coequalizer (F .map A.a) (adj .counit.app (F .obj A.A))]
  (A : adj .to_monad.algebra) :
  (comparison_adjunction.unit.app A).f =
    (beck_coequalizer A).desc (unit_cofork A) :=
begin
  apply limits.cofork.is_colimit.hom_ext (beck_coequalizer A),
  rw [cofork.is_colimit.œÄ_desc],
  dsimp only [beck_cofork_œÄ, unit_cofork_œÄ],
  rw [comparison_adjunction_unit_f_aux, ‚Üê adj .hom_equiv_naturality_left A.a, coequalizer.condition,
      adj .hom_equiv_naturality_right, adj .hom_equiv_unit, category.assoc],
  apply adj .right_triangle_components_assoc,
end
@[simps]
def counit_cofork (B : D) :
  cofork (F .map (G.map (adj .counit.app B))) (adj .counit.app (F .obj (G.obj B))) :=
cofork.of_œÄ (adj .counit.app B) (adj .counit_naturality _)
def unit_colimit_of_preserves_coequalizer
  (A : adj .to_monad.algebra) [has_coequalizer (F .map A.a) (adj .counit.app (F .obj A.A))]
  [preserves_colimit (parallel_pair (F .map A.a) (adj .counit.app (F .obj A.A))) G] :
  is_colimit (unit_cofork A) :=
is_colimit_of_has_coequalizer_of_preserves_colimit G _ _
def counit_coequalizer_of_reflects_coequalizer (B : D)
  [reflects_colimit (parallel_pair
                          (F .map (G.map (adj .counit.app B)))
                          (adj .counit.app (F .obj (G.obj B)))) G] :
  is_colimit (counit_cofork B) :=
is_colimit_of_is_colimit_cofork_map G _ (beck_coequalizer ((comparison adj).obj B))
lemma comparison_adjunction_counit_app
  [‚àÄ (A : adj .to_monad.algebra), has_coequalizer (F .map A.a) (adj .counit.app (F .obj A.A))]
  (B : D) :
  comparison_adjunction.counit.app B = colimit.desc _ (counit_cofork B) :=
begin
  apply coequalizer.hom_ext,
  change coequalizer.œÄ _ _ ‚â´ coequalizer.desc ((adj .hom_equiv _ B).symm (ùüô _)) _ =
         coequalizer.œÄ _ _ ‚â´ coequalizer.desc _ _,
  simp,
end
end
end monadicity_internal
open category_theory.adjunction
open monadicity_internal
variables {C : Type u‚ÇÅ} {D : Type u‚ÇÇ}
variables [category.{v‚ÇÅ} C] [category.{v‚ÇÅ} D]
variables (G : D ‚•§ C)
def creates_G_split_coequalizers_of_monadic [monadic_right_adjoint G] ‚¶ÉA B‚¶Ñ (f g : A ‚ü∂ B)
  [G.is_split_pair f g] :
  creates_colimit (parallel_pair f g) G :=
begin
  apply monadic_creates_colimit_of_preserves_colimit _ _,
  apply_instance,
  { apply preserves_colimit_of_iso_diagram _ (diagram_iso_parallel_pair.{v‚ÇÅ} _).symm,
    dsimp,
    apply_instance },
  { apply preserves_colimit_of_iso_diagram _ (diagram_iso_parallel_pair.{v‚ÇÅ} _).symm,
    dsimp,
    apply_instance }
end
variables [is_right_adjoint G]
section beck_monadicity
def monadic_of_has_preserves_reflects_G_split_coequalizers
  [‚àÄ ‚¶ÉA B‚¶Ñ (f g : A ‚ü∂ B) [G.is_split_pair f g], has_coequalizer f g]
  [‚àÄ ‚¶ÉA B‚¶Ñ (f g : A ‚ü∂ B) [G.is_split_pair f g], preserves_colimit (parallel_pair f g) G]
  [‚àÄ ‚¶ÉA B‚¶Ñ (f g : A ‚ü∂ B) [G.is_split_pair f g], reflects_colimit (parallel_pair f g) G] :
  monadic_right_adjoint G :=
begin
  let L : (adjunction.of_right_adjoint G).to_monad.algebra ‚•§ D := left_adjoint_comparison,
  letI i : is_right_adjoint (comparison (of_right_adjoint G)) :=
    ‚ü®_, comparison_adjunction‚ü©,
  constructor,
  let : Œ† (X : (of_right_adjoint G).to_monad.algebra),
    is_iso ((of_right_adjoint (comparison (of_right_adjoint G))).unit.app X),
  { intro X,
    apply is_iso_of_reflects_iso _ (monad.forget (of_right_adjoint G).to_monad),
    { change is_iso (comparison_adjunction.unit.app X).f,
      rw comparison_adjunction_unit_f,
      change
        is_iso
          (is_colimit.cocone_point_unique_up_to_iso
            (beck_coequalizer X)
            (unit_colimit_of_preserves_coequalizer X)).hom,
      refine is_iso.of_iso (is_colimit.cocone_point_unique_up_to_iso _ _) } },
  let : Œ† (Y : D),
    is_iso ((of_right_adjoint (comparison (of_right_adjoint G))).counit.app Y),
  { intro Y,
    change is_iso (comparison_adjunction.counit.app Y),
    rw comparison_adjunction_counit_app,
    change is_iso (is_colimit.cocone_point_unique_up_to_iso _ _).hom,
    apply_instance,
    apply counit_coequalizer_of_reflects_coequalizer _,
    letI : G.is_split_pair
            ((left_adjoint G).map (G.map ((adjunction.of_right_adjoint G).counit.app Y)))
            ((adjunction.of_right_adjoint G).counit.app ((left_adjoint G).obj (G.obj Y))) :=
      monadicity_internal.main_pair_G_split ((comparison (adjunction.of_right_adjoint G)).obj Y),
    apply_instance },
  exactI adjunction.is_right_adjoint_to_is_equivalence,
end
def monadic_of_creates_G_split_coequalizers
  [‚àÄ ‚¶ÉA B‚¶Ñ (f g : A ‚ü∂ B) [G.is_split_pair f g], creates_colimit (parallel_pair f g) G] :
  monadic_right_adjoint G :=
begin
  letI : ‚àÄ ‚¶ÉA B‚¶Ñ (f g : A ‚ü∂ B) [G.is_split_pair f g], has_colimit (parallel_pair f g ‚ãô G),
  { introsI A B f g i,
    apply has_colimit_of_iso (diagram_iso_parallel_pair.{v‚ÇÅ} _),
    change has_coequalizer (G.map f) (G.map g),
    apply_instance },
  apply monadic_of_has_preserves_reflects_G_split_coequalizers _,
  { apply_instance },
  { introsI A B f g i,
    apply has_colimit_of_created (parallel_pair f g) G },
  { introsI A B f g i,
    apply_instance },
  { introsI A B f g i,
    apply_instance }
end
def monadic_of_has_preserves_G_split_coequalizers_of_reflects_isomorphisms
  [reflects_isomorphisms G]
  [‚àÄ ‚¶ÉA B‚¶Ñ (f g : A ‚ü∂ B) [G.is_split_pair f g], has_coequalizer f g]
  [‚àÄ ‚¶ÉA B‚¶Ñ (f g : A ‚ü∂ B) [G.is_split_pair f g], preserves_colimit (parallel_pair f g) G] :
  monadic_right_adjoint G :=
begin
  apply monadic_of_has_preserves_reflects_G_split_coequalizers _,
  { apply_instance },
  { assumption },
  { assumption },
  { introsI A B f g i,
    apply reflects_colimit_of_reflects_isomorphisms },
end
end beck_monadicity
section reflexive_monadicity
variables [has_reflexive_coequalizers D] [reflects_isomorphisms G]
variables [‚àÄ ‚¶ÉA B‚¶Ñ (f g : A ‚ü∂ B) [is_reflexive_pair f g], preserves_colimit (parallel_pair f g) G]
def monadic_of_has_preserves_reflexive_coequalizers_of_reflects_isomorphisms :
  monadic_right_adjoint G :=
begin
  let L : (adjunction.of_right_adjoint G).to_monad.algebra ‚•§ D := left_adjoint_comparison,
  letI i : is_right_adjoint (comparison (adjunction.of_right_adjoint G)) :=
    ‚ü®_, comparison_adjunction‚ü©,
  constructor,
  let : Œ† (X : (adjunction.of_right_adjoint G).to_monad.algebra),
    is_iso ((adjunction.of_right_adjoint (comparison (adjunction.of_right_adjoint G))).unit.app X),
  { intro X,
    apply is_iso_of_reflects_iso _ (monad.forget (adjunction.of_right_adjoint G).to_monad),
    { change is_iso (comparison_adjunction.unit.app X).f,
      rw comparison_adjunction_unit_f,
      change
        is_iso
          (is_colimit.cocone_point_unique_up_to_iso
            (beck_coequalizer X)
            (unit_colimit_of_preserves_coequalizer X)).hom,
      apply is_iso.of_iso (is_colimit.cocone_point_unique_up_to_iso _ _) } },
  let : Œ† (Y : D),
    is_iso ((of_right_adjoint (comparison (adjunction.of_right_adjoint G))).counit.app Y),
  { intro Y,
    change is_iso (comparison_adjunction.counit.app Y),
    rw comparison_adjunction_counit_app,
    change is_iso (is_colimit.cocone_point_unique_up_to_iso _ _).hom,
    apply_instance,
    apply counit_coequalizer_of_reflects_coequalizer _,
    apply reflects_colimit_of_reflects_isomorphisms },
  exactI adjunction.is_right_adjoint_to_is_equivalence,
end
end reflexive_monadicity
end monad
end category_theory
