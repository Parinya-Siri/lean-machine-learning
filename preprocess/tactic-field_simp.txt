import tactic.interactive
import tactic.norm_num
namespace tactic
meta def field_simp.ne_zero : tactic unit := do
  goal ← tactic.target,
  match goal with
  | `(%%e ≠ 0) := assumption <|> do n ← e.to_rat, `[norm_num1]
  | _ := tactic.fail "goal should be of the form `x ≠ 0`"
  end
namespace interactive
setup_tactic_parser
meta def field_simp (no_dflt : parse only_flag) (hs : parse simp_arg_list)
  (attr_names : parse with_ident_list)
  (locat : parse location)
  (cfg : simp_config_ext := {discharger := field_simp.ne_zero}) : tactic unit :=
let attr_names := `field_simps :: attr_names,
    hs := simp_arg_type.except `one_div :: simp_arg_type.except `mul_eq_zero :: hs in
propagate_tags (simp_core cfg.to_simp_config cfg.discharger no_dflt hs attr_names locat >> skip)
add_tactic_doc
{ name       := "field_simp",
  category   := doc_category.tactic,
  decl_names := [`tactic.interactive.field_simp],
  tags       := ["simplification", "arithmetic"] }
end interactive
end tactic
