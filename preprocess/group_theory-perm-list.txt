import data.list.rotate
import group_theory.perm.support
namespace list
variables {α β : Type*}
section form_perm
variables [decidable_eq α] (l : list α)
open equiv equiv.perm
def form_perm : equiv.perm α :=
(zip_with equiv.swap l l.tail).prod
@[simp] lemma form_perm_nil : form_perm ([] : list α) = 1 := rfl
@[simp] lemma form_perm_singleton (x : α) : form_perm [x] = 1 := rfl
@[simp] lemma form_perm_cons_cons (x y : α) (l : list α) :
  form_perm (x :: y :: l) = swap x y * form_perm (y :: l) :=
prod_cons
lemma form_perm_pair (x y : α) : form_perm [x, y] = swap x y := rfl
variables {l} {x : α}
lemma form_perm_apply_of_not_mem (x : α) (l : list α) (h : x ∉ l) :
  form_perm l x = x :=
begin
  cases l with y l,
  { simp },
  induction l with z l IH generalizing x y,
  { simp },
  { specialize IH x z (mt (mem_cons_of_mem y) h),
    simp only [not_or_distrib, mem_cons_iff] at h,
    simp [IH, swap_apply_of_ne_of_ne, h] }
end
lemma mem_of_form_perm_apply_ne (x : α) (l : list α) : l.form_perm x ≠ x → x ∈ l :=
not_imp_comm.2 $ list.form_perm_apply_of_not_mem _ _
lemma form_perm_apply_mem_of_mem (x : α) (l : list α) (h : x ∈ l) :
  form_perm l x ∈ l :=
begin
  cases l with y l,
  { simpa },
  induction l with z l IH generalizing x y,
  { simpa using h },
  { by_cases hx : x ∈ z :: l,
    { rw [form_perm_cons_cons, mul_apply, swap_apply_def],
      split_ifs;
      simp [IH _ _ hx] },
    { replace h : x = y := or.resolve_right h hx,
      simp [form_perm_apply_of_not_mem _ _ hx, ←h] } }
end
lemma mem_of_form_perm_apply_mem (x : α) (l : list α) (h : l.form_perm x ∈ l) : x ∈ l :=
begin
  cases l with y l,
  { simpa },
  induction l with z l IH generalizing x y,
  { simpa using h },
  { by_cases hx : (z :: l).form_perm x ∈ z :: l,
    { rw [list.form_perm_cons_cons, mul_apply, swap_apply_def] at h,
      split_ifs at h;
      simp [IH _ _ hx] },
    { replace hx := (function.injective.eq_iff (equiv.injective _)).mp
        (list.form_perm_apply_of_not_mem _ _ hx),
      simp only [list.form_perm_cons_cons, hx, equiv.perm.coe_mul, function.comp_app,
        list.mem_cons_iff, swap_apply_def, ite_eq_left_iff] at h,
      simp only [list.mem_cons_iff],
      obtain h | h | h := h;
      { split_ifs at h;
        cc }}}
end
lemma form_perm_mem_iff_mem : l.form_perm x ∈ l ↔ x ∈ l :=
⟨l.mem_of_form_perm_apply_mem x, l.form_perm_apply_mem_of_mem x⟩
@[simp] lemma form_perm_cons_concat_apply_last (x y : α) (xs : list α) :
  form_perm (x :: (xs ++ [y])) y = x :=
begin
  induction xs with z xs IH generalizing x y,
  { simp },
  { simp [IH] }
end
@[simp] lemma form_perm_apply_last (x : α) (xs : list α) :
  form_perm (x :: xs) ((x :: xs).last (cons_ne_nil x xs)) = x :=
begin
  induction xs using list.reverse_rec_on with xs y IH generalizing x;
  simp
end
@[simp] lemma form_perm_apply_nth_le_length (x : α) (xs : list α) :
  form_perm (x :: xs) ((x :: xs).nth_le xs.length (by simp)) = x :=
by rw [nth_le_cons_length, form_perm_apply_last]
lemma form_perm_apply_head (x y : α) (xs : list α) (h : nodup (x :: y :: xs)) :
  form_perm (x :: y :: xs) x = y :=
by simp [form_perm_apply_of_not_mem _ _ h.not_mem]
lemma form_perm_apply_nth_le_zero (l : list α) (h : nodup l) (hl : 1 < l.length) :
  form_perm l (l.nth_le 0 (zero_lt_one.trans hl)) = l.nth_le 1 hl :=
begin
  rcases l with (_|⟨x, _|⟨y, tl⟩⟩),
  { simp },
  { simp },
  { simpa using form_perm_apply_head _ _ _ h }
end
variables (l)
lemma form_perm_eq_head_iff_eq_last (x y : α) :
  form_perm (y :: l) x = y ↔ x = last (y :: l) (cons_ne_nil _ _) :=
iff.trans (by rw form_perm_apply_last) (form_perm (y :: l)).injective.eq_iff
lemma zip_with_swap_prod_support' (l l' : list α) :
  {x | (zip_with swap l l').prod x ≠ x} ≤ l.to_finset ⊔ l'.to_finset :=
begin
  simp only [set.sup_eq_union, set.le_eq_subset],
  induction l with y l hl generalizing l',
  { simp },
  { cases l' with z l',
    { simp },
    { intro x,
      simp only [set.union_subset_iff, mem_cons_iff, zip_with_cons_cons, foldr, prod_cons,
                 mul_apply],
      intro hx,
      by_cases h : x ∈ {x | (zip_with swap l l').prod x ≠ x},
      { specialize hl l' h,
        refine set.mem_union.elim hl (λ hm, _) (λ hm, _);
        { simp only [finset.coe_insert, set.mem_insert_iff, finset.mem_coe, to_finset_cons,
                     mem_to_finset] at hm ⊢,
          simp [hm] } },
      { simp only [not_not, set.mem_set_of_eq] at h,
        simp only [h, set.mem_set_of_eq] at hx,
        rw swap_apply_ne_self_iff at hx,
        rcases hx with ⟨hyz, rfl|rfl⟩;
        simp } } }
end
lemma zip_with_swap_prod_support [fintype α] (l l' : list α) :
  (zip_with swap l l').prod.support ≤ l.to_finset ⊔ l'.to_finset :=
begin
  intros x hx,
  have hx' : x ∈ {x | (zip_with swap l l').prod x ≠ x} := by simpa using hx,
  simpa using zip_with_swap_prod_support' _ _ hx'
end
lemma support_form_perm_le' : {x | form_perm l x ≠ x} ≤ l.to_finset :=
begin
  refine (zip_with_swap_prod_support' l l.tail).trans _,
  simpa [finset.subset_iff] using tail_subset l
end
lemma support_form_perm_le [fintype α] : support (form_perm l) ≤ l.to_finset :=
begin
  intros x hx,
  have hx' : x ∈ {x | form_perm l x ≠ x} := by simpa using hx,
  simpa using support_form_perm_le' _ hx'
end
lemma form_perm_apply_lt (xs : list α) (h : nodup xs) (n : ℕ) (hn : n + 1 < xs.length) :
  form_perm xs (xs.nth_le n ((nat.lt_succ_self n).trans hn)) = xs.nth_le (n + 1) hn :=
begin
  induction n with n IH generalizing xs,
  { simpa using form_perm_apply_nth_le_zero _ h _ },
  { rcases xs with (_|⟨x, _|⟨y, l⟩⟩),
    { simp },
    { simp },
    { specialize IH (y :: l) h.of_cons _,
      { simpa [nat.succ_lt_succ_iff] using hn },
      simp only [swap_apply_eq_iff, coe_mul, form_perm_cons_cons, nth_le],
      generalize_proofs at IH,
      rw [IH, swap_apply_of_ne_of_ne, nth_le];
      { rintro rfl,
        simpa [nth_le_mem _ _ _] using h } } }
end
lemma form_perm_apply_nth_le (xs : list α) (h : nodup xs) (n : ℕ) (hn : n < xs.length) :
  form_perm xs (xs.nth_le n hn) = xs.nth_le ((n + 1) % xs.length)
    (nat.mod_lt _ (n.zero_le.trans_lt hn)) :=
begin
  cases xs with x xs,
  { simp },
  { have : n ≤ xs.length,
    { refine nat.le_of_lt_succ _,
      simpa using hn },
    rcases this.eq_or_lt with rfl|hn',
    { simp },
    { simp [form_perm_apply_lt, h, nat.mod_eq_of_lt, nat.succ_lt_succ hn'] } }
end
lemma support_form_perm_of_nodup' (l : list α) (h : nodup l) (h' : ∀ (x : α), l ≠ [x]) :
  {x | form_perm l x ≠ x} = l.to_finset :=
begin
  apply le_antisymm,
  { exact support_form_perm_le' l },
  { intros x hx,
    simp only [finset.mem_coe, mem_to_finset] at hx,
    obtain ⟨n, hn, rfl⟩ := nth_le_of_mem hx,
    rw [set.mem_set_of_eq, form_perm_apply_nth_le _ h],
    intro H,
    rw nodup_iff_nth_le_inj at h,
    specialize h _ _ _ _ H,
    cases (nat.succ_le_of_lt hn).eq_or_lt with hn' hn',
    { simp only [←hn', nat.mod_self] at h,
      refine not_exists.mpr h' _,
      simpa [←h, eq_comm, length_eq_one] using hn' },
    { simpa [nat.mod_eq_of_lt hn'] using h } }
end
lemma support_form_perm_of_nodup [fintype α] (l : list α) (h : nodup l) (h' : ∀ (x : α), l ≠ [x]) :
  support (form_perm l) = l.to_finset :=
begin
  rw ←finset.coe_inj,
  convert support_form_perm_of_nodup' _ h h',
  simp [set.ext_iff]
end
lemma form_perm_rotate_one (l : list α) (h : nodup l) :
  form_perm (l.rotate 1) = form_perm l :=
begin
  have h' : nodup (l.rotate 1),
  { simpa using h },
  ext x,
  by_cases hx : x ∈ l.rotate 1,
  { obtain ⟨k, hk, rfl⟩ := nth_le_of_mem hx,
    rw [form_perm_apply_nth_le _ h', nth_le_rotate l, nth_le_rotate l,
      form_perm_apply_nth_le _ h],
    simp },
  { rw [form_perm_apply_of_not_mem _ _ hx, form_perm_apply_of_not_mem],
    simpa using hx }
end
lemma form_perm_rotate (l : list α) (h : nodup l) (n : ℕ) :
  form_perm (l.rotate n) = form_perm l :=
begin
  induction n with n hn,
  { simp },
  { rw [nat.succ_eq_add_one, ←rotate_rotate, form_perm_rotate_one, hn],
    rwa is_rotated.nodup_iff,
    exact is_rotated.forall l n }
end
lemma form_perm_eq_of_is_rotated {l l' : list α} (hd : nodup l) (h : l ~r l') :
  form_perm l = form_perm l' :=
begin
  obtain ⟨n, rfl⟩ := h,
  exact (form_perm_rotate l hd n).symm
end
lemma form_perm_reverse (l : list α) (h : nodup l) :
  form_perm l.reverse = (form_perm l)⁻¹ :=
begin
