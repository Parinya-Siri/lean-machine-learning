import category_theory.sites.dense_subsite
namespace category_theory
universes v u
open limits opposite presieve
section
variables {C : Type*} [category C] {D : Type*} [category D] {G : C ‚•§ D}
variables {J : grothendieck_topology C} {K : grothendieck_topology D}
variables (A : Type v) [category.{u} A]
def locally_cover_dense (K : grothendieck_topology D) (G : C ‚•§ D) : Prop :=
‚àÄ ‚¶ÉX‚¶Ñ (T : K (G.obj X)), (T.val.functor_pullback G).functor_pushforward G ‚àà K (G.obj X)
namespace locally_cover_dense
variables [full G] [faithful G] (Hld : locally_cover_dense K G)
include Hld
lemma pushforward_cover_iff_cover_pullback {X : C} (S : sieve X) :
  K _ (S.functor_pushforward G) ‚Üî ‚àÉ (T : K (G.obj X)), T.val.functor_pullback G = S :=
begin
  split,
  { intros hS,
    exact ‚ü®‚ü®_, hS‚ü©, (sieve.fully_faithful_functor_galois_coinsertion G X).u_l_eq S‚ü© },
  { rintros ‚ü®T, rfl‚ü©,
    exact Hld T }
end
@[simps]
def induced_topology :
  grothendieck_topology C :=
{ sieves := Œª X S, K _ (S.functor_pushforward G),
  top_mem' := Œª X, by { change K _ _, rw sieve.functor_pushforward_top, exact K.top_mem _ },
  pullback_stable' := Œª X Y S f hS,
  begin
    have : S.pullback f = ((S.functor_pushforward G).pullback (G.map f)).functor_pullback G,
    { conv_lhs { rw ‚Üê (sieve.fully_faithful_functor_galois_coinsertion G X).u_l_eq S },
      ext,
      change (S.functor_pushforward G) _ ‚Üî (S.functor_pushforward G) _,
      rw G.map_comp },
    rw this,
    change K _ _,
    apply Hld ‚ü®_, K.pullback_stable (G.map f) hS‚ü©
  end,
  transitive' := Œª X S hS S' H',
  begin
    apply K.transitive hS,
    rintros Y _ ‚ü®Z, g, i, hg, rfl‚ü©,
    rw sieve.pullback_comp,
    apply K.pullback_stable i,
    refine K.superset_covering _ (H' hg),
    rintros W _ ‚ü®Z', g', i', hg, rfl‚ü©,
    use ‚ü®Z', g' ‚â´ g, i', hg, by simp‚ü©
  end }
lemma induced_topology_cover_lifting :
  cover_lifting Hld.induced_topology K G := ‚ü®Œª _ S hS, Hld ‚ü®S, hS‚ü©‚ü©
lemma induced_topology_cover_preserving :
  cover_preserving Hld.induced_topology K G := ‚ü®Œª _ S hS, hS‚ü©
end locally_cover_dense
lemma cover_dense.locally_cover_dense [full G] (H : cover_dense K G) : locally_cover_dense K G :=
begin
  intros X T,
  refine K.superset_covering _ (K.bind_covering T.property (Œª Y f Hf, H.is_cover Y)),
  rintros Y _ ‚ü®Z, _, f, hf, ‚ü®W, g, f', (rfl : _ = _)‚ü©, rfl‚ü©,
  use W, use G.preimage (f' ‚â´ f), use g,
  split,
  simpa using T.val.downward_closed hf f',
  simp,
end
abbreviation cover_dense.induced_topology [full G] [faithful G] (H : cover_dense K G) :
  grothendieck_topology C := H.locally_cover_dense.induced_topology
variable (J)
lemma over_forget_locally_cover_dense (X : C) : locally_cover_dense J (over.forget X) :=
begin
  intros Y T,
  convert T.property,
  ext Z f,
  split,
  { rintros ‚ü®_, _, g', hg, rfl‚ü©,
    exact T.val.downward_closed hg g' },
  { intros hf,
    exact ‚ü®over.mk (f ‚â´ Y.hom), over.hom_mk f, ùüô _, hf, (category.id_comp _).symm‚ü© }
end
end
section small_site
variables {C : Type v} [small_category C] {D : Type v} [small_category D] {G : C ‚•§ D}
variables {J : grothendieck_topology C} {K : grothendieck_topology D}
variables (A : Type u) [category.{v} A]
noncomputable
def cover_dense.Sheaf_equiv [full G] [faithful G] (H : cover_dense K G) [has_limits A] :
  Sheaf H.induced_topology A ‚âå Sheaf K A :=
H.Sheaf_equiv_of_cover_preserving_cover_lifting
  H.locally_cover_dense.induced_topology_cover_preserving
  H.locally_cover_dense.induced_topology_cover_lifting
end small_site
end category_theory
