import model_theory.elementary_maps
import category_theory.concrete_category.bundled
universes u v w w'
variables {L : first_order.language.{u v}}
@[protected] instance category_theory.bundled.Structure
  {L : first_order.language.{u v}} (M : category_theory.bundled.{w} L.Structure) :
  L.Structure M :=
M.str
open_locale first_order cardinal
namespace equiv
variables (L) {M : Type w} [L.Structure M] {N : Type w'} (g : M ≃ N)
@[simps] def bundled_induced  :
  category_theory.bundled.{w'} L.Structure :=
⟨N, g.induced_Structure⟩
@[simp] def bundled_induced_equiv :
  M ≃[L] g.bundled_induced L :=
g.induced_Structure_equiv
end equiv
namespace first_order
namespace language
instance equiv_setoid : setoid (category_theory.bundled L.Structure) :=
{ r := λ M N, nonempty (M ≃[L] N),
  iseqv := ⟨λ M, ⟨equiv.refl L M⟩, λ M N, nonempty.map equiv.symm,
    λ M N P, nonempty.map2 (λ MN NP, NP.comp MN)⟩ }
variable (T : L.Theory)
namespace Theory
structure Model :=
(carrier : Type w)
[struc : L.Structure carrier]
[is_model : T.model carrier]
[nonempty' : nonempty carrier]
attribute [instance] Model.struc Model.is_model Model.nonempty'
namespace Model
instance : has_coe_to_sort T.Model (Type w) := ⟨Model.carrier⟩
@[simp] lemma carrier_eq_coe (M : T.Model) : M.carrier = M := rfl
def of (M : Type w) [L.Structure M] [M ⊨ T] [nonempty M] :
  T.Model := ⟨M⟩
@[simp]
lemma coe_of (M : Type w) [L.Structure M] [M ⊨ T] [nonempty M] : (of T M : Type w) = M := rfl
instance (M : T.Model) : nonempty M := infer_instance
section inhabited
local attribute [instance] trivial_unit_structure
instance : inhabited (Model (∅ : L.Theory)) :=
⟨Model.of _ unit⟩
end inhabited
variable {T}
def equiv_induced {M : Model.{u v w} T} {N : Type w'} (e : M ≃ N) :
  Model.{u v w'} T :=
{ carrier := N,
  struc := e.induced_Structure,
  is_model := @equiv.Theory_model L M N _ e.induced_Structure T e.induced_Structure_equiv _,
  nonempty' := e.symm.nonempty }
instance of_small (M : Type w) [nonempty M] [L.Structure M] [M ⊨ T] [h : small.{w'} M] :
  small.{w'} (Model.of T M) := h
noncomputable def shrink (M : Model.{u v w} T) [small.{w'} M] :
  Model.{u v w'} T := equiv_induced (equiv_shrink M)
def ulift (M : Model.{u v w} T) : Model.{u v (max w w')} T :=
  equiv_induced (equiv.ulift.symm : M ≃ _)
@[simps] def reduct {L' : language} (φ : L →ᴸ L') (M : (φ.on_Theory T).Model) :
  T.Model :=
{ carrier := M,
  struc := φ.reduct M,
  nonempty' := M.nonempty',
  is_model := (@Lhom.on_Theory_model L L' M (φ.reduct M) _ φ _ T).1 M.is_model, }
instance left_Structure {L' : language} {T : (L.sum L').Theory} (M : T.Model) :
  L.Structure M :=
(Lhom.sum_inl : L →ᴸ L.sum L').reduct M
instance right_Structure {L' : language} {T : (L.sum L').Theory} (M : T.Model) :
  L'.Structure M :=
(Lhom.sum_inr : L' →ᴸ L.sum L').reduct M
end Model
variables {T}
def model.bundled {M : Type w} [LM : L.Structure M] [ne : nonempty M] (h : M ⊨ T) :
  T.Model :=
@Model.of L T M LM h ne
@[simp]
lemma coe_of {M : Type w} [L.Structure M] [nonempty M] (h : M ⊨ T) :
  (h.bundled : Type w) = M := rfl
end Theory
def elementarily_equivalent.to_Model {M : T.Model} {N : Type*} [LN : L.Structure N] (h : M ≅[L] N) :
  T.Model :=
{ carrier := N,
  struc := LN,
  nonempty' := h.nonempty,
  is_model := h.Theory_model }
def elementary_substructure.to_Model {M : T.Model} (S : L.elementary_substructure M) : T.Model :=
S.elementarily_equivalent.symm.to_Model T
instance {M : T.Model} (S : L.elementary_substructure M) [h : small S] :
  small (S.to_Model T) :=
h
end language
end first_order
