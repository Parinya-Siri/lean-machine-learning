import set_theory.game.state
namespace pgame
namespace domineering
open function
@[simps]
def shift_up : ℤ × ℤ ≃ ℤ × ℤ :=
(equiv.refl ℤ).prod_congr (equiv.add_right (1 : ℤ))
@[simps]
def shift_right : ℤ × ℤ ≃ ℤ × ℤ :=
(equiv.add_right (1 : ℤ)).prod_congr (equiv.refl ℤ)
@[derive inhabited]
def board := finset (ℤ × ℤ)
local attribute [reducible] board
def left  (b : board) : finset (ℤ × ℤ) := b ∩ b.map shift_up
def right (b : board) : finset (ℤ × ℤ) := b ∩ b.map shift_right
lemma mem_left {b : board} (x : ℤ × ℤ) : x ∈ left b ↔ x ∈ b ∧ (x.1, x.2 - 1) ∈ b :=
finset.mem_inter.trans (and_congr iff.rfl finset.mem_map_equiv)
lemma mem_right {b : board} (x : ℤ × ℤ) : x ∈ right b ↔ x ∈ b ∧ (x.1 - 1, x.2) ∈ b :=
finset.mem_inter.trans (and_congr iff.rfl finset.mem_map_equiv)
def move_left (b : board) (m : ℤ × ℤ) : board :=
(b.erase m).erase (m.1, m.2 - 1)
def move_right (b : board) (m : ℤ × ℤ) : board :=
(b.erase m).erase (m.1 - 1, m.2)
lemma fst_pred_mem_erase_of_mem_right {b : board} {m : ℤ × ℤ} (h : m ∈ right b) :
  (m.1 - 1, m.2) ∈ b.erase m :=
begin
  rw mem_right at h,
  apply finset.mem_erase_of_ne_of_mem _ h.2,
  exact ne_of_apply_ne prod.fst (pred_ne_self m.1),
end
lemma snd_pred_mem_erase_of_mem_left {b : board} {m : ℤ × ℤ} (h : m ∈ left b) :
  (m.1, m.2 - 1) ∈ b.erase m :=
begin
  rw mem_left at h,
  apply finset.mem_erase_of_ne_of_mem _ h.2,
  exact ne_of_apply_ne prod.snd (pred_ne_self m.2),
end
lemma card_of_mem_left {b : board} {m : ℤ × ℤ} (h : m ∈ left b) : 2 ≤ finset.card b :=
begin
  have w₁ : m ∈ b := (finset.mem_inter.1 h).1,
  have w₂ : (m.1, m.2 - 1) ∈ b.erase m := snd_pred_mem_erase_of_mem_left h,
  have i₁ := finset.card_erase_lt_of_mem w₁,
  have i₂ := nat.lt_of_le_of_lt (nat.zero_le _) (finset.card_erase_lt_of_mem w₂),
  exact nat.lt_of_le_of_lt i₂ i₁,
end
lemma card_of_mem_right {b : board} {m : ℤ × ℤ} (h : m ∈ right b) : 2 ≤ finset.card b :=
begin
  have w₁ : m ∈ b := (finset.mem_inter.1 h).1,
  have w₂ := fst_pred_mem_erase_of_mem_right h,
  have i₁ := finset.card_erase_lt_of_mem w₁,
  have i₂ := nat.lt_of_le_of_lt (nat.zero_le _) (finset.card_erase_lt_of_mem w₂),
  exact nat.lt_of_le_of_lt i₂ i₁,
end
lemma move_left_card {b : board} {m : ℤ × ℤ} (h : m ∈ left b) :
  finset.card (move_left b m) + 2 = finset.card b :=
begin
  dsimp [move_left],
  rw finset.card_erase_of_mem (snd_pred_mem_erase_of_mem_left h),
  rw finset.card_erase_of_mem (finset.mem_of_mem_inter_left h),
  exact tsub_add_cancel_of_le (card_of_mem_left h),
end
lemma move_right_card {b : board} {m : ℤ × ℤ} (h : m ∈ right b) :
  finset.card (move_right b m) + 2 = finset.card b :=
begin
  dsimp [move_right],
  rw finset.card_erase_of_mem (fst_pred_mem_erase_of_mem_right h),
  rw finset.card_erase_of_mem (finset.mem_of_mem_inter_left h),
  exact tsub_add_cancel_of_le (card_of_mem_right h),
end
lemma move_left_smaller {b : board} {m : ℤ × ℤ} (h : m ∈ left b) :
  finset.card (move_left b m) / 2 < finset.card b / 2 :=
by simp [←move_left_card h, lt_add_one]
lemma move_right_smaller {b : board} {m : ℤ × ℤ} (h : m ∈ right b) :
  finset.card (move_right b m) / 2 < finset.card b / 2 :=
by simp [←move_right_card h, lt_add_one]
instance state : state board :=
{ turn_bound := λ s, s.card / 2,
  L := λ s, (left s).image (move_left s),
  R := λ s, (right s).image (move_right s),
  left_bound := λ s t m,
  begin
    simp only [finset.mem_image, prod.exists] at m,
    rcases m with ⟨_, _, ⟨h, rfl⟩⟩,
    exact move_left_smaller h
  end,
  right_bound := λ s t m,
  begin
    simp only [finset.mem_image, prod.exists] at m,
    rcases m with ⟨_, _, ⟨h, rfl⟩⟩,
    exact move_right_smaller h
  end, }
end domineering
def domineering (b : domineering.board) : pgame := pgame.of_state b
instance short_domineering (b : domineering.board) : short (domineering b) :=
by { dsimp [domineering], apply_instance }
def domineering.one := domineering ([(0,0), (0,1)].to_finset)
def domineering.L := domineering ([(0,2), (0,1), (0,0), (1,0)].to_finset)
instance short_one : short domineering.one := by { dsimp [domineering.one], apply_instance }
instance short_L : short domineering.L := by { dsimp [domineering.L], apply_instance }
