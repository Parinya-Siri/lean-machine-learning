import category_theory.limits.shapes.equalizers
import category_theory.limits.shapes.kernel_pair
namespace category_theory
universes v v₂ u u₂
variables {C : Type u} [category.{v} C]
variables {D : Type u₂} [category.{v₂} D]
variables {A B : C} {f g : A ⟶ B}
class is_reflexive_pair (f g : A ⟶ B) : Prop :=
(common_section [] : ∃ (s : B ⟶ A), s ≫ f = 𝟙 B ∧ s ≫ g = 𝟙 B)
class is_coreflexive_pair (f g : A ⟶ B) : Prop :=
(common_retraction [] : ∃ (s : B ⟶ A), f ≫ s = 𝟙 A ∧ g ≫ s = 𝟙 A)
lemma is_reflexive_pair.mk' (s : B ⟶ A) (sf : s ≫ f = 𝟙 B) (sg : s ≫ g = 𝟙 B) :
  is_reflexive_pair f g :=
⟨⟨s, sf, sg⟩⟩
lemma is_coreflexive_pair.mk' (s : B ⟶ A) (fs : f ≫ s = 𝟙 A) (gs : g ≫ s = 𝟙 A) :
  is_coreflexive_pair f g :=
⟨⟨s, fs, gs⟩⟩
noncomputable def common_section (f g : A ⟶ B) [is_reflexive_pair f g] : B ⟶ A :=
(is_reflexive_pair.common_section f g).some
@[simp, reassoc]
lemma section_comp_left (f g : A ⟶ B) [is_reflexive_pair f g] :
  common_section f g ≫ f = 𝟙 B :=
(is_reflexive_pair.common_section f g).some_spec.1
@[simp, reassoc]
lemma section_comp_right (f g : A ⟶ B) [is_reflexive_pair f g] :
  common_section f g ≫ g = 𝟙 B :=
(is_reflexive_pair.common_section f g).some_spec.2
noncomputable def common_retraction (f g : A ⟶ B) [is_coreflexive_pair f g] :
  B ⟶ A :=
(is_coreflexive_pair.common_retraction f g).some
@[simp, reassoc]
lemma left_comp_retraction (f g : A ⟶ B) [is_coreflexive_pair f g] :
  f ≫ common_retraction f g = 𝟙 A :=
(is_coreflexive_pair.common_retraction f g).some_spec.1
@[simp, reassoc]
lemma right_comp_retraction (f g : A ⟶ B) [is_coreflexive_pair f g] :
  g ≫ common_retraction f g = 𝟙 A :=
(is_coreflexive_pair.common_retraction f g).some_spec.2
lemma is_kernel_pair.is_reflexive_pair {R : C} {f g : R ⟶ A} {q : A ⟶ B}
  (h : is_kernel_pair q f g) :
  is_reflexive_pair f g :=
is_reflexive_pair.mk' _ (h.lift' _ _ rfl).2.1 (h.lift' _ _ _).2.2
instance (B : D) :
  is_reflexive_pair (F.map (G.map (adj.counit.app B))) (adj.counit.app (F.obj (G.obj B))) :=
is_reflexive_pair.mk'
  (F.map (adj.unit.app (G.obj B)))
  (by { rw [← F.map_comp, adj.right_triangle_components], apply F.map_id })
  adj.left_triangle_components
namespace limits
variables (C)
class has_reflexive_coequalizers : Prop :=
(has_coeq : ∀ ⦃A B : C⦄ (f g : A ⟶ B) [is_reflexive_pair f g], has_coequalizer f g)
class has_coreflexive_equalizers : Prop :=
(has_eq : ∀ ⦃A B : C⦄ (f g : A ⟶ B) [is_coreflexive_pair f g], has_equalizer f g)
attribute [instance, priority 1] has_reflexive_coequalizers.has_coeq
attribute [instance, priority 1] has_coreflexive_equalizers.has_eq
lemma has_coequalizer_of_common_section [has_reflexive_coequalizers C]
  {A B : C} {f g : A ⟶ B} (r : B ⟶ A)
  (rf : r ≫ f = 𝟙 _) (rg : r ≫ g = 𝟙 _) :
  has_coequalizer f g :=
begin
  letI := is_reflexive_pair.mk' r rf rg,
  apply_instance
end
lemma has_equalizer_of_common_retraction [has_coreflexive_equalizers C]
  {A B : C} {f g : A ⟶ B} (r : B ⟶ A)
  (fr : f ≫ r = 𝟙 _) (gr : g ≫ r = 𝟙 _) :
  has_equalizer f g :=
begin
  letI := is_coreflexive_pair.mk' r fr gr,
  apply_instance
end
@[priority 100]
instance has_reflexive_coequalizers_of_has_coequalizers [has_coequalizers C] :
  has_reflexive_coequalizers C :=
{ has_coeq := λ A B f g i, by apply_instance }
@[priority 100]
instance has_coreflexive_equalizers_of_has_equalizers [has_equalizers C] :
  has_coreflexive_equalizers C :=
{ has_eq := λ A B f g i, by apply_instance }
end limits
open limits
end category_theory
