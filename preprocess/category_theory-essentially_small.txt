import logic.small
import category_theory.skeletal
universes w v v' u u'
open category_theory
variables (C : Type u) [category.{v} C]
namespace category_theory
class essentially_small (C : Type u) [category.{v} C] : Prop :=
(equiv_small_category : ‚àÉ (S : Type w) (_ : small_category S), by exactI nonempty (C ‚âå S))
lemma essentially_small.mk' {C : Type u} [category.{v} C] {S : Type w} [small_category S]
  (e : C ‚âå S) : essentially_small.{w} C :=
‚ü®‚ü®S, _, ‚ü®e‚ü©‚ü©‚ü©
@[nolint has_inhabited_instance]
def small_model (C : Type u) [category.{v} C] [essentially_small.{w} C] : Type w :=
classical.some (@essentially_small.equiv_small_category C _ _)
noncomputable
instance small_category_small_model
  (C : Type u) [category.{v} C] [essentially_small.{w} C] : small_category (small_model C) :=
classical.some (classical.some_spec (@essentially_small.equiv_small_category C _ _))
noncomputable
def equiv_small_model (C : Type u) [category.{v} C] [essentially_small.{w} C] : C ‚âå small_model C :=
nonempty.some (classical.some_spec (classical.some_spec
  (@essentially_small.equiv_small_category C _ _)))
lemma essentially_small_congr {C : Type u} [category.{v} C] {D : Type u'} [category.{v'} D]
  (e : C ‚âå D) : essentially_small.{w} C ‚Üî essentially_small.{w} D :=
begin
  fsplit,
  { rintro ‚ü®S, ùíÆ, ‚ü®f‚ü©‚ü©,
    resetI,
    exact essentially_small.mk' (e.symm.trans f), },
  { rintro ‚ü®S, ùíÆ, ‚ü®f‚ü©‚ü©,
    resetI,
    exact essentially_small.mk' (e.trans f), },
end
class locally_small (C : Type u) [category.{v} C] : Prop :=
(hom_small : ‚àÄ X Y : C, small.{w} (X ‚ü∂ Y) . tactic.apply_instance)
instance (C : Type u) [category.{v} C] [locally_small.{w} C] (X Y : C) :
  small (X ‚ü∂ Y) :=
locally_small.hom_small X Y
lemma locally_small_congr {C : Type u} [category.{v} C] {D : Type u'} [category.{v'} D]
  (e : C ‚âå D) : locally_small.{w} C ‚Üî locally_small.{w} D :=
begin
  fsplit,
  { rintro ‚ü®L‚ü©,
    fsplit,
    intros X Y,
    specialize L (e.inverse.obj X) (e.inverse.obj Y),
    refine (small_congr _).mpr L,
    exact equiv_of_fully_faithful e.inverse, },
  { rintro ‚ü®L‚ü©,
    fsplit,
    intros X Y,
    specialize L (e.functor.obj X) (e.functor.obj Y),
    refine (small_congr _).mpr L,
    exact equiv_of_fully_faithful e.functor, },
end
@[priority 100]
instance locally_small_self (C : Type u) [category.{v} C] : locally_small.{v} C := {}
@[priority 100]
instance locally_small_of_essentially_small
  (C : Type u) [category.{v} C] [essentially_small.{w} C] : locally_small.{w} C :=
(locally_small_congr (equiv_small_model C)).mpr (category_theory.locally_small_self _)
@[nolint has_inhabited_instance]
def shrink_homs (C : Type u) := C
namespace shrink_homs
section
def to_shrink_homs {C' : Type*} (X : C') : shrink_homs C' := X
def from_shrink_homs {C' : Type*} (X : shrink_homs C') : C' := X
@[simp] lemma to_from (X : C') : from_shrink_homs (to_shrink_homs X) = X := rfl
@[simp] lemma from_to (X : shrink_homs C') : to_shrink_homs (from_shrink_homs X) = X := rfl
end
variables (C) [locally_small.{w} C]
@[simps]
noncomputable
instance : category.{w} (shrink_homs C) :=
{ hom := Œª X Y, shrink (from_shrink_homs X ‚ü∂ from_shrink_homs Y),
  id := Œª X, equiv_shrink _ (ùüô (from_shrink_homs X)),
  comp := Œª X Y Z f g,
    equiv_shrink _ (((equiv_shrink _).symm f) ‚â´ ((equiv_shrink _).symm g)), }.
@[simps]
noncomputable
def functor : C ‚•§ shrink_homs C :=
{ obj := Œª X, to_shrink_homs X,
  map := Œª X Y f, equiv_shrink (X ‚ü∂ Y) f, }
@[simps]
noncomputable
def inverse : shrink_homs C ‚•§ C :=
{ obj := Œª X, from_shrink_homs X,
  map := Œª X Y f, (equiv_shrink (from_shrink_homs X ‚ü∂ from_shrink_homs Y)).symm f, }
@[simps]
noncomputable
def equivalence : C ‚âå shrink_homs C :=
equivalence.mk (functor C) (inverse C)
  (nat_iso.of_components (Œª X, iso.refl X) (by tidy))
  (nat_iso.of_components (Œª X, iso.refl X) (by tidy))
end shrink_homs
theorem essentially_small_iff (C : Type u) [category.{v} C] :
  essentially_small.{w} C ‚Üî small.{w} (skeleton C) ‚àß locally_small.{w} C :=
begin
@[priority 100]
instance locally_small_of_thin {C : Type u} [category.{v} C] [‚àÄ X Y : C, subsingleton (X ‚ü∂ Y)] :
  locally_small.{w} C := {}
theorem essentially_small_iff_of_thin
  {C : Type u} [category.{v} C] [‚àÄ X Y : C, subsingleton (X ‚ü∂ Y)] :
  essentially_small.{w} C ‚Üî small.{w} (skeleton C) :=
by simp [essentially_small_iff, category_theory.locally_small_of_thin]
end category_theory
