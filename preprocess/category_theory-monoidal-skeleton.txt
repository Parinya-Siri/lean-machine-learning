import category_theory.monoidal.functor
import category_theory.monoidal.braided
import category_theory.monoidal.transport
import category_theory.skeletal
namespace category_theory
open monoidal_category
universes v u
variables {C : Type u} [category.{v} C] [monoidal_category C]
@[reducible]
def monoid_of_skeletal_monoidal (hC : skeletal C) : monoid C :=
{ mul := Œª X Y, (X ‚äó Y : C),
  one := (ùüô_ C : C),
  one_mul := Œª X, hC ‚ü®Œª_ X‚ü©,
  mul_one := Œª X, hC ‚ü®œÅ_ X‚ü©,
  mul_assoc := Œª X Y Z, hC ‚ü®Œ±_ X Y Z‚ü© }
def comm_monoid_of_skeletal_braided [braided_category C] (hC : skeletal C) :
  comm_monoid C :=
{ mul_comm := Œª X Y, hC ‚ü®Œ≤_ X Y‚ü©,
  ..monoid_of_skeletal_monoidal hC }
noncomputable instance : monoidal_category (skeleton C) :=
monoidal.transport (skeleton_equivalence C).symm
noncomputable instance : monoid (skeleton C) :=
monoid_of_skeletal_monoidal (skeleton_is_skeleton _).skel
