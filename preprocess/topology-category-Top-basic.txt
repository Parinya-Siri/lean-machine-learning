import category_theory.concrete_category.bundled_hom
import category_theory.elementwise
import topology.continuous_function.basic
open category_theory
open topological_space
universe u
def Top : Type (u+1) := bundled topological_space
namespace Top
instance bundled_hom : bundled_hom @continuous_map :=
‚ü®@continuous_map.to_fun, @continuous_map.id, @continuous_map.comp, @continuous_map.coe_injective‚ü©
attribute [derive [large_category, concrete_category]] Top
instance : has_coe_to_sort Top Type* := bundled.has_coe_to_sort
instance topological_space_unbundled (x : Top) : topological_space x := x.str
@[simp] lemma id_app (X : Top.{u}) (x : X) :
  (ùüô X : X ‚Üí X) x = x := rfl
@[simp] lemma comp_app {X Y Z : Top.{u}} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) (x : X) :
  (f ‚â´ g : X ‚Üí Z) x = g (f x) := rfl
def of (X : Type u) [topological_space X] : Top := ‚ü®X‚ü©
instance (X : Top) : topological_space X := X.str
@[simp] lemma coe_of (X : Type u) [topological_space X] : (of X : Type u) = X := rfl
instance : inhabited Top := ‚ü®Top.of empty‚ü©
def discrete : Type u ‚•§ Top.{u} :=
{ obj := Œª X, ‚ü®X, ‚ä•‚ü©,
  map := Œª X Y f, { to_fun := f, continuous_to_fun := continuous_bot } }
def trivial : Type u ‚•§ Top.{u} :=
{ obj := Œª X, ‚ü®X, ‚ä§‚ü©,
  map := Œª X Y f, { to_fun := f, continuous_to_fun := continuous_top } }
@[simps] def iso_of_homeo {X Y : Top.{u}} (f : X ‚âÉ‚Çú Y) : X ‚âÖ Y :=
{ hom := ‚ü®f‚ü©,
  inv := ‚ü®f.symm‚ü© }
@[simps] def homeo_of_iso {X Y : Top.{u}} (f : X ‚âÖ Y) : X ‚âÉ‚Çú Y :=
{ to_fun := f.hom,
  inv_fun := f.inv,
  left_inv := Œª x, by simp,
  right_inv := Œª x, by simp,
  continuous_to_fun := f.hom.continuous,
  continuous_inv_fun := f.inv.continuous }
@[simp] lemma of_iso_of_homeo {X Y : Top.{u}} (f : X ‚âÉ‚Çú Y) : homeo_of_iso (iso_of_homeo f) = f :=
by { ext, refl }
@[simp] lemma of_homeo_of_iso {X Y : Top.{u}} (f : X ‚âÖ Y) : iso_of_homeo (homeo_of_iso f) = f :=
by { ext, refl }
@[simp]
lemma open_embedding_iff_comp_is_iso {X Y Z : Top} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) [is_iso g] :
  open_embedding (f ‚â´ g) ‚Üî open_embedding f :=
open_embedding_iff_open_embedding_compose f (Top.homeo_of_iso (as_iso g)).open_embedding
@[simp]
lemma open_embedding_iff_is_iso_comp {X Y Z : Top} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) [is_iso f] :
  open_embedding (f ‚â´ g) ‚Üî open_embedding g :=
begin
  split,
  { intro h,
    convert h.comp (Top.homeo_of_iso (as_iso f).symm).open_embedding,
    exact congr_arg _ (is_iso.inv_hom_id_assoc f g).symm },
  { exact Œª h, h.comp (Top.homeo_of_iso (as_iso f)).open_embedding }
end
end Top
