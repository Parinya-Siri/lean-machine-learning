import category_theory.linear
import category_theory.limits.shapes.biproducts
import linear_algebra.matrix.invariant_basis_number
open_locale classical matrix
open category_theory.limits
universes v u
namespace category_theory
variables {C : Type u} [category.{v} C]
def hom_orthogonal {Œπ : Type*} (s : Œπ ‚Üí C) : Prop :=
‚àÄ i j, i ‚â† j ‚Üí subsingleton (s i ‚ü∂ s j)
namespace hom_orthogonal
variables {Œπ : Type*} {s : Œπ ‚Üí C}
lemma eq_zero [has_zero_morphisms C] (o : hom_orthogonal s)
  {i j : Œπ} (w : i ‚â† j) (f : s i ‚ü∂ s j) : f = 0 :=
by { haveI := o i j w, apply subsingleton.elim, }
section
variables [has_zero_morphisms C] [has_finite_biproducts C]
@[simps] noncomputable
def matrix_decomposition
  (o : hom_orthogonal s) {Œ± Œ≤ : Type} [fintype Œ±] [fintype Œ≤] {f : Œ± ‚Üí Œπ} {g : Œ≤ ‚Üí Œπ} :
  (‚®Å (Œª a, s (f a)) ‚ü∂ ‚®Å (Œª b, s (g b))) ‚âÉ
    Œ† (i : Œπ), matrix (g ‚Åª¬π' {i}) (f ‚Åª¬π' {i}) (End (s i)) :=
{ to_fun := Œª z i j k,
    eq_to_hom (by { rcases k with ‚ü®k, ‚ü®‚ü©‚ü©, simp, }) ‚â´
      biproduct.components z k j ‚â´ eq_to_hom (by { rcases j with ‚ü®j, ‚ü®‚ü©‚ü©, simp, }),
  inv_fun := Œª z, biproduct.matrix (Œª j k, if h : f j = g k then
      z (f j) ‚ü®k, by simp [h]‚ü© ‚ü®j, by simp‚ü© ‚â´ eq_to_hom (by simp [h])
    else
      0),
  left_inv := Œª z, begin
    ext j k,
    simp only [category.assoc, biproduct.lift_œÄ, biproduct.Œπ_matrix],
    split_ifs,
    { simp, refl, },
    { symmetry, apply o.eq_zero h, },
  end,
  right_inv := Œª z, begin
    ext i ‚ü®j, w‚ü© ‚ü®k, ‚ü®‚ü©‚ü©,
    simp only [set.mem_preimage, set.mem_singleton_iff],
    simp [w.symm], refl,
  end, }
end
section
variables [preadditive C] [has_finite_biproducts C]
@[simps] noncomputable
def matrix_decomposition_add_equiv
  (o : hom_orthogonal s) {Œ± Œ≤ : Type} [fintype Œ±] [fintype Œ≤] {f : Œ± ‚Üí Œπ} {g : Œ≤ ‚Üí Œπ} :
  (‚®Å (Œª a, s (f a)) ‚ü∂ ‚®Å (Œª b, s (g b))) ‚âÉ+
    Œ† (i : Œπ), matrix (g ‚Åª¬π' {i}) (f ‚Åª¬π' {i}) (End (s i)) :=
{ map_add' := Œª w z, by { ext, dsimp [biproduct.components], simp, },
  ..o.matrix_decomposition, }.
@[simp]
lemma matrix_decomposition_id
  (o : hom_orthogonal s) {Œ± : Type} [fintype Œ±] {f : Œ± ‚Üí Œπ} (i : Œπ) :
  o.matrix_decomposition (ùüô (‚®Å (Œª a, s (f a)))) i = 1 :=
begin
  ext ‚ü®b, ‚ü®‚ü©‚ü© ‚ü®a‚ü©,
  simp only [set.mem_preimage, set.mem_singleton_iff] at j_property,
  simp only [category.comp_id, category.id_comp, category.assoc, End.one_def, eq_to_hom_refl,
    matrix.one_apply, hom_orthogonal.matrix_decomposition_apply, biproduct.components],
  split_ifs with h,
  { cases h, simp, },
  { convert comp_zero,
    simpa using biproduct.Œπ_œÄ_ne _ (ne.symm h), },
end
lemma matrix_decomposition_comp
  (o : hom_orthogonal s)
  {Œ± Œ≤ Œ≥ : Type} [fintype Œ±] [fintype Œ≤] [fintype Œ≥] {f : Œ± ‚Üí Œπ} {g : Œ≤ ‚Üí Œπ} {h : Œ≥ ‚Üí Œπ}
  (z : (‚®Å (Œª a, s (f a)) ‚ü∂ ‚®Å (Œª b, s (g b)))) (w : (‚®Å (Œª b, s (g b)) ‚ü∂ ‚®Å (Œª c, s (h c))))
  (i : Œπ) :
  o.matrix_decomposition (z ‚â´ w) i = o.matrix_decomposition w i ‚¨ù o.matrix_decomposition z i :=
begin
  ext ‚ü®c, ‚ü®‚ü©‚ü© ‚ü®a‚ü©,
  simp only [set.mem_preimage, set.mem_singleton_iff] at j_property,
  simp only [matrix.mul_apply, limits.biproduct.components,
    hom_orthogonal.matrix_decomposition_apply,
    category.comp_id, category.id_comp, category.assoc, End.mul_def,
    eq_to_hom_refl, eq_to_hom_trans_assoc, finset.sum_congr],
  conv_lhs { rw [‚Üêcategory.id_comp w, ‚Üêbiproduct.total], },
  simp only [preadditive.sum_comp, preadditive.comp_sum],
  apply finset.sum_congr_set,
  { intros, simp, refl, },
  { intros b nm,
    simp only [set.mem_preimage, set.mem_singleton_iff] at nm,
    simp only [category.assoc],
    convert comp_zero,
    convert comp_zero,
    convert comp_zero,
    convert comp_zero,
    apply o.eq_zero nm, },
end
section
variables {R : Type*} [semiring R] [linear R C]
@[simps] noncomputable
def matrix_decomposition_linear_equiv
(o : hom_orthogonal s)
  {Œ± Œ≤ : Type} [fintype Œ±] [fintype Œ≤] {f : Œ± ‚Üí Œπ} {g : Œ≤ ‚Üí Œπ} :
  (‚®Å (Œª a, s (f a)) ‚ü∂ ‚®Å (Œª b, s (g b))) ‚âÉ‚Çó[R]
    Œ† (i : Œπ), matrix (g ‚Åª¬π' {i}) (f ‚Åª¬π' {i}) (End (s i)) :=
{ map_smul' := Œª w z, by { ext, dsimp [biproduct.components], simp, },
  ..o.matrix_decomposition_add_equiv, }
end
variables [‚àÄ i, invariant_basis_number (End (s i))]
lemma equiv_of_iso (o : hom_orthogonal s)
  {Œ± Œ≤ : Type} [fintype Œ±] [fintype Œ≤] {f : Œ± ‚Üí Œπ} {g : Œ≤ ‚Üí Œπ}
  (i : ‚®Å (Œª a, s (f a)) ‚âÖ ‚®Å (Œª b, s (g b))) :
  ‚àÉ e : Œ± ‚âÉ Œ≤, ‚àÄ a, g (e a) = f a :=
begin
  refine ‚ü®equiv.of_preimage_equiv _, Œª a, equiv.of_preimage_equiv_map _ _‚ü©,
  intro c,
  apply nonempty.some,
  apply cardinal.eq.1,
  simp only [cardinal.mk_fintype, nat.cast_inj],
  exact matrix.square_of_invertible
    (o.matrix_decomposition i.inv c) (o.matrix_decomposition i.hom c)
    (by { rw ‚Üêo.matrix_decomposition_comp, simp, })
    (by { rw ‚Üêo.matrix_decomposition_comp, simp, })
end
end
end hom_orthogonal
end category_theory
