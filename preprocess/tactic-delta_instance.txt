import tactic.simp_result
namespace tactic
meta def delta_instance (ids : parse ident*) : itactic :=
tactic.delta_instance ids
end interactive
meta def delta_instance_name : pexpr → string
| (expr.app f _) := delta_instance_name f
| (expr.pi _ _ _ body) := delta_instance_name body
| (expr.lam _ _ _ body) := delta_instance_name body
| (expr.const nm _) := nm.last
| _ := "inst"
@[derive_handler, priority 2000] meta def delta_instance_handler : derive_handler :=
λ cls new_decl_name,
do env ← get_env,
if env.is_inductive new_decl_name then return ff else
do new_decl ← get_decl new_decl_name,
   new_decl_pexpr ← resolve_name new_decl_name,
   arity ← get_pexpr_arg_arity_with_tgt cls new_decl.type,
   tgt ← to_expr $ apply_under_n_pis cls new_decl_pexpr new_decl.type
     (new_decl.type.pi_arity - arity),
   (vs, tgt') ← open_pis tgt,
   tgt ← whnf tgt' transparency.none >>= pis vs,
   (_, inst) ← solve_aux tgt $ tactic.delta_instance [new_decl_name],
   inst ← instantiate_mvars inst,
   inst ← replace_univ_metas_with_univ_params inst,
   tgt ← instantiate_mvars tgt,
   nm ← get_unused_decl_name $ new_decl_name <.> (delta_instance_name cls),
   add_protected_decl $ declaration.defn nm inst.collect_univ_params tgt inst
     new_decl.reducibility_hints new_decl.is_trusted,
   set_basic_attribute `instance nm tt,
   return tt
end tactic
