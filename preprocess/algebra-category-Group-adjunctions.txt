import algebra.category.Group.basic
import group_theory.free_abelian_group
noncomputable theory
universe u
open category_theory
namespace AddCommGroup
open_locale classical
def free : Type u ⥤ AddCommGroup :=
{ obj := λ α, of (free_abelian_group α),
  map := λ X Y, free_abelian_group.map,
  map_id' := λ X, add_monoid_hom.ext free_abelian_group.map_id_apply,
  map_comp' := λ X Y Z f g, add_monoid_hom.ext free_abelian_group.map_comp_apply, }
@[simp] lemma free_obj_coe {α : Type u} :
  (free.obj α : Type u) = (free_abelian_group α) := rfl
@[simp] lemma free_map_coe {α β : Type u} {f : α → β} (x : free_abelian_group α) :
  (free.map f) x = f <$> x := rfl
def adj : free ⊣ forget AddCommGroup.{u} :=
adjunction.mk_of_hom_equiv
{ hom_equiv := λ X G, free_abelian_group.lift.symm,
  hom_equiv_naturality_left_symm' :=
  by { intros, ext, refl} }
example {G H : AddCommGroup.{u}} (f : G ⟶ H) [mono f] : function.injective f :=
(mono_iff_injective f).1 (right_adjoint_preserves_mono adj (by apply_instance : mono f))
instance : is_right_adjoint (forget AddCommGroup.{u}) := ⟨_, adj⟩
end AddCommGroup
namespace Group
def free : Type u ⥤ Group :=
{ obj := λ α, of (free_group α),
  map := λ X Y, free_group.map,
  map_id' := by { intros, ext1, refl },
  map_comp' := by { intros, ext1, refl } }
def adj : free ⊣ forget Group.{u} :=
adjunction.mk_of_hom_equiv
{ hom_equiv := λ X G, free_group.lift.symm,
  hom_equiv_naturality_left_symm' := λ X Y G f g, by { ext1, refl } }
instance : is_right_adjoint (forget Group.{u}) := ⟨_, adj⟩
end Group
section abelianization
def abelianize : Group.{u} ⥤ CommGroup.{u} :=
{ obj := λ G, { α := abelianization G, str := by apply_instance },
  map := λ G H f, abelianization.lift ( { to_fun := λ x, abelianization.of (f x),
  map_one' := by simp,
  map_mul' := by simp } ),
  map_id' := by { intros, simp only [monoid_hom.mk_coe, coe_id], ext1, refl },
  map_comp' := by { intros, simp only [coe_comp], ext1, refl } }
def abelianize_adj : abelianize ⊣ forget₂ CommGroup.{u} Group.{u} :=
adjunction.mk_of_hom_equiv
{ hom_equiv := λ G A, abelianization.lift.symm,
  hom_equiv_naturality_left_symm' := λ G H A f g, by { ext1, refl } }
end abelianization
