import category_theory.path_category
import category_theory.functor.fully_faithful
import category_theory.bicategory.free
import category_theory.bicategory.locally_discrete
open quiver (path) quiver.path
namespace category_theory
open bicategory category
open_locale bicategory
universes v u
namespace free_bicategory
variables {B : Type u} [quiver.{v+1} B]
@[simp]
def inclusion_path_aux {a : B} : ‚àÄ {b : B}, path a b ‚Üí hom a b
| _ nil         := hom.id a
| _ (cons p f)  := (inclusion_path_aux p).comp (hom.of f)
def inclusion_path (a b : B) : discrete (path.{v+1} a b) ‚•§ hom a b :=
discrete.functor inclusion_path_aux
def preinclusion (B : Type u) [quiver.{v+1} B] :
  prelax_functor (locally_discrete (paths B)) (free_bicategory B) :=
{ obj   := id,
  map   := Œª a b, (inclusion_path a b).obj,
  map‚ÇÇ  := Œª a b, (inclusion_path a b).map }
@[simp]
lemma preinclusion_obj (a : B) :
  (preinclusion B).obj a = a :=
rfl
@[simp]
lemma preinclusion_map‚ÇÇ {a b : B} (f g : discrete (path.{v+1} a b)) (Œ∑ : f ‚ü∂ g) :
  (preinclusion B).map‚ÇÇ Œ∑ = eq_to_hom (congr_arg _ (discrete.ext _ _ (discrete.eq_of_hom Œ∑))) :=
begin
  rcases Œ∑ with ‚ü®‚ü®‚ü©‚ü©,
  cases discrete.ext _ _ Œ∑,
  exact (inclusion_path a b).map_id _
end
@[simp]
def normalize_aux {a : B} : ‚àÄ {b c : B}, path a b ‚Üí hom b c ‚Üí path a c
| _ _ p (hom.of f)      := p.cons f
| _ _ p (hom.id b)      := p
| _ _ p (hom.comp f g)  := normalize_aux (normalize_aux p f) g
@[simp]
def normalize_iso {a : B} : ‚àÄ {b c : B} (p : path a b) (f : hom b c),
  (preinclusion B).map ‚ü®p‚ü© ‚â´ f ‚âÖ (preinclusion B).map ‚ü®normalize_aux p f‚ü©
| _ _ p (hom.of f)      := iso.refl _
| _ _ p (hom.id b)      := œÅ_ _
| _ _ p (hom.comp f g)  := (Œ±_ _ _ _).symm ‚â™‚â´
    whisker_right_iso (normalize_iso p f) g ‚â™‚â´ normalize_iso (normalize_aux p f) g
lemma normalize_aux_congr {a b c : B} (p : path a b) {f g : hom b c} (Œ∑ : f ‚ü∂ g) :
  normalize_aux p f = normalize_aux p g :=
begin
  rcases Œ∑,
  apply @congr_fun _ _ (Œª p, normalize_aux p f),
  clear p,
  induction Œ∑,
  case vcomp { apply eq.trans; assumption },
  case whisker_left  : _ _ _ _ _ _ _ ih { funext, apply congr_fun ih },
  case whisker_right : _ _ _ _ _ _ _ ih { funext, apply congr_arg2 _ (congr_fun ih p) rfl },
  all_goals { funext, refl }
end
lemma normalize_naturality {a b c : B} (p : path a b) {f g : hom b c} (Œ∑ : f ‚ü∂ g) :
  (preinclusion B).map ‚ü®p‚ü© ‚óÅ Œ∑ ‚â´ (normalize_iso p g).hom =
    (normalize_iso p f).hom ‚â´
      (preinclusion B).map‚ÇÇ (eq_to_hom (discrete.ext _ _ (normalize_aux_congr p Œ∑))) :=
begin
  rcases Œ∑, induction Œ∑,
  case id : { simp },
  case vcomp : _ _ _ _ _ _ _ ihf ihg
  { rw [mk_vcomp, bicategory.whisker_left_comp],
    slice_lhs 2 3 { rw ihg },
    slice_lhs 1 2 { rw ihf },
    simp },
  case whisker_left : _ _ _ _ _ _ _ ih
  { dsimp, simp_rw [associator_inv_naturality_right_assoc, whisker_exchange_assoc, ih, assoc] },
  case whisker_right : _ _ _ _ _ h Œ∑ ih
  { dsimp,
    rw [associator_inv_naturality_middle_assoc, ‚Üêcomp_whisker_right_assoc, ih, comp_whisker_right],
    have := dcongr_arg (Œª x, (normalize_iso x h).hom) (normalize_aux_congr p (quot.mk _ Œ∑)),
    dsimp at this, simp [this] },
  all_goals { dsimp, dsimp [id_def, comp_def], simp }
end
@[simp]
lemma normalize_aux_nil_comp {a b c : B} (f : hom a b) (g : hom b c) :
  normalize_aux nil (f.comp g) = (normalize_aux nil f).comp (normalize_aux nil g) :=
begin
  induction g generalizing a,
  case id { refl },
  case of { refl },
  case comp : _ _ _ g _ ihf ihg { erw [ihg (f.comp g), ihf f, ihg g, comp_assoc] }
end
def normalize (B : Type u) [quiver.{v+1} B] :
  pseudofunctor (free_bicategory B) (locally_discrete (paths B)) :=
{ obj       := id,
  map       := Œª a b f, ‚ü®normalize_aux nil f‚ü©,
  map‚ÇÇ      := Œª a b f g Œ∑, eq_to_hom $ discrete.ext _ _ $ normalize_aux_congr nil Œ∑,
  map_id    := Œª a, eq_to_iso $ discrete.ext _ _ rfl,
  map_comp  := Œª a b c f g, eq_to_iso $ discrete.ext _ _ $ normalize_aux_nil_comp f g }
def normalize_unit_iso (a b : free_bicategory B) :
  ùü≠ (a ‚ü∂ b) ‚âÖ (normalize B).map_functor a b ‚ãô inclusion_path a b :=
nat_iso.of_components (Œª f, (Œª_ f).symm ‚â™‚â´ normalize_iso nil f)
begin
  intros f g Œ∑,
  erw [left_unitor_inv_naturality_assoc, assoc],
  congr' 1,
  exact normalize_naturality nil Œ∑
end
def normalize_equiv (a b : B) : hom a b ‚âå discrete (path.{v+1} a b) :=
equivalence.mk ((normalize _).map_functor a b) (inclusion_path a b)
  (normalize_unit_iso a b)
  (discrete.nat_iso (Œª f, eq_to_iso (by { induction f; induction f; tidy })))
instance locally_thin {a b : free_bicategory B} (f g : a ‚ü∂ b) : subsingleton (f ‚ü∂ g) :=
‚ü®Œª Œ∑ Œ∏, (normalize_equiv a b).functor.map_injective (subsingleton.elim _ _)‚ü©
def inclusion_map_comp_aux {a b : B} : ‚àÄ {c : B} (f : path a b) (g : path b c),
  (preinclusion _).map (‚ü®f‚ü© ‚â´ ‚ü®g‚ü©) ‚âÖ (preinclusion _).map ‚ü®f‚ü© ‚â´ (preinclusion _).map ‚ü®g‚ü©
| _ f nil := (œÅ_ ((preinclusion _).map ‚ü®f‚ü©)).symm
| _ f (cons g‚ÇÅ g‚ÇÇ) := whisker_right_iso (inclusion_map_comp_aux f g‚ÇÅ) (hom.of g‚ÇÇ) ‚â™‚â´ Œ±_ _ _ _
def inclusion (B : Type u) [quiver.{v+1} B] :
  pseudofunctor (locally_discrete (paths B)) (free_bicategory B) :=
{ map_id    := Œª a, iso.refl (ùüô a),
  map_comp  := Œª a b c f g, inclusion_map_comp_aux f.as g.as,
