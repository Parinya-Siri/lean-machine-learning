import tactic.rcases
import logic.function.basic
universes u₁ u₂
open interactive interactive.types
section ext
open lean.parser nat tactic
declare_trace ext
meta def derive_struct_ext_lemma (n : name) : tactic name :=
do e ← get_env,
   fs ← e.structure_fields n,
   d ← get_decl n,
   n ← resolve_constant n,
   let r := @expr.const tt n $ d.univ_params.map level.param,
   (args,_) ← infer_type r >>= open_pis,
   let args := args.map expr.to_implicit_local_const,
   let t := r.mk_app args,
   x ← mk_local_def `x t,
   y ← mk_local_def `y t,
   let args_x := args ++ [x],
   let args_y := args ++ [y],
   bs ← fs.mmap $ λ f,
     do { d ← get_decl (n ++ f),
          let a := @expr.const tt (n ++ f) $ d.univ_params.map level.param,
          t ← infer_type a,
          s ← infer_type t,
          if s ≠ `(Prop)
            then do
              let x := a.mk_app args_x,
              let y := a.mk_app args_y,
              t ← infer_type x,
              t' ← infer_type y,
              some <$> if t = t'
                then mk_app `eq [x,y] >>= mk_local_def `h
                else mk_mapp `heq [none,x,none,y] >>= mk_local_def `h
            else pure none },
   let bs := bs.filter_map id,
   eq_t ← mk_app `eq [x,y],
   t ← pis (args ++ [x,y] ++ bs) eq_t,
   pr ← run_async $
     do { (_,pr) ← solve_aux t (do
          { args ← intron args.length,
            x ← intro1, y ← intro1,
            cases x, cases y,
            bs.mmap' (λ _,
              do e ← intro1,
                 cases e),
            reflexivity }),
          instantiate_mvars pr },
   let decl_n := n <.> "ext",
   add_decl (declaration.thm decl_n d.univ_params t pr),
   bs ← bs.mmap infer_type,
   let rhs := expr.mk_and_lst bs,
   iff_t ← mk_app `iff [eq_t,rhs],
   t ← pis (args ++ [x,y]) iff_t,
   pr ← run_async $
     do { (_,pr) ← solve_aux t $ do
          { args ← intron args.length,
            x ← intro1, y ← intro1,
            cases x, cases y,
            split,
            solve1 $ do
            { h ← intro1, hs ← injection h, subst_vars,
              repeat (refine ``( and.intro _ _ ) >> reflexivity ),
              done <|> reflexivity },
            solve1 $ do
            { repeat (do refine ``(and_imp.mpr _),
                         h ← intro1, cases h, skip ),
              h ← intro1, cases h,
              reflexivity } },
          instantiate_mvars pr },
   add_decl (declaration.thm (n <.> "ext_iff") d.univ_params t pr),
   pure decl_n
meta def get_ext_subject : expr → tactic name
| (expr.pi n bi d b) :=
  do v  ← mk_local' n bi d,
     b' ← whnf $ b.instantiate_var v,
     get_ext_subject b'
| (expr.app _ e) :=
  do t ← infer_type e >>= instantiate_mvars >>= head_beta,
     if t.get_app_fn.is_constant then
       pure $ t.get_app_fn.const_name
     else if t.is_pi then
       pure $ name.mk_numeral 0 name.anonymous
     else if t.is_sort then
       pure $ name.mk_numeral 1 name.anonymous
     else do
       t ← pp t,
       fail format!"only constants and Pi types are supported: {t}"
| e := fail format!"Only expressions of the form `_ → _ → ... → R ... e are supported: {e}"
open native
meta def saturate_fun : name → tactic expr
| (name.mk_numeral 0 name.anonymous) :=
do v₀ ← mk_mvar,
   v₁ ← mk_mvar,
   return $ v₀.imp v₁
| (name.mk_numeral 1 name.anonymous) :=
do u ← mk_meta_univ,
   pure $ expr.sort u
| n :=
do e ← resolve_constant n >>= mk_const,
   a ← get_arity e,
   e.mk_app <$> (list.iota a).mmap (λ _, mk_mvar)
meta def equiv_type_constr (n n' : name) : tactic unit :=
do e  ← saturate_fun n,
   e' ← saturate_fun n',
   unify e e' <|> fail format!"{n} and {n'} are not definitionally equal types"
section performance_hack
library_note "user attribute parameters"
local attribute [semireducible] reflected
local attribute [instance, priority 9000]
private meta def hacky_name_reflect : has_reflect name :=
λ n, `(id %%(expr.const n []) : name)
@[user_attribute]
private meta def ext_attr_core : user_attribute (name_map name) name :=
{ name := `_ext_core,
  descr := "(internal attribute used by ext)",
  cache_cfg :=
  { dependencies := [],
    mk_cache := λ ns, ns.mfoldl (λ m n, do
      ext_l ← ext_attr_core.get_param_untyped n,
      pure (m.insert n ext_l.app_arg.const_name)) mk_name_map },
  parser := failure }
end performance_hack
@[user_attribute]
private meta def ext_lemma_attr_core : user_attribute :=
{ name := `_ext_lemma_core,
  descr := "(internal attribute used by ext)",
  parser := failure }
meta def get_ext_lemmas : tactic (name_map name) :=
ext_attr_core.get_cache
meta def get_ext_lemma_names : tactic (list name) :=
attribute.get_instances ext_lemma_attr_core.name
meta def add_ext_lemma (constr lem : name) (persistent : bool) : tactic unit :=
ext_attr_core.set constr lem persistent >> ext_lemma_attr_core.set lem () persistent
@[user_attribute]
meta def extensional_attribute : user_attribute unit (option name) :=
{ name := `ext,
  descr := "lemmas usable by `ext` tactic",
  parser := optional ident,
  before_unset := some $ λ _ _, pure (),
  after_set := some $ λ n _ b, do
    add ← extensional_attribute.get_param n,
    unset_attribute `ext n,
    e ← get_env,
    n ← if (e.structure_fields n).is_some
      then derive_struct_ext_lemma n
      else pure n,
    s ← mk_const n >>= infer_type >>= get_ext_subject,
    match add with
    | none := add_ext_lemma s n b
    | some add := equiv_type_constr s add >> add_ext_lemma add n b
    end }
add_tactic_doc
{ name                     := "ext",
  category                 := doc_category.attr,
  decl_names               := [`extensional_attribute],
  tags                     := ["rewrite", "logic"] }
library_note "partially-applied ext lemmas"
meta structure ext_state : Type :=
(patts : list rcases_patt := [])
(trace_msg : list string := [])
(fuel : option ℕ := none)
private meta def try_intros_core : state_t ext_state tactic unit :=
do ⟨patts, trace_msg, fuel⟩ ← get,
   match patts with
   | [] := do { es ← state_t.lift intros, when (es.length > 0) $ do
                let msg := "intros " ++ (" ".intercalate (es.map (λ e, e.local_pp_name.to_string))),
                modify (λ ⟨patts, trace_msg, fuel⟩, ⟨patts, trace_msg ++ [msg], fuel⟩) }
             <|> pure ()
   | (x::xs) :=
     do tgt ← state_t.lift (target >>= whnf),
        when tgt.is_pi $
          do state_t.lift (rintro [x]),
             msg ← state_t.lift (((++) "rintro ") <$> format.to_string <$> x.format ff),
             modify (λ ⟨_, trace_msg, fuel⟩, ⟨xs, trace_msg ++ [msg], fuel⟩),
             try_intros_core
   end
meta def try_intros (patts : list rcases_patt) : tactic (list rcases_patt) :=
let σ := ext_state.mk patts [] none in
  (ext_state.patts ∘ prod.snd) <$> state_t.run try_intros_core σ
meta def ext1_core (cfg : apply_cfg := {}) : state_t ext_state tactic unit :=
do ⟨patts, trace_msg, _⟩ ← get,
   (new_msgs) ← state_t.lift $ focus1 $
   do { m ← get_ext_lemmas,
         tgt ← target,
         when_tracing `ext $ trace!"[ext] goal: {tgt}",
         subject ← get_ext_subject tgt,
         new_trace_msg ←
           do { rule ← (m.find subject),
                if is_trace_enabled_for `ext then
                  trace!"[ext] matched goal to rule: {rule}" >>
                  timetac "[ext] application attempt time" (applyc rule cfg)
                else applyc rule cfg,
                pure (["apply " ++ rule.to_string]) } <|>
             do { ls ← get_ext_lemma_names,
                  let nms := ls.map name.to_string,
                  rule ← (ls.any_of (λ n,
                    (if is_trace_enabled_for `ext then
                      trace!"[ext] trying to apply ext lemma: {n}" >>
                      timetac "[ext] application attempt time" (applyc n cfg)
                    else applyc n cfg) *> pure n)),
                  pure (["apply " ++ rule.to_string]) } <|>
               (fail format!"no applicable extensionality rule found for {subject}"),
         pure new_trace_msg },
    modify (λ ⟨patts, trace_msg, fuel⟩, ⟨patts, trace_msg ++ new_msgs, fuel⟩),
    try_intros_core
meta def ext_core (cfg : apply_cfg := {}) : state_t ext_state tactic unit :=
do acc@⟨_, _, fuel⟩ ← get,
   match fuel with
   | (some 0) := pure ()
   | n        := do { ext1_core cfg,
                      modify (λ ⟨patts, lemmas, _⟩, ⟨patts, lemmas, nat.pred <$> n⟩),
                      ext_core <|> pure () }
   end
meta def ext1 (xs : list rcases_patt) (cfg : apply_cfg := {})
  (trace : bool := ff) : tactic (list rcases_patt) :=
do ⟨_, σ⟩ ← state_t.run (ext1_core cfg) {patts := xs},
   when trace $ tactic.trace $ "Try this: " ++  ", ".intercalate σ.trace_msg,
   pure σ.patts
meta def ext (xs : list rcases_patt) (fuel : option ℕ) (cfg : apply_cfg := {})
  (trace : bool := ff) : tactic (list rcases_patt) :=
do ⟨_, σ⟩ ← state_t.run (ext_core cfg) {patts := xs, fuel := fuel},
   when trace $ tactic.trace $ "Try this: " ++  ", ".intercalate σ.trace_msg,
   pure σ.patts
local postfix `?`:9001 := optional
local postfix *:9001 := many
meta def interactive.ext1 (trace : parse (tk "?")?)
  (xs : parse rcases_patt_parse_hi*) : tactic unit :=
ext1 xs {} trace.is_some $> ()
meta def interactive.ext :
  (parse $ (tk "?")?) → parse rintro_patt_parse_hi* → parse (tk ":" *> small_nat)? → tactic unit
 | trace [] (some n)  := iterate_range 1 n (ext1 [] {} trace.is_some $> ())
 | trace [] none      := repeat1 (ext1 [] {} trace.is_some $> ())
 | trace xs n         := ext xs.join n {} trace.is_some $> ()
add_tactic_doc
{ name        := "ext1 / ext",
  category    := doc_category.tactic,
  decl_names  := [`tactic.interactive.ext1, `tactic.interactive.ext],
  tags        := ["rewriting", "logic"] }
end tactic
end ext
