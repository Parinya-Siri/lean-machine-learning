import category_theory.functor.fully_faithful
namespace category_theory
@[nolint has_inhabited_instance unused_arguments]
def induced_category : Type u‚ÇÅ := C
variables {D}
instance induced_category.has_coe_to_sort {Œ± : Sort*} [has_coe_to_sort D Œ±] :
  has_coe_to_sort (induced_category D F) Œ± :=
‚ü®Œª c, ‚Ü•(F c)‚ü©
instance induced_category.category : category.{v} (induced_category D F) :=
{ hom  := Œª X Y, F X ‚ü∂ F Y,
  id   := Œª X, ùüô (F X),
  comp := Œª _ _ _ f g, f ‚â´ g }
@[simps] def induced_functor : induced_category D F ‚•§ D :=
{ obj := F, map := Œª x y f, f }
instance induced_category.full : full (induced_functor F) :=
{ preimage := Œª x y f, f }
instance induced_category.faithful : faithful (induced_functor F) := {}
end induced
section full_subcategory
variables {C : Type u‚ÇÅ} [category.{v} C]
variables (Z : C ‚Üí Prop)
instance full_subcategory : category.{v} {X : C // Z X} :=
induced_category.category subtype.val
def full_subcategory_inclusion : {X : C // Z X} ‚•§ C :=
induced_functor subtype.val
@[simp] lemma full_subcategory_inclusion.obj {X} :
  (full_subcategory_inclusion Z).obj X = X.val := rfl
@[simp] lemma full_subcategory_inclusion.map {X Y} {f : X ‚ü∂ Y} :
  (full_subcategory_inclusion Z).map f = f := rfl
instance full_subcategory.full : full (full_subcategory_inclusion Z) :=
induced_category.full subtype.val
instance full_subcategory.faithful : faithful (full_subcategory_inclusion Z) :=
induced_category.faithful subtype.val
variables {Z} {Z' : C ‚Üí Prop}
@[simps]
def full_subcategory.map (h : ‚àÄ ‚¶ÉX‚¶Ñ, Z X ‚Üí Z' X) : {X // Z X} ‚•§ {X // Z' X} :=
{ obj := Œª X, ‚ü®X.1, h X.2‚ü©,
  map := Œª X Y f, f }
instance (h : ‚àÄ ‚¶ÉX‚¶Ñ, Z X ‚Üí Z' X) : full (full_subcategory.map h) :=
{ preimage := Œª X Y f, f }
instance (h : ‚àÄ ‚¶ÉX‚¶Ñ, Z X ‚Üí Z' X) : faithful (full_subcategory.map h) := {}
@[simp] lemma full_subcategory.map_inclusion (h : ‚àÄ ‚¶ÉX‚¶Ñ, Z X ‚Üí Z' X) :
  full_subcategory.map h ‚ãô full_subcategory_inclusion Z' = full_subcategory_inclusion Z :=
rfl
section lift
variables {D : Type u‚ÇÇ} [category.{v‚ÇÇ} D] (P Q : D ‚Üí Prop)
@[simps]
def full_subcategory.lift (F : C ‚•§ D) (hF : ‚àÄ X, P (F.obj X)) : C ‚•§ {X // P X} :=
{ obj := Œª X, ‚ü®F.obj X, hF X‚ü©,
  map := Œª X Y f, F.map f }
def full_subcategory.lift_comp_inclusion (F : C ‚•§ D) (hF : ‚àÄ X, P (F.obj X)) :
  full_subcategory.lift P F hF ‚ãô full_subcategory_inclusion P ‚âÖ F :=
nat_iso.of_components (Œª X, iso.refl _) (by simp)
@[simp]
lemma full_subcategory.inclusion_obj_lift_obj (F : C ‚•§ D) (hF : ‚àÄ X, P (F.obj X)) {X : C} :
  (full_subcategory_inclusion P).obj ((full_subcategory.lift P F hF).obj X) = F.obj X :=
rfl
lemma full_subcategory.inclusion_map_lift_map (F : C ‚•§ D) (hF : ‚àÄ X, P (F.obj X)) {X Y : C}
  (f : X ‚ü∂ Y) :
  (full_subcategory_inclusion P).map ((full_subcategory.lift P F hF).map f) = F.map f :=
rfl
instance (F : C ‚•§ D) (hF : ‚àÄ X, P (F.obj X)) [faithful F] :
  faithful (full_subcategory.lift P F hF) :=
faithful.of_comp_iso (full_subcategory.lift_comp_inclusion P F hF)
instance (F : C ‚•§ D) (hF : ‚àÄ X, P (F.obj X)) [full F] : full (full_subcategory.lift P F hF) :=
full.of_comp_faithful_iso (full_subcategory.lift_comp_inclusion P F hF)
@[simp]
lemma full_subcategory.lift_comp_map (F : C ‚•§ D) (hF : ‚àÄ X, P (F.obj X)) (h : ‚àÄ ‚¶ÉX‚¶Ñ, P X ‚Üí Q X) :
  full_subcategory.lift P F hF ‚ãô full_subcategory.map h =
    full_subcategory.lift Q F (Œª X, h (hF X)) :=
rfl
end lift
end full_subcategory
end category_theory
