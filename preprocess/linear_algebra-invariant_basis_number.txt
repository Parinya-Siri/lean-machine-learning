import ring_theory.ideal.quotient
import ring_theory.principal_ideal_domain
noncomputable theory
open_locale classical big_operators
open function
universes u v w
section
variables (R : Type u) [semiring R]
@[mk_iff]
class strong_rank_condition : Prop :=
(le_of_fin_injective : ∀ {n m : ℕ} (f : (fin n → R) →ₗ[R] (fin m → R)), injective f → n ≤ m)
lemma le_of_fin_injective [strong_rank_condition R] {n m : ℕ} (f : (fin n → R) →ₗ[R] (fin m → R)) :
  injective f → n ≤ m :=
strong_rank_condition.le_of_fin_injective f
lemma strong_rank_condition_iff_succ : strong_rank_condition R ↔
  ∀ (n : ℕ) (f : (fin (n + 1) → R) →ₗ[R] (fin n → R)), ¬function.injective f :=
begin
  refine ⟨λ h n, λ f hf, _, λ h, ⟨λ n m f hf, _⟩⟩,
  { letI : strong_rank_condition R := h,
    exact nat.not_succ_le_self n (le_of_fin_injective R f hf) },
  { by_contra H,
    exact h m (f.comp (function.extend_by_zero.linear_map R (fin.cast_le (not_le.1 H))))
      (hf.comp (function.extend_injective (rel_embedding.injective _) 0)) }
end
lemma card_le_of_injective [strong_rank_condition R] {α β : Type*} [fintype α] [fintype β]
  (f : (α → R) →ₗ[R] (β → R)) (i : injective f) : fintype.card α ≤ fintype.card β :=
begin
  let P := linear_equiv.fun_congr_left R R (fintype.equiv_fin α),
  let Q := linear_equiv.fun_congr_left R R (fintype.equiv_fin β),
  exact le_of_fin_injective R ((Q.symm.to_linear_map.comp f).comp P.to_linear_map)
    (((linear_equiv.symm Q).injective.comp i).comp (linear_equiv.injective P)),
end
lemma card_le_of_injective' [strong_rank_condition R] {α β : Type*} [fintype α] [fintype β]
  (f : (α →₀ R) →ₗ[R] (β →₀ R)) (i : injective f) : fintype.card α ≤ fintype.card β :=
begin
  let P := (finsupp.linear_equiv_fun_on_fintype R R β),
  let Q := (finsupp.linear_equiv_fun_on_fintype R R α).symm,
  exact card_le_of_injective R ((P.to_linear_map.comp f).comp Q.to_linear_map)
    ((P.injective.comp i).comp Q.injective)
end
class rank_condition : Prop :=
(le_of_fin_surjective : ∀ {n m : ℕ} (f : (fin n → R) →ₗ[R] (fin m → R)), surjective f → m ≤ n)
lemma le_of_fin_surjective [rank_condition R] {n m : ℕ} (f : (fin n → R) →ₗ[R] (fin m → R)) :
  surjective f → m ≤ n :=
rank_condition.le_of_fin_surjective f
lemma card_le_of_surjective [rank_condition R] {α β : Type*} [fintype α] [fintype β]
  (f : (α → R) →ₗ[R] (β → R)) (i : surjective f) : fintype.card β ≤ fintype.card α :=
begin
  let P := linear_equiv.fun_congr_left R R (fintype.equiv_fin α),
  let Q := linear_equiv.fun_congr_left R R (fintype.equiv_fin β),
  exact le_of_fin_surjective R ((Q.symm.to_linear_map.comp f).comp P.to_linear_map)
    (((linear_equiv.symm Q).surjective.comp i).comp (linear_equiv.surjective P)),
end
lemma card_le_of_surjective' [rank_condition R] {α β : Type*} [fintype α] [fintype β]
  (f : (α →₀ R) →ₗ[R] (β →₀ R)) (i : surjective f) : fintype.card β ≤ fintype.card α :=
begin
  let P := (finsupp.linear_equiv_fun_on_fintype R R β),
  let Q := (finsupp.linear_equiv_fun_on_fintype R R α).symm,
  exact card_le_of_surjective R ((P.to_linear_map.comp f).comp Q.to_linear_map)
    ((P.surjective.comp i).comp Q.surjective)
end
@[priority 100]
instance rank_condition_of_strong_rank_condition [strong_rank_condition R] : rank_condition R :=
{ le_of_fin_surjective := λ n m f s,
    le_of_fin_injective R _ (f.splitting_of_fun_on_fintype_surjective_injective s), }
class invariant_basis_number : Prop :=
(eq_of_fin_equiv : ∀ {n m : ℕ}, ((fin n → R) ≃ₗ[R] (fin m → R)) → n = m)
@[priority 100]
instance invariant_basis_number_of_rank_condition [rank_condition R] : invariant_basis_number R :=
{ eq_of_fin_equiv := λ n m e, le_antisymm
    (le_of_fin_surjective R e.symm.to_linear_map e.symm.surjective)
    (le_of_fin_surjective R e.to_linear_map e.surjective) }
end
section
variables (R : Type u) [semiring R] [invariant_basis_number R]
lemma eq_of_fin_equiv {n m : ℕ} : ((fin n → R) ≃ₗ[R] (fin m → R)) → n = m :=
invariant_basis_number.eq_of_fin_equiv
lemma card_eq_of_lequiv {α β : Type*} [fintype α] [fintype β]
  (f : (α → R) ≃ₗ[R] (β → R)) : fintype.card α = fintype.card β :=
eq_of_fin_equiv R (((linear_equiv.fun_congr_left R R (fintype.equiv_fin α)).trans f) ≪≫ₗ
  ((linear_equiv.fun_congr_left R R (fintype.equiv_fin β)).symm))
lemma nontrivial_of_invariant_basis_number : nontrivial R :=
begin
  by_contra h,
  refine zero_ne_one (eq_of_fin_equiv R _),
  haveI := not_nontrivial_iff_subsingleton.1 h,
  haveI : subsingleton (fin 1 → R) := ⟨λ a b, funext $ λ x, subsingleton.elim _ _⟩,
  refine { .. }; { intros, exact 0 } <|> tidy
end
end
section
variables (R : Type u) [ring R] [nontrivial R] [is_noetherian_ring R]
section
variables {R : Type u} [comm_ring R] (I : ideal R) {ι : Type v} [fintype ι] {ι' : Type w}
private def induced_map (I : ideal R) (e : (ι → R) →ₗ[R] (ι' → R)) :
  (ι → R) ⧸ (I.pi ι) → (ι' → R) ⧸ I.pi ι' :=
λ x, quotient.lift_on' x (λ y, ideal.quotient.mk _ (e y))
begin
  refine λ a b hab, ideal.quotient.eq.2 (λ h, _),
  rw submodule.quotient_rel_r_def at hab,
  rw ←linear_map.map_sub,
  exact ideal.map_pi _ _ hab e h,
end
private def induced_equiv [fintype ι'] (I : ideal R) (e : (ι → R) ≃ₗ[R] (ι' → R)) :
  ((ι → R) ⧸ I.pi ι) ≃ₗ[R ⧸ I] (ι' → R) ⧸ I.pi ι' :=
begin
  refine { to_fun := induced_map I e, inv_fun := induced_map I e.symm, .. },
  all_goals { rintro ⟨a⟩ ⟨b⟩ <|> rintro ⟨a⟩,
    change ideal.quotient.mk _ _ = ideal.quotient.mk _ _,
    congr, simp }
end
end
section
local attribute [instance] ideal.quotient.field
@[priority 100]
instance invariant_basis_number_of_nontrivial_of_comm_ring {R : Type u} [comm_ring R]
  [nontrivial R] : invariant_basis_number R :=
⟨λ n m e, let ⟨I, hI⟩ := ideal.exists_maximal R in
  by exactI eq_of_fin_equiv (R ⧸ I)
    ((ideal.pi_quot_equiv _ _).symm ≪≫ₗ ((induced_equiv _ e) ≪≫ₗ (ideal.pi_quot_equiv _ _)))⟩
end
