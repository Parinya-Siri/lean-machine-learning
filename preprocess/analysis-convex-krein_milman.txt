import analysis.convex.exposed
import analysis.normed_space.hahn_banach.separation
open set
open_locale classical
variables {E : Type*} [normed_group E] [normed_space ℝ E] {s : set E}
lemma is_compact.has_extreme_point (hscomp : is_compact s) (hsnemp : s.nonempty) :
  (s.extreme_points ℝ).nonempty :=
begin
  let S : set (set E) := {t | t.nonempty ∧ is_closed t ∧ is_extreme ℝ s t},
  suffices h : ∃ t ∈ S, ∀ u ∈ S, u ⊆ t → u = t,
  { obtain ⟨t, ⟨⟨x, hxt⟩, htclos, hst⟩, hBmin⟩ := h,
    refine ⟨x, mem_extreme_points_iff_extreme_singleton.2 _⟩,
    rwa ←eq_singleton_iff_unique_mem.2 ⟨hxt, λ y hyB, _⟩,
    by_contra hyx,
    obtain ⟨l, hl⟩ := geometric_hahn_banach_point_point hyx,
    obtain ⟨z, hzt, hz⟩ := (compact_of_is_closed_subset hscomp htclos hst.1).exists_forall_ge
      ⟨x, hxt⟩ l.continuous.continuous_on,
    have h : is_exposed ℝ t {z ∈ t | ∀ w ∈ t, l w ≤ l z} := λ h, ⟨l, rfl⟩,
    rw ←hBmin {z ∈ t | ∀ w ∈ t, l w ≤ l z} ⟨⟨z, hzt, hz⟩, h.is_closed htclos, hst.trans
      h.is_extreme⟩ (t.sep_subset _) at hyB,
    exact hl.not_le (hyB.2 x hxt) },
  refine zorn_superset _ (λ F hFS hF, _),
  obtain rfl | hFnemp := F.eq_empty_or_nonempty,
  { exact ⟨s, ⟨hsnemp, hscomp.is_closed, is_extreme.rfl⟩, λ _, false.elim⟩ },
  refine ⟨⋂₀ F, ⟨_, is_closed_sInter $ λ t ht, (hFS ht).2.1, is_extreme_sInter hFnemp $
    λ t ht, (hFS ht).2.2⟩, λ t ht, sInter_subset_of_mem ht⟩,
  haveI : nonempty ↥F := hFnemp.to_subtype,
  rw sInter_eq_Inter,
  refine is_compact.nonempty_Inter_of_directed_nonempty_compact_closed _ (λ t u, _)
    (λ t, (hFS t.mem).1) (λ t, compact_of_is_closed_subset hscomp (hFS t.mem).2.1 (hFS t.mem).2.2.1)
    (λ t, (hFS t.mem).2.1),
  obtain htu | hut := hF.total t.mem u.mem,
  exacts [⟨t, subset.rfl, htu⟩, ⟨u, hut, subset.rfl⟩],
end
lemma closure_convex_hull_extreme_points (hscomp : is_compact s) (hAconv : convex ℝ s) :
  closure (convex_hull ℝ $ s.extreme_points ℝ) = s :=
begin
  apply (closure_minimal (convex_hull_min extreme_points_subset hAconv) hscomp.is_closed).antisymm,
  by_contra hs,
  obtain ⟨x, hxA, hxt⟩ := not_subset.1 hs,
  obtain ⟨l, r, hlr, hrx⟩ := geometric_hahn_banach_closed_point (convex_convex_hull _ _).closure
    is_closed_closure hxt,
  have h : is_exposed ℝ s {y ∈ s | ∀ z ∈ s, l z ≤ l y} := λ _, ⟨l, rfl⟩,
  obtain ⟨z, hzA, hz⟩ := hscomp.exists_forall_ge ⟨x, hxA⟩ l.continuous.continuous_on,
  obtain ⟨y, hy⟩ := (h.is_compact hscomp).has_extreme_point ⟨z, hzA, hz⟩,
  linarith [hlr _ (subset_closure $ subset_convex_hull _ _ $
    h.is_extreme.extreme_points_subset_extreme_points hy), hy.1.2 x hxA],
end
