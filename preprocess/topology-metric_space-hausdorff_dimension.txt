import measure_theory.measure.hausdorff
open_locale measure_theory ennreal nnreal topological_space
open measure_theory measure_theory.measure set topological_space finite_dimensional filter
variables {Œπ X Y : Type*} [emetric_space X] [emetric_space Y]
@[irreducible] noncomputable def dimH (s : set X) : ‚Ñù‚â•0‚àû :=
by { borelize X, exact ‚®Ü (d : ‚Ñù‚â•0) (hd : @hausdorff_measure X _ _ ‚ü®rfl‚ü© d s = ‚àû), d }
section measurable
variables [measurable_space X] [borel_space X]
lemma dimH_def (s : set X) : dimH s = ‚®Ü (d : ‚Ñù‚â•0) (hd : ŒºH[d] s = ‚àû), d :=
by { borelize X, rw dimH }
lemma hausdorff_measure_of_lt_dimH {s : set X} {d : ‚Ñù‚â•0} (h : ‚Üëd < dimH s) : ŒºH[d] s = ‚àû :=
begin
  simp only [dimH_def, lt_supr_iff] at h,
  rcases h with ‚ü®d', hsd', hdd'‚ü©,
  rw [ennreal.coe_lt_coe, ‚Üê nnreal.coe_lt_coe] at hdd',
  exact top_unique (hsd' ‚ñ∏ hausdorff_measure_mono hdd'.le _)
end
lemma dimH_le {s : set X} {d : ‚Ñù‚â•0‚àû} (H : ‚àÄ d' : ‚Ñù‚â•0, ŒºH[d'] s = ‚àû ‚Üí ‚Üëd' ‚â§ d) : dimH s ‚â§ d :=
(dimH_def s).trans_le $ supr‚ÇÇ_le H
lemma dimH_le_of_hausdorff_measure_ne_top {s : set X} {d : ‚Ñù‚â•0} (h : ŒºH[d] s ‚â† ‚àû) :
  dimH s ‚â§ d :=
le_of_not_lt $ mt hausdorff_measure_of_lt_dimH h
lemma le_dimH_of_hausdorff_measure_eq_top {s : set X} {d : ‚Ñù‚â•0} (h : ŒºH[d] s = ‚àû) :
  ‚Üëd ‚â§ dimH s :=
by { rw dimH_def, exact le_supr‚ÇÇ d h }
lemma hausdorff_measure_of_dimH_lt {s : set X} {d : ‚Ñù‚â•0}
  (h : dimH s < d) : ŒºH[d] s = 0 :=
begin
  rw dimH_def at h,
  rcases ennreal.lt_iff_exists_nnreal_btwn.1 h with ‚ü®d', hsd', hd'd‚ü©,
  rw [ennreal.coe_lt_coe, ‚Üê nnreal.coe_lt_coe] at hd'd,
  exact (hausdorff_measure_zero_or_top hd'd s).resolve_right (Œª h, hsd'.not_le $ le_supr‚ÇÇ d' h)
end
lemma measure_zero_of_dimH_lt {Œº : measure X} {d : ‚Ñù‚â•0}
  (h : Œº ‚â™ ŒºH[d]) {s : set X} (hd : dimH s < d) :
  Œº s = 0 :=
h $ hausdorff_measure_of_dimH_lt hd
lemma le_dimH_of_hausdorff_measure_ne_zero {s : set X} {d : ‚Ñù‚â•0} (h : ŒºH[d] s ‚â† 0) :
  ‚Üëd ‚â§ dimH s :=
le_of_not_lt $ mt hausdorff_measure_of_dimH_lt h
lemma dimH_of_hausdorff_measure_ne_zero_ne_top {d : ‚Ñù‚â•0} {s : set X} (h : ŒºH[d] s ‚â† 0)
  (h' : ŒºH[d] s ‚â† ‚àû) : dimH s = d :=
le_antisymm (dimH_le_of_hausdorff_measure_ne_top h') (le_dimH_of_hausdorff_measure_ne_zero h)
end measurable
@[mono] lemma dimH_mono {s t : set X} (h : s ‚äÜ t) : dimH s ‚â§ dimH t :=
begin
  borelize X,
  exact dimH_le (Œª d hd, le_dimH_of_hausdorff_measure_eq_top $
    top_unique $ hd ‚ñ∏ measure_mono h)
end
lemma dimH_subsingleton {s : set X} (h : s.subsingleton) : dimH s = 0 :=
begin
  borelize X,
  apply le_antisymm _ (zero_le _),
  refine dimH_le_of_hausdorff_measure_ne_top _,
  exact ((hausdorff_measure_le_one_of_subsingleton h le_rfl).trans_lt ennreal.one_lt_top).ne,
end
alias dimH_subsingleton ‚Üê set.subsingleton.dimH_zero
@[simp] lemma dimH_empty : dimH (‚àÖ : set X) = 0 := subsingleton_empty.dimH_zero
@[simp] lemma dimH_singleton (x : X) : dimH ({x} : set X) = 0 := subsingleton_singleton.dimH_zero
@[simp] lemma dimH_Union [encodable Œπ] (s : Œπ ‚Üí set X) :
  dimH (‚ãÉ i, s i) = ‚®Ü i, dimH (s i) :=
begin
  borelize X,
  refine le_antisymm (dimH_le $ Œª d hd, _) (supr_le $ Œª i, dimH_mono $ subset_Union _ _),
  contrapose! hd,
  have : ‚àÄ i, ŒºH[d] (s i) = 0,
    from Œª i, hausdorff_measure_of_dimH_lt ((le_supr (Œª i, dimH (s i)) i).trans_lt hd),
  rw measure_Union_null this,
  exact ennreal.zero_ne_top
end
@[simp] lemma dimH_bUnion {s : set Œπ} (hs : s.countable) (t : Œπ ‚Üí set X) :
  dimH (‚ãÉ i ‚àà s, t i) = ‚®Ü i ‚àà s, dimH (t i) :=
begin
  haveI := hs.to_encodable,
  rw [bUnion_eq_Union, dimH_Union, ‚Üê supr_subtype'']
end
@[simp] lemma dimH_sUnion {S : set (set X)} (hS : S.countable) : dimH (‚ãÉ‚ÇÄ S) = ‚®Ü s ‚àà S, dimH s :=
by rw [sUnion_eq_bUnion, dimH_bUnion hS]
@[simp] lemma dimH_union (s t : set X) : dimH (s ‚à™ t) = max (dimH s) (dimH t) :=
by rw [union_eq_Union, dimH_Union, supr_bool_eq, cond, cond, ennreal.sup_eq_max]
lemma dimH_countable {s : set X} (hs : s.countable) : dimH s = 0 :=
bUnion_of_singleton s ‚ñ∏ by simp only [dimH_bUnion hs, dimH_singleton, ennreal.supr_zero_eq_zero]
alias dimH_countable ‚Üê set.countable.dimH_zero
lemma dimH_finite {s : set X} (hs : s.finite) : dimH s = 0 := hs.countable.dimH_zero
alias dimH_finite ‚Üê set.finite.dimH_zero
@[simp] lemma dimH_coe_finset (s : finset X) : dimH (s : set X) = 0 := s.finite_to_set.dimH_zero
alias dimH_coe_finset ‚Üê finset.dimH_zero
section
variables [second_countable_topology X]
lemma exists_mem_nhds_within_lt_dimH_of_lt_dimH {s : set X} {r : ‚Ñù‚â•0‚àû} (h : r < dimH s) :
  ‚àÉ x ‚àà s, ‚àÄ t ‚àà ùìù[s] x, r < dimH t :=
begin
  contrapose! h, choose! t htx htr using h,
  rcases countable_cover_nhds_within htx with ‚ü®S, hSs, hSc, hSU‚ü©,
  calc dimH s ‚â§ dimH (‚ãÉ x ‚àà S, t x) : dimH_mono hSU
  ... = ‚®Ü x ‚àà S, dimH (t x) : dimH_bUnion hSc _
  ... ‚â§ r : supr‚ÇÇ_le (Œª x hx, htr x $ hSs hx)
end
lemma bsupr_limsup_dimH (s : set X) : (‚®Ü x ‚àà s, limsup (ùìù[s] x).small_sets dimH) = dimH s :=
begin
  refine le_antisymm (supr‚ÇÇ_le $ Œª x hx, _) _,
  { refine Limsup_le_of_le (by apply_auto_param) (eventually_map.2 _),
    exact eventually_small_sets.2 ‚ü®s, self_mem_nhds_within, Œª t, dimH_mono‚ü© },
  { refine le_of_forall_ge_of_dense (Œª r hr, _),
    rcases exists_mem_nhds_within_lt_dimH_of_lt_dimH hr with ‚ü®x, hxs, hxr‚ü©,
    refine le_supr‚ÇÇ_of_le x hxs _, rw limsup_eq, refine le_Inf (Œª b hb, _),
    rcases eventually_small_sets.1 hb with ‚ü®t, htx, ht‚ü©,
    exact (hxr t htx).le.trans (ht t subset.rfl) }
end
lemma supr_limsup_dimH (s : set X) : (‚®Ü x, limsup (ùìù[s] x).small_sets dimH) = dimH s :=
begin
  refine le_antisymm (supr_le $ Œª x, _) _,
  { refine Limsup_le_of_le (by apply_auto_param) (eventually_map.2 _),
    exact eventually_small_sets.2 ‚ü®s, self_mem_nhds_within, Œª t, dimH_mono‚ü© },
  { rw ‚Üê bsupr_limsup_dimH, exact supr‚ÇÇ_le_supr _ _ }
end
end
variables {C K r : ‚Ñù‚â•0} {f : X ‚Üí Y} {s t : set X}
lemma holder_on_with.dimH_image_le (h : holder_on_with C r f s) (hr : 0 < r) :
  dimH (f '' s) ‚â§ dimH s / r :=
begin
  borelize [X, Y],
  refine dimH_le (Œª d hd, _),
  have := h.hausdorff_measure_image_le hr d.coe_nonneg,
  rw [hd, ennreal.coe_rpow_of_nonneg _ d.coe_nonneg, top_le_iff] at this,
  have Hrd : ŒºH[(r * d : ‚Ñù‚â•0)] s = ‚ä§,
  { contrapose this, exact ennreal.mul_ne_top ennreal.coe_ne_top this },
  rw [ennreal.le_div_iff_mul_le, mul_comm, ‚Üê ennreal.coe_mul],
  exacts [le_dimH_of_hausdorff_measure_eq_top Hrd, or.inl (mt ennreal.coe_eq_zero.1 hr.ne'),
    or.inl ennreal.coe_ne_top]
end
namespace holder_with
lemma dimH_image_le (h : holder_with C r f) (hr : 0 < r) (s : set X) :
  dimH (f '' s) ‚â§ dimH s / r :=
(h.holder_on_with s).dimH_image_le hr
lemma dimH_range_le (h : holder_with C r f) (hr : 0 < r) :
  dimH (range f) ‚â§ dimH (univ : set X) / r :=
@image_univ _ _ f ‚ñ∏ h.dimH_image_le hr univ
end holder_with
lemma dimH_image_le_of_locally_holder_on [second_countable_topology X] {r : ‚Ñù‚â•0} {f : X ‚Üí Y}
  (hr : 0 < r) {s : set X} (hf : ‚àÄ x ‚àà s, ‚àÉ (C : ‚Ñù‚â•0) (t ‚àà ùìù[s] x), holder_on_with C r f t) :
  dimH (f '' s) ‚â§ dimH s / r :=
begin
  choose! C t htn hC using hf,
  rcases countable_cover_nhds_within htn with ‚ü®u, hus, huc, huU‚ü©,
  replace huU := inter_eq_self_of_subset_left huU, rw inter_Union‚ÇÇ at huU,
  rw [‚Üê huU, image_Union‚ÇÇ, dimH_bUnion huc, dimH_bUnion huc], simp only [ennreal.supr_div],
  exact supr‚ÇÇ_mono (Œª x hx, ((hC x (hus hx)).mono (inter_subset_right _ _)).dimH_image_le hr)
end
lemma dimH_range_le_of_locally_holder_on [second_countable_topology X] {r : ‚Ñù‚â•0} {f : X ‚Üí Y}
  (hr : 0 < r) (hf : ‚àÄ x : X, ‚àÉ (C : ‚Ñù‚â•0) (s ‚àà ùìù x), holder_on_with C r f s) :
  dimH (range f) ‚â§ dimH (univ : set X) / r :=
begin
  rw ‚Üê image_univ,
  refine dimH_image_le_of_locally_holder_on hr (Œª x _, _),
  simpa only [exists_prop, nhds_within_univ] using hf x
end
lemma lipschitz_on_with.dimH_image_le (h : lipschitz_on_with K f s) : dimH (f '' s) ‚â§ dimH s :=
by simpa using h.holder_on_with.dimH_image_le zero_lt_one
namespace lipschitz_with
lemma dimH_image_le (h : lipschitz_with K f) (s : set X) : dimH (f '' s) ‚â§ dimH s :=
(h.lipschitz_on_with s).dimH_image_le
lemma dimH_range_le (h : lipschitz_with K f) : dimH (range f) ‚â§ dimH (univ : set X) :=
@image_univ _ _ f ‚ñ∏ h.dimH_image_le univ
end lipschitz_with
lemma dimH_image_le_of_locally_lipschitz_on [second_countable_topology X] {f : X ‚Üí Y}
  {s : set X} (hf : ‚àÄ x ‚àà s, ‚àÉ (C : ‚Ñù‚â•0) (t ‚àà ùìù[s] x), lipschitz_on_with C f t) :
  dimH (f '' s) ‚â§ dimH s :=
begin
  have : ‚àÄ x ‚àà s, ‚àÉ (C : ‚Ñù‚â•0) (t ‚àà ùìù[s] x), holder_on_with C 1 f t,
    by simpa only [holder_on_with_one] using hf,
  simpa only [ennreal.coe_one, ennreal.div_one]
    using dimH_image_le_of_locally_holder_on zero_lt_one this
end
lemma dimH_range_le_of_locally_lipschitz_on [second_countable_topology X] {f : X ‚Üí Y}
  (hf : ‚àÄ x : X, ‚àÉ (C : ‚Ñù‚â•0) (s ‚àà ùìù x), lipschitz_on_with C f s) :
  dimH (range f) ‚â§ dimH (univ : set X) :=
begin
  rw ‚Üê image_univ,
  refine dimH_image_le_of_locally_lipschitz_on (Œª x _, _),
  simpa only [exists_prop, nhds_within_univ] using hf x
end
namespace antilipschitz_with
lemma dimH_preimage_le (hf : antilipschitz_with K f) (s : set Y) :
  dimH (f ‚Åª¬π' s) ‚â§ dimH s :=
begin
  borelize [X, Y],
  refine dimH_le (Œª d hd, le_dimH_of_hausdorff_measure_eq_top _),
  have := hf.hausdorff_measure_preimage_le d.coe_nonneg s,
  rw [hd, top_le_iff] at this,
  contrapose! this,
  exact ennreal.mul_ne_top (by simp) this
end
lemma le_dimH_image (hf : antilipschitz_with K f) (s : set X) :
  dimH s ‚â§ dimH (f '' s) :=
calc dimH s ‚â§ dimH (f ‚Åª¬π' (f '' s)) : dimH_mono (subset_preimage_image _ _)
        ... ‚â§ dimH (f '' s)         : hf.dimH_preimage_le _
end antilipschitz_with
lemma isometry.dimH_image (hf : isometry f) (s : set X) : dimH (f '' s) = dimH s :=
le_antisymm (hf.lipschitz.dimH_image_le _) (hf.antilipschitz.le_dimH_image _)
namespace isometric
@[simp] lemma dimH_image (e : X ‚âÉ·µ¢ Y) (s : set X) : dimH (e '' s) = dimH s :=
e.isometry.dimH_image s
@[simp] lemma dimH_preimage (e : X ‚âÉ·µ¢ Y) (s : set Y) : dimH (e ‚Åª¬π' s) = dimH s :=
by rw [‚Üê e.image_symm, e.symm.dimH_image]
lemma dimH_univ (e : X ‚âÉ·µ¢ Y) : dimH (univ : set X) = dimH (univ : set Y) :=
by rw [‚Üê e.dimH_preimage univ, preimage_univ]
end isometric
namespace continuous_linear_equiv
variables {ùïú E F : Type*} [nondiscrete_normed_field ùïú]
  [normed_group E] [normed_space ùïú E] [normed_group F] [normed_space ùïú F]
@[simp] lemma dimH_image (e : E ‚âÉL[ùïú] F) (s : set E) : dimH (e '' s) = dimH s :=
le_antisymm (e.lipschitz.dimH_image_le s) $
  by simpa only [e.symm_image_image] using e.symm.lipschitz.dimH_image_le (e '' s)
@[simp] lemma dimH_preimage (e : E ‚âÉL[ùïú] F) (s : set F) : dimH (e ‚Åª¬π' s) = dimH s :=
by rw [‚Üê e.image_symm_eq_preimage, e.symm.dimH_image]
lemma dimH_univ (e : E ‚âÉL[ùïú] F) : dimH (univ : set E) = dimH (univ : set F) :=
by rw [‚Üê e.dimH_preimage, preimage_univ]
end continuous_linear_equiv
namespace real
variables {E : Type*} [fintype Œπ] [normed_group E] [normed_space ‚Ñù E] [finite_dimensional ‚Ñù E]
theorem dimH_ball_pi (x : Œπ ‚Üí ‚Ñù) {r : ‚Ñù} (hr : 0 < r) :
  dimH (metric.ball x r) = fintype.card Œπ :=
begin
  casesI is_empty_or_nonempty Œπ,
  { rwa [dimH_subsingleton, eq_comm, nat.cast_eq_zero, fintype.card_eq_zero_iff],
    exact Œª x _ y _, subsingleton.elim x y },
  { rw ‚Üê ennreal.coe_nat,
    have : ŒºH[fintype.card Œπ] (metric.ball x r) = ennreal.of_real ((2 * r) ^ fintype.card Œπ),
      by rw [hausdorff_measure_pi_real, real.volume_pi_ball _ hr],
    refine dimH_of_hausdorff_measure_ne_zero_ne_top _ _; rw [nnreal.coe_nat_cast, this],
    { simp [pow_pos (mul_pos zero_lt_two hr)] },
    { exact ennreal.of_real_ne_top } }
end
theorem dimH_ball_pi_fin {n : ‚Ñï} (x : fin n ‚Üí ‚Ñù) {r : ‚Ñù} (hr : 0 < r) :
  dimH (metric.ball x r) = n :=
by rw [dimH_ball_pi x hr, fintype.card_fin]
theorem dimH_univ_pi (Œπ : Type*) [fintype Œπ] : dimH (univ : set (Œπ ‚Üí ‚Ñù)) = fintype.card Œπ :=
by simp only [‚Üê metric.Union_ball_nat_succ (0 : Œπ ‚Üí ‚Ñù), dimH_Union,
  dimH_ball_pi _ (nat.cast_add_one_pos _), supr_const]
theorem dimH_univ_pi_fin (n : ‚Ñï) : dimH (univ : set (fin n ‚Üí ‚Ñù)) = n :=
by rw [dimH_univ_pi, fintype.card_fin]
theorem dimH_of_mem_nhds {x : E} {s : set E} (h : s ‚àà ùìù x) :
  dimH s = finrank ‚Ñù E :=
begin
  have e : E ‚âÉL[‚Ñù] (fin (finrank ‚Ñù E) ‚Üí ‚Ñù),
    from continuous_linear_equiv.of_finrank_eq (finite_dimensional.finrank_fin_fun ‚Ñù).symm,
  rw ‚Üê e.dimH_image,
  refine le_antisymm _ _,
  { exact (dimH_mono (subset_univ _)).trans_eq (dimH_univ_pi_fin _) },
  { have : e '' s ‚àà ùìù (e x), by { rw ‚Üê e.map_nhds_eq, exact image_mem_map h },
    rcases metric.nhds_basis_ball.mem_iff.1 this with ‚ü®r, hr0, hr‚ü©,
    simpa only [dimH_ball_pi_fin (e x) hr0] using dimH_mono hr }
end
theorem dimH_of_nonempty_interior {s : set E} (h : (interior s).nonempty) :
  dimH s = finrank ‚Ñù E :=
let ‚ü®x, hx‚ü© := h in dimH_of_mem_nhds (mem_interior_iff_mem_nhds.1 hx)
variable (E)
theorem dimH_univ_eq_finrank : dimH (univ : set E) = finrank ‚Ñù E :=
dimH_of_mem_nhds (@univ_mem _ (ùìù 0))
theorem dimH_univ : dimH (univ : set ‚Ñù) = 1 :=
by rw [dimH_univ_eq_finrank ‚Ñù, finite_dimensional.finrank_self, nat.cast_one]
end real
variables {E F : Type*}
  [normed_group E] [normed_space ‚Ñù E] [finite_dimensional ‚Ñù E]
  [normed_group F] [normed_space ‚Ñù F]
theorem dense_compl_of_dimH_lt_finrank {s : set E} (hs : dimH s < finrank ‚Ñù E) : dense s·∂ú :=
begin
  refine Œª x, mem_closure_iff_nhds.2 (Œª t ht, ne_empty_iff_nonempty.1 $ Œª he, hs.not_le _),
  rw [‚Üê diff_eq, diff_eq_empty] at he,
  rw [‚Üê real.dimH_of_mem_nhds ht],
  exact dimH_mono he
end
lemma cont_diff_on.dimH_image_le {f : E ‚Üí F} {s t : set E} (hf : cont_diff_on ‚Ñù 1 f s)
  (hc : convex ‚Ñù s) (ht : t ‚äÜ s) :
  dimH (f '' t) ‚â§ dimH t :=
dimH_image_le_of_locally_lipschitz_on $ Œª x hx,
  let ‚ü®C, u, hu, hf‚ü© := (hf x (ht hx)).exists_lipschitz_on_with hc
  in ‚ü®C, u, nhds_within_mono _ ht hu, hf‚ü©
lemma cont_diff.dimH_range_le {f : E ‚Üí F} (h : cont_diff ‚Ñù 1 f) :
  dimH (range f) ‚â§ finrank ‚Ñù E :=
calc dimH (range f) = dimH (f '' univ) : by rw image_univ
... ‚â§ dimH (univ : set E) : h.cont_diff_on.dimH_image_le convex_univ subset.rfl
... = finrank ‚Ñù E : real.dimH_univ_eq_finrank E
lemma cont_diff_on.dense_compl_image_of_dimH_lt_finrank [finite_dimensional ‚Ñù F] {f : E ‚Üí F}
  {s t : set E} (h : cont_diff_on ‚Ñù 1 f s) (hc : convex ‚Ñù s) (ht : t ‚äÜ s)
  (htF : dimH t < finrank ‚Ñù F) :
  dense (f '' t)·∂ú :=
dense_compl_of_dimH_lt_finrank $ (h.dimH_image_le hc ht).trans_lt htF
lemma cont_diff.dense_compl_range_of_finrank_lt_finrank [finite_dimensional ‚Ñù F] {f : E ‚Üí F}
  (h : cont_diff ‚Ñù 1 f) (hEF : finrank ‚Ñù E < finrank ‚Ñù F) :
  dense (range f)·∂ú :=
dense_compl_of_dimH_lt_finrank $ h.dimH_range_le.trans_lt $ ennreal.coe_nat_lt_coe_nat.2 hEF
