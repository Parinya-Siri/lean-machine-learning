import measure_theory.measure.measure_space
import measure_theory.integral.set_integral
import topology.continuous_function.bounded
import topology.algebra.module.weak_dual
import topology.metric_space.thickened_indicator
noncomputable theory
open measure_theory
open set
open filter
open bounded_continuous_function
open_locale topological_space ennreal nnreal bounded_continuous_function
namespace measure_theory
namespace finite_measure
section finite_measure
variables {Œ± : Type*} [measurable_space Œ±]
def _root_.measure_theory.finite_measure (Œ± : Type*) [measurable_space Œ±] : Type* :=
{Œº : measure Œ± // is_finite_measure Œº}
instance : has_coe (finite_measure Œ±) (measure_theory.measure Œ±) := coe_subtype
instance is_finite_measure (Œº : finite_measure Œ±) :
  is_finite_measure (Œº : measure Œ±) := Œº.prop
instance : has_coe_to_fun (finite_measure Œ±) (Œª _, set Œ± ‚Üí ‚Ñù‚â•0) :=
‚ü®Œª Œº s, (Œº s).to_nnreal‚ü©
lemma coe_fn_eq_to_nnreal_coe_fn_to_measure (ŒΩ : finite_measure Œ±) :
  (ŒΩ : set Œ± ‚Üí ‚Ñù‚â•0) = Œª s, ((ŒΩ : measure Œ±) s).to_nnreal := rfl
@[simp] lemma ennreal_coe_fn_eq_coe_fn_to_measure (ŒΩ : finite_measure Œ±) (s : set Œ±) :
  (ŒΩ s : ‚Ñù‚â•0‚àû) = (ŒΩ : measure Œ±) s := ennreal.coe_to_nnreal (measure_lt_top ‚ÜëŒΩ s).ne
@[simp] lemma val_eq_to_measure (ŒΩ : finite_measure Œ±) : ŒΩ.val = (ŒΩ : measure Œ±) := rfl
lemma coe_injective : function.injective (coe : finite_measure Œ± ‚Üí measure Œ±) :=
subtype.coe_injective
def mass (Œº : finite_measure Œ±) : ‚Ñù‚â•0 := Œº univ
@[simp] lemma ennreal_mass {Œº : finite_measure Œ±} :
  (Œº.mass : ‚Ñù‚â•0‚àû) = (Œº : measure Œ±) univ := ennreal_coe_fn_eq_coe_fn_to_measure Œº set.univ
instance has_zero : has_zero (finite_measure Œ±) :=
{ zero := ‚ü®0, measure_theory.is_finite_measure_zero‚ü© }
instance : inhabited (finite_measure Œ±) := ‚ü®0‚ü©
instance : has_add (finite_measure Œ±) :=
{ add := Œª Œº ŒΩ, ‚ü®Œº + ŒΩ, measure_theory.is_finite_measure_add‚ü© }
variables {R : Type*} [has_smul R ‚Ñù‚â•0] [has_smul R ‚Ñù‚â•0‚àû] [is_scalar_tower R ‚Ñù‚â•0 ‚Ñù‚â•0‚àû]
  [is_scalar_tower R ‚Ñù‚â•0‚àû ‚Ñù‚â•0‚àû]
instance : has_smul R (finite_measure Œ±) :=
{ smul := Œª (c : R) Œº, ‚ü®c ‚Ä¢ Œº, measure_theory.is_finite_measure_smul_of_nnreal_tower‚ü©, }
@[simp, norm_cast] lemma coe_zero : (coe : finite_measure Œ± ‚Üí measure Œ±) 0 = 0 := rfl
@[simp, norm_cast] lemma coe_add (Œº ŒΩ : finite_measure Œ±) : ‚Üë(Œº + ŒΩ) = (‚ÜëŒº + ‚ÜëŒΩ : measure Œ±) := rfl
@[simp, norm_cast] lemma coe_smul (c : R) (Œº : finite_measure Œ±) :
  ‚Üë(c ‚Ä¢ Œº) = (c ‚Ä¢ ‚ÜëŒº : measure Œ±) := rfl
@[simp, norm_cast] lemma coe_fn_zero :
  (‚áë(0 : finite_measure Œ±) : set Œ± ‚Üí ‚Ñù‚â•0) = (0 : set Œ± ‚Üí ‚Ñù‚â•0) := by { funext, refl, }
@[simp, norm_cast] lemma coe_fn_add (Œº ŒΩ : finite_measure Œ±) :
  (‚áë(Œº + ŒΩ) : set Œ± ‚Üí ‚Ñù‚â•0) = (‚áëŒº + ‚áëŒΩ : set Œ± ‚Üí ‚Ñù‚â•0) :=
by { funext, simp [‚Üê ennreal.coe_eq_coe], }
@[simp, norm_cast] lemma coe_fn_smul [is_scalar_tower R ‚Ñù‚â•0 ‚Ñù‚â•0] (c : R) (Œº : finite_measure Œ±) :
  (‚áë(c ‚Ä¢ Œº) : set Œ± ‚Üí ‚Ñù‚â•0) = c ‚Ä¢ (‚áëŒº : set Œ± ‚Üí ‚Ñù‚â•0) :=
by { funext, simp [‚Üê ennreal.coe_eq_coe, ennreal.coe_smul], }
instance : add_comm_monoid (finite_measure Œ±) :=
finite_measure.coe_injective.add_comm_monoid coe coe_zero coe_add (Œª _ _, coe_smul _ _)
@[simps]
def coe_add_monoid_hom : finite_measure Œ± ‚Üí+ measure Œ± :=
{ to_fun := coe, map_zero' := coe_zero, map_add' := coe_add }
instance {Œ± : Type*} [measurable_space Œ±] : module ‚Ñù‚â•0 (finite_measure Œ±) :=
function.injective.module _ coe_add_monoid_hom finite_measure.coe_injective coe_smul
variables [topological_space Œ±]
def test_against_nn (Œº : finite_measure Œ±) (f : Œ± ‚Üí·µá ‚Ñù‚â•0) : ‚Ñù‚â•0 :=
(‚à´‚Åª x, f x ‚àÇ(Œº : measure Œ±)).to_nnreal
lemma _root_.bounded_continuous_function.nnreal.to_ennreal_comp_measurable {Œ± : Type*}
  [topological_space Œ±] [measurable_space Œ±] [opens_measurable_space Œ±] (f : Œ± ‚Üí·µá ‚Ñù‚â•0) :
  measurable (Œª x, (f x : ‚Ñù‚â•0‚àû)) :=
measurable_coe_nnreal_ennreal.comp f.continuous.measurable
lemma _root_.measure_theory.lintegral_lt_top_of_bounded_continuous_to_nnreal
  (Œº : measure Œ±) [is_finite_measure Œº] (f : Œ± ‚Üí·µá ‚Ñù‚â•0) :
  ‚à´‚Åª x, f x ‚àÇŒº < ‚àû :=
begin
  apply is_finite_measure.lintegral_lt_top_of_bounded_to_ennreal,
  use nndist f 0,
  intros x,
  have key := bounded_continuous_function.nnreal.upper_bound f x,
  rw ennreal.coe_le_coe,
  have eq : nndist f 0 = ‚ü®dist f 0, dist_nonneg‚ü©,
  { ext,
    simp only [real.coe_to_nnreal', max_eq_left_iff, subtype.coe_mk, coe_nndist], },
  rwa eq at key,
end
@[simp] lemma test_against_nn_coe_eq {Œº : finite_measure Œ±} {f : Œ± ‚Üí·µá ‚Ñù‚â•0} :
  (Œº.test_against_nn f : ‚Ñù‚â•0‚àû) = ‚à´‚Åª x, f x ‚àÇ(Œº : measure Œ±) :=
ennreal.coe_to_nnreal (lintegral_lt_top_of_bounded_continuous_to_nnreal _ f).ne
lemma test_against_nn_const (Œº : finite_measure Œ±) (c : ‚Ñù‚â•0) :
  Œº.test_against_nn (bounded_continuous_function.const Œ± c) = c * Œº.mass :=
by simp [‚Üê ennreal.coe_eq_coe]
lemma test_against_nn_mono (Œº : finite_measure Œ±)
  {f g : Œ± ‚Üí·µá ‚Ñù‚â•0} (f_le_g : (f : Œ± ‚Üí ‚Ñù‚â•0) ‚â§ g) :
  Œº.test_against_nn f ‚â§ Œº.test_against_nn g :=
begin
  simp only [‚Üêennreal.coe_le_coe, test_against_nn_coe_eq],
  apply lintegral_mono,
  exact Œª x, ennreal.coe_mono (f_le_g x),
end
variables [opens_measurable_space Œ±]
lemma test_against_nn_add (Œº : finite_measure Œ±) (f‚ÇÅ f‚ÇÇ : Œ± ‚Üí·µá ‚Ñù‚â•0) :
  Œº.test_against_nn (f‚ÇÅ + f‚ÇÇ) = Œº.test_against_nn f‚ÇÅ + Œº.test_against_nn f‚ÇÇ :=
begin
  simp only [‚Üêennreal.coe_eq_coe, bounded_continuous_function.coe_add, ennreal.coe_add,
             pi.add_apply, test_against_nn_coe_eq],
  exact lintegral_add_left (bounded_continuous_function.nnreal.to_ennreal_comp_measurable _) _
end
lemma test_against_nn_smul [is_scalar_tower R ‚Ñù‚â•0 ‚Ñù‚â•0] [pseudo_metric_space R] [has_zero R]
  [has_bounded_smul R ‚Ñù‚â•0]
  (Œº : finite_measure Œ±) (c : R) (f : Œ± ‚Üí·µá ‚Ñù‚â•0) :
  Œº.test_against_nn (c ‚Ä¢ f) = c ‚Ä¢ Œº.test_against_nn f :=
begin
  simp only [‚Üêennreal.coe_eq_coe, bounded_continuous_function.coe_smul,
             test_against_nn_coe_eq, ennreal.coe_smul],
  simp_rw [‚Üêsmul_one_smul ‚Ñù‚â•0‚àû c (f _ : ‚Ñù‚â•0‚àû), ‚Üêsmul_one_smul ‚Ñù‚â•0‚àû c (lintegral _ _ : ‚Ñù‚â•0‚àû),
           smul_eq_mul],
  exact @lintegral_const_mul _ _ (Œº : measure Œ±) (c ‚Ä¢ 1)  _
                   (bounded_continuous_function.nnreal.to_ennreal_comp_measurable f),
end
lemma test_against_nn_lipschitz_estimate (Œº : finite_measure Œ±) (f g : Œ± ‚Üí·µá ‚Ñù‚â•0) :
  Œº.test_against_nn f ‚â§ Œº.test_against_nn g + (nndist f g) * Œº.mass :=
begin
  simp only [‚ÜêŒº.test_against_nn_const (nndist f g), ‚Üêtest_against_nn_add, ‚Üêennreal.coe_le_coe,
             bounded_continuous_function.coe_add, const_apply, ennreal.coe_add, pi.add_apply,
             coe_nnreal_ennreal_nndist, test_against_nn_coe_eq],
  apply lintegral_mono,
  have le_dist : ‚àÄ x, dist (f x) (g x) ‚â§ nndist f g :=
  bounded_continuous_function.dist_coe_le_dist,
  intros x,
  have le' : f(x) ‚â§ g(x) + nndist f g,
  { apply (nnreal.le_add_nndist (f x) (g x)).trans,
    rw add_le_add_iff_left,
    exact dist_le_coe.mp (le_dist x), },
  have le : (f(x) : ‚Ñù‚â•0‚àû) ‚â§ (g(x) : ‚Ñù‚â•0‚àû) + (nndist f g),
  by { rw ‚Üêennreal.coe_add, exact ennreal.coe_mono le', },
  rwa [coe_nnreal_ennreal_nndist] at le,
end
lemma test_against_nn_lipschitz (Œº : finite_measure Œ±) :
  lipschitz_with Œº.mass (Œª (f : Œ± ‚Üí·µá ‚Ñù‚â•0), Œº.test_against_nn f) :=
begin
  rw lipschitz_with_iff_dist_le_mul,
  intros f‚ÇÅ f‚ÇÇ,
  suffices : abs (Œº.test_against_nn f‚ÇÅ - Œº.test_against_nn f‚ÇÇ : ‚Ñù) ‚â§ Œº.mass * (dist f‚ÇÅ f‚ÇÇ),
  { rwa nnreal.dist_eq, },
  apply abs_le.mpr,
  split,
  { have key' := Œº.test_against_nn_lipschitz_estimate f‚ÇÇ f‚ÇÅ,
    rw mul_comm at key',
    suffices : ‚Üë(Œº.test_against_nn f‚ÇÇ) ‚â§ ‚Üë(Œº.test_against_nn f‚ÇÅ) + ‚Üë(Œº.mass) * dist f‚ÇÅ f‚ÇÇ,
    { linarith, },
    have key := nnreal.coe_mono key',
    rwa [nnreal.coe_add, nnreal.coe_mul, nndist_comm] at key, },
  { have key' := Œº.test_against_nn_lipschitz_estimate f‚ÇÅ f‚ÇÇ,
    rw mul_comm at key',
    suffices : ‚Üë(Œº.test_against_nn f‚ÇÅ) ‚â§ ‚Üë(Œº.test_against_nn f‚ÇÇ) + ‚Üë(Œº.mass) * dist f‚ÇÅ f‚ÇÇ,
    { linarith, },
    have key := nnreal.coe_mono key',
    rwa [nnreal.coe_add, nnreal.coe_mul] at key, },
end
def to_weak_dual_bcnn (Œº : finite_measure Œ±) :
  weak_dual ‚Ñù‚â•0 (Œ± ‚Üí·µá ‚Ñù‚â•0) :=
{ to_fun := Œª f, Œº.test_against_nn f,
  map_add' := test_against_nn_add Œº,
  map_smul' := test_against_nn_smul Œº,
  cont := Œº.test_against_nn_lipschitz.continuous, }
@[simp] lemma coe_to_weak_dual_bcnn (Œº : finite_measure Œ±) :
  ‚áëŒº.to_weak_dual_bcnn = Œº.test_against_nn := rfl
@[simp] lemma to_weak_dual_bcnn_apply (Œº : finite_measure Œ±) (f : Œ± ‚Üí·µá ‚Ñù‚â•0) :
  Œº.to_weak_dual_bcnn f = (‚à´‚Åª x, f x ‚àÇ(Œº : measure Œ±)).to_nnreal := rfl
instance : topological_space (finite_measure Œ±) :=
topological_space.induced to_weak_dual_bcnn infer_instance
lemma to_weak_dual_bcnn_continuous :
  continuous (@finite_measure.to_weak_dual_bcnn Œ± _ _ _) :=
continuous_induced_dom
lemma continuous_test_against_nn_eval (f : Œ± ‚Üí·µá ‚Ñù‚â•0) :
  continuous (Œª (Œº : finite_measure Œ±), Œº.test_against_nn f) :=
(by apply (weak_bilin.eval_continuous _ _).comp to_weak_dual_bcnn_continuous :
  continuous ((Œª œÜ : weak_dual ‚Ñù‚â•0 (Œ± ‚Üí·µá ‚Ñù‚â•0), œÜ f) ‚àò to_weak_dual_bcnn))
lemma tendsto_iff_weak_star_tendsto {Œ≥ : Type*} {F : filter Œ≥}
  {Œºs : Œ≥ ‚Üí finite_measure Œ±} {Œº : finite_measure Œ±} :
  tendsto Œºs F (ùìù Œº) ‚Üî tendsto (Œª i, (Œºs(i)).to_weak_dual_bcnn) F (ùìù Œº.to_weak_dual_bcnn) :=
inducing.tendsto_nhds_iff ‚ü®rfl‚ü©
theorem tendsto_iff_forall_test_against_nn_tendsto {Œ≥ : Type*} {F : filter Œ≥}
  {Œºs : Œ≥ ‚Üí finite_measure Œ±} {Œº : finite_measure Œ±} :
  tendsto Œºs F (ùìù Œº) ‚Üî
  ‚àÄ (f : Œ± ‚Üí·µá ‚Ñù‚â•0), tendsto (Œª i, (Œºs i).to_weak_dual_bcnn f) F (ùìù (Œº.to_weak_dual_bcnn f)) :=
by { rw [tendsto_iff_weak_star_tendsto, tendsto_iff_forall_eval_tendsto_top_dual_pairing], refl, }
theorem tendsto_iff_forall_lintegral_tendsto {Œ≥ : Type*} {F : filter Œ≥}
  {Œºs : Œ≥ ‚Üí finite_measure Œ±} {Œº : finite_measure Œ±} :
  tendsto Œºs F (ùìù Œº) ‚Üî
  ‚àÄ (f : Œ± ‚Üí·µá ‚Ñù‚â•0),
    tendsto (Œª i, (‚à´‚Åª x, (f x) ‚àÇ(Œºs(i) : measure Œ±))) F (ùìù ((‚à´‚Åª x, (f x) ‚àÇ(Œº : measure Œ±)))) :=
begin
  rw tendsto_iff_forall_test_against_nn_tendsto,
  simp_rw [to_weak_dual_bcnn_apply _ _, ‚Üêtest_against_nn_coe_eq,
           ennreal.tendsto_coe, ennreal.to_nnreal_coe],
end
variables {Œ± : Type*} [measurable_space Œ±] [topological_space Œ±] [opens_measurable_space Œ±]
lemma tendsto_lintegral_nn_filter_of_le_const {Œπ : Type*} {L : filter Œπ} [L.is_countably_generated]
  (Œº : measure Œ±) [is_finite_measure Œº] {fs : Œπ ‚Üí (Œ± ‚Üí·µá ‚Ñù‚â•0)} {c : ‚Ñù‚â•0}
  (fs_le_const : ‚àÄ·∂† i in L, ‚àÄ·µê (a : Œ±) ‚àÇ(Œº : measure Œ±), fs i a ‚â§ c) {f : Œ± ‚Üí ‚Ñù‚â•0}
  (fs_lim : ‚àÄ·µê (a : Œ±) ‚àÇ(Œº : measure Œ±), tendsto (Œª i, fs i a) L (ùìù (f a))) :
  tendsto (Œª i, (‚à´‚Åª a, fs i a ‚àÇŒº)) L (ùìù (‚à´‚Åª a, (f a) ‚àÇŒº)) :=
begin
  simpa only using tendsto_lintegral_filter_of_dominated_convergence (Œª _, c)
    (eventually_of_forall ((Œª i, (ennreal.continuous_coe.comp (fs i).continuous).measurable)))
    _ ((@lintegral_const_lt_top _ _ (Œº : measure Œ±) _ _ (@ennreal.coe_ne_top c)).ne) _,
  { simpa only [ennreal.coe_le_coe] using fs_le_const, },
  { simpa only [ennreal.tendsto_coe] using fs_lim, },
end
lemma tendsto_lintegral_nn_of_le_const (Œº : finite_measure Œ±) {fs : ‚Ñï ‚Üí (Œ± ‚Üí·µá ‚Ñù‚â•0)} {c : ‚Ñù‚â•0}
  (fs_le_const : ‚àÄ n a, fs n a ‚â§ c) {f : Œ± ‚Üí ‚Ñù‚â•0}
  (fs_lim : ‚àÄ a, tendsto (Œª n, fs n a) at_top (ùìù (f a))) :
  tendsto (Œª n, (‚à´‚Åª a, fs n a ‚àÇ(Œº : measure Œ±))) at_top (ùìù (‚à´‚Åª a, (f a) ‚àÇ(Œº : measure Œ±))) :=
tendsto_lintegral_nn_filter_of_le_const Œº
  (eventually_of_forall (Œª n, eventually_of_forall (fs_le_const n))) (eventually_of_forall fs_lim)
lemma tendsto_test_against_nn_filter_of_le_const {Œπ : Type*} {L : filter Œπ}
  [L.is_countably_generated] {Œº : finite_measure Œ±} {fs : Œπ ‚Üí (Œ± ‚Üí·µá ‚Ñù‚â•0)} {c : ‚Ñù‚â•0}
  (fs_le_const : ‚àÄ·∂† i in L, ‚àÄ·µê (a : Œ±) ‚àÇ(Œº : measure Œ±), fs i a ‚â§ c) {f : Œ± ‚Üí·µá ‚Ñù‚â•0}
  (fs_lim : ‚àÄ·µê (a : Œ±) ‚àÇ(Œº : measure Œ±), tendsto (Œª i, fs i a) L (ùìù (f a))) :
  tendsto (Œª i, Œº.test_against_nn (fs i)) L (ùìù (Œº.test_against_nn f)) :=
begin
  apply (ennreal.tendsto_to_nnreal
         (lintegral_lt_top_of_bounded_continuous_to_nnreal (Œº : measure Œ±) f).ne).comp,
  exact tendsto_lintegral_nn_filter_of_le_const Œº fs_le_const fs_lim,
end
lemma tendsto_test_against_nn_of_le_const {Œº : finite_measure Œ±}
  {fs : ‚Ñï ‚Üí (Œ± ‚Üí·µá ‚Ñù‚â•0)} {c : ‚Ñù‚â•0} (fs_le_const : ‚àÄ n a, fs n a ‚â§ c) {f : Œ± ‚Üí·µá ‚Ñù‚â•0}
  (fs_lim : ‚àÄ a, tendsto (Œª n, fs n a) at_top (ùìù (f a))) :
  tendsto (Œª n, Œº.test_against_nn (fs n)) at_top (ùìù (Œº.test_against_nn f)) :=
tendsto_test_against_nn_filter_of_le_const
  (eventually_of_forall (Œª n, eventually_of_forall (fs_le_const n))) (eventually_of_forall fs_lim)
variables {Œ± : Type*} [measurable_space Œ±] [topological_space Œ±] [opens_measurable_space Œ±]
lemma integrable_of_bounded_continuous_to_nnreal
  (Œº : measure Œ±) [is_finite_measure Œº] (f : Œ± ‚Üí·µá ‚Ñù‚â•0) :
  integrable ((coe : ‚Ñù‚â•0 ‚Üí ‚Ñù) ‚àò ‚áëf) Œº :=
begin
  refine ‚ü®(nnreal.continuous_coe.comp f.continuous).measurable.ae_strongly_measurable, _‚ü©,
  simp only [has_finite_integral, nnreal.nnnorm_eq],
  exact lintegral_lt_top_of_bounded_continuous_to_nnreal _ f,
end
lemma integrable_of_bounded_continuous_to_real
  (Œº : measure Œ±) [is_finite_measure Œº] (f : Œ± ‚Üí·µá ‚Ñù) :
  integrable ‚áëf Œº :=
begin
  refine ‚ü®f.continuous.measurable.ae_strongly_measurable, _‚ü©,
  have aux : (coe : ‚Ñù‚â•0 ‚Üí ‚Ñù) ‚àò ‚áëf.nnnorm = (Œª x, ‚à•f x‚à•),
  { ext x,
    simp only [function.comp_app, bounded_continuous_function.nnnorm_coe_fun_eq, coe_nnnorm], },
  apply (has_finite_integral_iff_norm ‚áëf).mpr,
  rw ‚Üê of_real_integral_eq_lintegral_of_real,
  { exact ennreal.of_real_lt_top, },
  { exact aux ‚ñ∏ integrable_of_bounded_continuous_to_nnreal Œº f.nnnorm, },
  { exact eventually_of_forall (Œª x, norm_nonneg (f x)), },
end
lemma _root_.bounded_continuous_function.integral_eq_integral_nnreal_part_sub
  (Œº : measure Œ±) [is_finite_measure Œº] (f : Œ± ‚Üí·µá ‚Ñù) :
  ‚à´ x, f x ‚àÇŒº = ‚à´ x, f.nnreal_part x ‚àÇŒº - ‚à´ x, (-f).nnreal_part x ‚àÇŒº :=
by simp only [f.self_eq_nnreal_part_sub_nnreal_part_neg,
              pi.sub_apply, integral_sub, integrable_of_bounded_continuous_to_nnreal]
lemma lintegral_lt_top_of_bounded_continuous_to_real
  {Œ± : Type*} [measurable_space Œ±] [topological_space Œ±] (Œº : measure Œ±) [is_finite_measure Œº]
  (f : Œ± ‚Üí·µá ‚Ñù) :
  ‚à´‚Åª x, ennreal.of_real (f x) ‚àÇŒº < ‚àû :=
lintegral_lt_top_of_bounded_continuous_to_nnreal _ f.nnreal_part
theorem tendsto_of_forall_integral_tendsto
  {Œ≥ : Type*} {F : filter Œ≥} {Œºs : Œ≥ ‚Üí finite_measure Œ±} {Œº : finite_measure Œ±}
  (h : (‚àÄ (f : Œ± ‚Üí·µá ‚Ñù),
       tendsto (Œª i, (‚à´ x, (f x) ‚àÇ(Œºs i : measure Œ±))) F (ùìù ((‚à´ x, (f x) ‚àÇ(Œº : measure Œ±)))))) :
  tendsto Œºs F (ùìù Œº) :=
begin
  apply (@finite_measure.tendsto_iff_forall_lintegral_tendsto Œ± _ _ _ Œ≥ F Œºs Œº).mpr,
  intro f,
  have key := @ennreal.tendsto_to_real_iff _ F
              _ (Œª i, (lintegral_lt_top_of_bounded_continuous_to_nnreal (Œºs i : measure Œ±) f).ne)
              _ (lintegral_lt_top_of_bounded_continuous_to_nnreal (Œº : measure Œ±) f).ne,
  simp only [ennreal.of_real_coe_nnreal] at key,
  apply key.mp,
  have lip : lipschitz_with 1 (coe : ‚Ñù‚â•0 ‚Üí ‚Ñù), from isometry_subtype_coe.lipschitz,
  set f‚ÇÄ := bounded_continuous_function.comp _ lip f with def_f‚ÇÄ,
  have f‚ÇÄ_eq : ‚áëf‚ÇÄ = (coe : ‚Ñù‚â•0 ‚Üí ‚Ñù) ‚àò ‚áëf, by refl,
  have f‚ÇÄ_nn : 0 ‚â§ ‚áëf‚ÇÄ, from Œª _, by simp only [f‚ÇÄ_eq, pi.zero_apply, nnreal.zero_le_coe],
  have f‚ÇÄ_ae_nn : 0 ‚â§·µê[(Œº : measure Œ±)] ‚áëf‚ÇÄ, from eventually_of_forall f‚ÇÄ_nn,
  have f‚ÇÄ_ae_nns : ‚àÄ i, 0 ‚â§·µê[(Œºs i : measure Œ±)] ‚áëf‚ÇÄ, from Œª i, eventually_of_forall f‚ÇÄ_nn,
  have aux := integral_eq_lintegral_of_nonneg_ae f‚ÇÄ_ae_nn
              f‚ÇÄ.continuous.measurable.ae_strongly_measurable,
  have auxs := Œª i, integral_eq_lintegral_of_nonneg_ae (f‚ÇÄ_ae_nns i)
              f‚ÇÄ.continuous.measurable.ae_strongly_measurable,
  simp only [f‚ÇÄ_eq, ennreal.of_real_coe_nnreal] at aux auxs,
  simpa only [‚Üêaux, ‚Üêauxs] using h f‚ÇÄ,
end
lemma _root_.bounded_continuous_function.nnreal.to_real_lintegral_eq_integral
  (f : Œ± ‚Üí·µá ‚Ñù‚â•0) (Œº : measure Œ±) :
  (‚à´‚Åª x, (f x : ‚Ñù‚â•0‚àû) ‚àÇŒº).to_real = (‚à´ x, f x ‚àÇŒº) :=
begin
  rw integral_eq_lintegral_of_nonneg_ae _
     (nnreal.continuous_coe.comp f.continuous).measurable.ae_strongly_measurable,
  { simp only [ennreal.of_real_coe_nnreal], },
  { apply eventually_of_forall,
    simp only [pi.zero_apply, nnreal.zero_le_coe, implies_true_iff], },
end
theorem tendsto_iff_forall_integral_tendsto
  {Œ≥ : Type*} {F : filter Œ≥} {Œºs : Œ≥ ‚Üí finite_measure Œ±} {Œº : finite_measure Œ±} :
  tendsto Œºs F (ùìù Œº) ‚Üî
  ‚àÄ (f : Œ± ‚Üí·µá ‚Ñù),
    tendsto (Œª i, (‚à´ x, (f x) ‚àÇ(Œºs i : measure Œ±))) F (ùìù ((‚à´ x, (f x) ‚àÇ(Œº : measure Œ±)))) :=
begin
  refine ‚ü®_, tendsto_of_forall_integral_tendsto‚ü©,
  rw finite_measure.tendsto_iff_forall_lintegral_tendsto,
  intros h f,
  simp_rw bounded_continuous_function.integral_eq_integral_nnreal_part_sub,
  set f_pos := f.nnreal_part with def_f_pos,
  set f_neg := (-f).nnreal_part with def_f_neg,
  have tends_pos := (ennreal.tendsto_to_real
    ((lintegral_lt_top_of_bounded_continuous_to_nnreal (Œº : measure Œ±) f_pos).ne)).comp (h f_pos),
  have tends_neg := (ennreal.tendsto_to_real
    ((lintegral_lt_top_of_bounded_continuous_to_nnreal (Œº : measure Œ±) f_neg).ne)).comp (h f_neg),
  have aux : ‚àÄ (g : Œ± ‚Üí·µá ‚Ñù‚â•0), ennreal.to_real ‚àò (Œª (i : Œ≥), ‚à´‚Åª (x : Œ±), ‚Üë(g x) ‚àÇ(Œºs i : measure Œ±))
         = Œª (i : Œ≥), (‚à´‚Åª (x : Œ±), ‚Üë(g x) ‚àÇ(Œºs i : measure Œ±)).to_real, from Œª _, rfl,
  simp_rw [aux, bounded_continuous_function.nnreal.to_real_lintegral_eq_integral]
          at tends_pos tends_neg,
  exact tendsto.sub tends_pos tends_neg,
end
def probability_measure (Œ± : Type*) [measurable_space Œ±] : Type* :=
{Œº : measure Œ± // is_probability_measure Œº}
namespace probability_measure
variables {Œ± : Type*} [measurable_space Œ±]
instance [inhabited Œ±] : inhabited (probability_measure Œ±) :=
‚ü®‚ü®measure.dirac default, measure.dirac.is_probability_measure‚ü©‚ü©
instance : has_coe (probability_measure Œ±) (measure_theory.measure Œ±) := coe_subtype
instance : has_coe_to_fun (probability_measure Œ±) (Œª _, set Œ± ‚Üí ‚Ñù‚â•0) :=
‚ü®Œª Œº s, (Œº s).to_nnreal‚ü©
instance (Œº : probability_measure Œ±) : is_probability_measure (Œº : measure Œ±) := Œº.prop
lemma coe_fn_eq_to_nnreal_coe_fn_to_measure (ŒΩ : probability_measure Œ±) :
  (ŒΩ : set Œ± ‚Üí ‚Ñù‚â•0) = Œª s, ((ŒΩ : measure Œ±) s).to_nnreal := rfl
@[simp] lemma val_eq_to_measure (ŒΩ : probability_measure Œ±) : ŒΩ.val = (ŒΩ : measure Œ±) := rfl
lemma coe_injective : function.injective (coe : probability_measure Œ± ‚Üí measure Œ±) :=
subtype.coe_injective
@[simp] lemma coe_fn_univ (ŒΩ : probability_measure Œ±) : ŒΩ univ = 1 :=
congr_arg ennreal.to_nnreal ŒΩ.prop.measure_univ
def to_finite_measure (Œº : probability_measure Œ±) : finite_measure Œ± := ‚ü®Œº, infer_instance‚ü©
@[simp] lemma coe_comp_to_finite_measure_eq_coe (ŒΩ : probability_measure Œ±) :
  (ŒΩ.to_finite_measure : measure Œ±) = (ŒΩ : measure Œ±) := rfl
@[simp] lemma coe_fn_comp_to_finite_measure_eq_coe_fn (ŒΩ : probability_measure Œ±) :
  (ŒΩ.to_finite_measure : set Œ± ‚Üí ‚Ñù‚â•0) = (ŒΩ : set Œ± ‚Üí ‚Ñù‚â•0) := rfl
@[simp] lemma ennreal_coe_fn_eq_coe_fn_to_measure (ŒΩ : probability_measure Œ±) (s : set Œ±) :
  (ŒΩ s : ‚Ñù‚â•0‚àû) = (ŒΩ : measure Œ±) s :=
by { rw [‚Üê coe_fn_comp_to_finite_measure_eq_coe_fn,
     finite_measure.ennreal_coe_fn_eq_coe_fn_to_measure], refl, }
@[simp] lemma mass_to_finite_measure (Œº : probability_measure Œ±) :
  Œº.to_finite_measure.mass = 1 := Œº.coe_fn_univ
variables [topological_space Œ±] [opens_measurable_space Œ±]
lemma test_against_nn_lipschitz (Œº : probability_measure Œ±) :
  lipschitz_with 1 (Œª (f : Œ± ‚Üí·µá ‚Ñù‚â•0), Œº.to_finite_measure.test_against_nn f) :=
Œº.mass_to_finite_measure ‚ñ∏ Œº.to_finite_measure.test_against_nn_lipschitz
instance : topological_space (probability_measure Œ±) :=
topological_space.induced to_finite_measure infer_instance
lemma to_finite_measure_continuous :
  continuous (to_finite_measure : probability_measure Œ± ‚Üí finite_measure Œ±) :=
continuous_induced_dom
def to_weak_dual_bcnn : probability_measure Œ± ‚Üí weak_dual ‚Ñù‚â•0 (Œ± ‚Üí·µá ‚Ñù‚â•0) :=
finite_measure.to_weak_dual_bcnn ‚àò to_finite_measure
@[simp] lemma coe_to_weak_dual_bcnn (Œº : probability_measure Œ±) :
  ‚áëŒº.to_weak_dual_bcnn = Œº.to_finite_measure.test_against_nn := rfl
@[simp] lemma to_weak_dual_bcnn_apply (Œº : probability_measure Œ±) (f : Œ± ‚Üí·µá ‚Ñù‚â•0) :
  Œº.to_weak_dual_bcnn f = (‚à´‚Åª x, f x ‚àÇ(Œº : measure Œ±)).to_nnreal := rfl
lemma to_weak_dual_bcnn_continuous :
  continuous (Œª (Œº : probability_measure Œ±), Œº.to_weak_dual_bcnn) :=
finite_measure.to_weak_dual_bcnn_continuous.comp to_finite_measure_continuous
lemma continuous_test_against_nn_eval (f : Œ± ‚Üí·µá ‚Ñù‚â•0) :
  continuous (Œª (Œº : probability_measure Œ±), Œº.to_finite_measure.test_against_nn f) :=
(finite_measure.continuous_test_against_nn_eval f).comp to_finite_measure_continuous
lemma to_finite_measure_embedding (Œ± : Type*)
  [measurable_space Œ±] [topological_space Œ±] [opens_measurable_space Œ±] :
  embedding (to_finite_measure : probability_measure Œ± ‚Üí finite_measure Œ±) :=
{ induced := rfl,
  inj := Œª Œº ŒΩ h, subtype.eq (by convert congr_arg coe h) }
lemma tendsto_nhds_iff_to_finite_measures_tendsto_nhds {Œ¥ : Type*}
  (F : filter Œ¥) {Œºs : Œ¥ ‚Üí probability_measure Œ±} {Œº‚ÇÄ : probability_measure Œ±} :
  tendsto Œºs F (ùìù Œº‚ÇÄ) ‚Üî tendsto (to_finite_measure ‚àò Œºs) F (ùìù (Œº‚ÇÄ.to_finite_measure)) :=
embedding.tendsto_nhds_iff (probability_measure.to_finite_measure_embedding Œ±)
theorem tendsto_iff_forall_lintegral_tendsto {Œ≥ : Type*} {F : filter Œ≥}
  {Œºs : Œ≥ ‚Üí probability_measure Œ±} {Œº : probability_measure Œ±} :
  tendsto Œºs F (ùìù Œº) ‚Üî
  ‚àÄ (f : Œ± ‚Üí·µá ‚Ñù‚â•0), tendsto (Œª i, (‚à´‚Åª x, (f x) ‚àÇ(Œºs(i) : measure Œ±))) F
    (ùìù ((‚à´‚Åª x, (f x) ‚àÇ(Œº : measure Œ±)))) :=
begin
  rw tendsto_nhds_iff_to_finite_measures_tendsto_nhds,
  exact finite_measure.tendsto_iff_forall_lintegral_tendsto,
end
theorem tendsto_iff_forall_integral_tendsto
  {Œ≥ : Type*} {F : filter Œ≥} {Œºs : Œ≥ ‚Üí probability_measure Œ±} {Œº : probability_measure Œ±} :
  tendsto Œºs F (ùìù Œº) ‚Üî
  ‚àÄ (f : Œ± ‚Üí·µá ‚Ñù),
    tendsto (Œª i, (‚à´ x, (f x) ‚àÇ(Œºs i : measure Œ±))) F (ùìù ((‚à´ x, (f x) ‚àÇ(Œº : measure Œ±)))) :=
begin
  rw tendsto_nhds_iff_to_finite_measures_tendsto_nhds,
  rw finite_measure.tendsto_iff_forall_integral_tendsto,
  simp only [coe_comp_to_finite_measure_eq_coe],
end
variables {Œ± : Type*} [measurable_space Œ±]
lemma measure_of_cont_bdd_of_tendsto_filter_indicator {Œπ : Type*} {L : filter Œπ}
  [L.is_countably_generated] [topological_space Œ±] [opens_measurable_space Œ±]
  (Œº : measure Œ±) [is_finite_measure Œº] {c : ‚Ñù‚â•0} {E : set Œ±} (E_mble : measurable_set E)
  (fs : Œπ ‚Üí (Œ± ‚Üí·µá ‚Ñù‚â•0)) (fs_bdd : ‚àÄ·∂† i in L, ‚àÄ·µê (a : Œ±) ‚àÇŒº, fs i a ‚â§ c)
  (fs_lim : ‚àÄ·µê (a : Œ±) ‚àÇŒº,
            tendsto (Œª (i : Œπ), (coe_fn : (Œ± ‚Üí·µá ‚Ñù‚â•0) ‚Üí (Œ± ‚Üí ‚Ñù‚â•0)) (fs i) a) L
                    (ùìù (indicator E (Œª x, (1 : ‚Ñù‚â•0)) a))) :
  tendsto (Œª n, lintegral Œº (Œª a, fs n a)) L (ùìù (Œº E)) :=
begin
  convert finite_measure.tendsto_lintegral_nn_filter_of_le_const Œº fs_bdd fs_lim,
  have aux : ‚àÄ a, indicator E (Œª x, (1 : ‚Ñù‚â•0‚àû)) a = ‚Üë(indicator E (Œª x, (1 : ‚Ñù‚â•0)) a),
  from Œª a, by simp only [ennreal.coe_indicator, ennreal.coe_one],
  simp_rw [‚Üêaux, lintegral_indicator _ E_mble],
  simp only [lintegral_one, measure.restrict_apply, measurable_set.univ, univ_inter],
end
lemma measure_of_cont_bdd_of_tendsto_indicator
  [topological_space Œ±] [opens_measurable_space Œ±]
  (Œº : measure Œ±) [is_finite_measure Œº] {c : ‚Ñù‚â•0} {E : set Œ±} (E_mble : measurable_set E)
  (fs : ‚Ñï ‚Üí (Œ± ‚Üí·µá ‚Ñù‚â•0)) (fs_bdd : ‚àÄ n a, fs n a ‚â§ c)
  (fs_lim : tendsto (Œª (n : ‚Ñï), (coe_fn : (Œ± ‚Üí·µá ‚Ñù‚â•0) ‚Üí (Œ± ‚Üí ‚Ñù‚â•0)) (fs n))
            at_top (ùìù (indicator E (Œª x, (1 : ‚Ñù‚â•0))))) :
  tendsto (Œª n, lintegral Œº (Œª a, fs n a)) at_top (ùìù (Œº E)) :=
begin
  have fs_lim' : ‚àÄ a, tendsto (Œª (n : ‚Ñï), (fs n a : ‚Ñù‚â•0))
                 at_top (ùìù (indicator E (Œª x, (1 : ‚Ñù‚â•0)) a)),
  by { rw tendsto_pi_nhds at fs_lim, exact Œª a, fs_lim a, },
  apply measure_of_cont_bdd_of_tendsto_filter_indicator Œº E_mble fs
      (eventually_of_forall (Œª n, eventually_of_forall (fs_bdd n))) (eventually_of_forall fs_lim'),
end
lemma tendsto_lintegral_thickened_indicator_of_is_closed
  {Œ± : Type*} [measurable_space Œ±] [pseudo_emetric_space Œ±] [opens_measurable_space Œ±]
  (Œº : measure Œ±) [is_finite_measure Œº] {F : set Œ±} (F_closed : is_closed F) {Œ¥s : ‚Ñï ‚Üí ‚Ñù}
  (Œ¥s_pos : ‚àÄ n, 0 < Œ¥s n) (Œ¥s_lim : tendsto Œ¥s at_top (ùìù 0)) :
  tendsto (Œª n, lintegral Œº (Œª a, (thickened_indicator (Œ¥s_pos n) F a : ‚Ñù‚â•0‚àû)))
          at_top (ùìù (Œº F)) :=
begin
  apply measure_of_cont_bdd_of_tendsto_indicator Œº F_closed.measurable_set
          (Œª n, thickened_indicator (Œ¥s_pos n) F)
          (Œª n a, thickened_indicator_le_one (Œ¥s_pos n) F a),
  have key := thickened_indicator_tendsto_indicator_closure Œ¥s_pos Œ¥s_lim F,
  rwa F_closed.closure_eq at key,
end
lemma finite_measure.limsup_measure_closed_le_of_tendsto
  {Œ± Œπ : Type*} {L : filter Œπ}
  [measurable_space Œ±] [pseudo_emetric_space Œ±] [opens_measurable_space Œ±]
  {Œº : finite_measure Œ±} {Œºs : Œπ ‚Üí finite_measure Œ±}
  (Œºs_lim : tendsto Œºs L (ùìù Œº)) {F : set Œ±} (F_closed : is_closed F) :
  L.limsup (Œª i, (Œºs i : measure Œ±) F) ‚â§ (Œº : measure Œ±) F :=
begin
  by_cases L = ‚ä•,
  { simp only [h, limsup, filter.map_bot, Limsup_bot, ennreal.bot_eq_zero, zero_le], },
  apply ennreal.le_of_forall_pos_le_add,
  intros Œµ Œµ_pos Œº_F_finite,
  set Œ¥s := Œª (n : ‚Ñï), (1 : ‚Ñù) / (n+1) with def_Œ¥s,
  have Œ¥s_pos : ‚àÄ n, 0 < Œ¥s n, from Œª n, nat.one_div_pos_of_nat,
  have Œ¥s_lim : tendsto Œ¥s at_top (ùìù 0), from tendsto_one_div_add_at_top_nhds_0_nat,
  have key‚ÇÅ := tendsto_lintegral_thickened_indicator_of_is_closed
                  (Œº : measure Œ±) F_closed Œ¥s_pos Œ¥s_lim,
  have room‚ÇÅ : (Œº : measure Œ±) F < (Œº : measure Œ±) F + Œµ / 2,
  { apply ennreal.lt_add_right (measure_lt_top (Œº : measure Œ±) F).ne
          ((ennreal.div_pos_iff.mpr
              ‚ü®(ennreal.coe_pos.mpr Œµ_pos).ne.symm, ennreal.two_ne_top‚ü©).ne.symm), },
  rcases eventually_at_top.mp (eventually_lt_of_tendsto_lt room‚ÇÅ key‚ÇÅ) with ‚ü®M, hM‚ü©,
  have key‚ÇÇ := finite_measure.tendsto_iff_forall_lintegral_tendsto.mp
                Œºs_lim (thickened_indicator (Œ¥s_pos M) F),
  have room‚ÇÇ : lintegral (Œº : measure Œ±) (Œª a, thickened_indicator (Œ¥s_pos M) F a)
                < lintegral (Œº : measure Œ±) (Œª a, thickened_indicator (Œ¥s_pos M) F a) + Œµ / 2,
  { apply ennreal.lt_add_right
          (lintegral_lt_top_of_bounded_continuous_to_nnreal (Œº : measure Œ±) _).ne
          ((ennreal.div_pos_iff.mpr
              ‚ü®(ennreal.coe_pos.mpr Œµ_pos).ne.symm, ennreal.two_ne_top‚ü©).ne.symm), },
  have ev_near := eventually.mono (eventually_lt_of_tendsto_lt room‚ÇÇ key‚ÇÇ) (Œª n, le_of_lt),
  have aux := Œª n, le_trans (measure_le_lintegral_thickened_indicator
                            (Œºs n : measure Œ±) F_closed.measurable_set (Œ¥s_pos M)),
  have ev_near' := eventually.mono ev_near aux,
  apply (filter.limsup_le_limsup ev_near').trans,
  haveI : ne_bot L, from ‚ü®h‚ü©,
  rw limsup_const,
  apply le_trans (add_le_add (hM M rfl.le).le (le_refl (Œµ/2 : ‚Ñù‚â•0‚àû))),
  simp only [add_assoc, ennreal.add_halves, le_refl],
end
