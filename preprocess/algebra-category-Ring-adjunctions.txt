import algebra.category.Ring.basic
import data.mv_polynomial.comm_ring
noncomputable theory
universe u
open mv_polynomial
open category_theory
namespace CommRing
open_locale classical
def free : Type u ⥤ CommRing.{u} :=
{ obj := λ α, of (mv_polynomial α ℤ),
  map := λ X Y f,
    (↑(rename f : _ →ₐ[ℤ] _) : (mv_polynomial X ℤ →+* mv_polynomial Y ℤ)),
def adj : free ⊣ forget CommRing.{u} :=
adjunction.mk_of_hom_equiv
{ hom_equiv := λ X R, hom_equiv,
  hom_equiv_naturality_left_symm' :=
    λ _ _ Y f g, ring_hom.ext $ λ x, eval₂_cast_comp f (int.cast_ring_hom Y) g x }
instance : is_right_adjoint (forget CommRing.{u}) := ⟨_, adj⟩
end CommRing
