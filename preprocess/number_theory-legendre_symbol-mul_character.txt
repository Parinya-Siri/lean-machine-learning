import ring_theory.integral_domain
section definition_and_group
universes u v
section defi
structure mul_char extends monoid_hom R R' :=
(map_nonunit' : ∀ a : R, ¬ is_unit a → to_fun a = 0)
class mul_char_class (F : Type*) (R R' : out_param $ Type*) [comm_monoid R]
 [comm_monoid_with_zero R']
  extends monoid_hom_class F R R' :=
(map_nonunit : ∀ (χ : F) {a : R} (ha : ¬ is_unit a), χ a = 0)
attribute [simp] mul_char_class.map_nonunit
end defi
section group
namespace mul_char
protected def simps.apply (χ : mul_char R R') : R → R' := χ
initialize_simps_projections mul_char (to_monoid_hom_to_fun → apply, -to_monoid_hom)
section trivial
variables (R R')
@[simps]
noncomputable
def trivial : mul_char R R' :=
{ to_fun := by { classical, exact λ x, if is_unit x then 1 else 0 },
  map_nonunit' := by { intros a ha, simp only [ha, if_false], },
  map_one' := by simp only [is_unit_one, if_true],
  map_mul' := by { intros x y,
                   simp only [is_unit.mul_iff, boole_mul],
                   split_ifs; tauto, } }
end trivial
@[simp]
lemma coe_coe (χ : mul_char R R') : (χ.to_monoid_hom : R → R') = χ := rfl
@[simp]
lemma to_fun_eq_coe (χ : mul_char R R') : χ.to_fun = χ := rfl
@[simp]
lemma coe_mk (f : R →* R') (hf) : (mul_char.mk f hf : R → R') = f := rfl
lemma ext' {χ χ' : mul_char R R'} (h : ∀ a, χ a = χ' a) : χ = χ' :=
begin
  cases χ,
  cases χ',
  congr,
  exact monoid_hom.ext h,
end
instance : mul_char_class (mul_char R R') R R' :=
{ coe := λ χ, χ.to_monoid_hom.to_fun,
  coe_injective' := λ f g h, ext' (λ a, congr_fun h a),
  map_mul := λ χ, χ.map_mul',
  map_one := λ χ, χ.map_one',
  map_nonunit := λ χ, χ.map_nonunit', }
lemma map_nonunit (χ : mul_char R R') {a : R} (ha : ¬ is_unit a) : χ a = 0 :=
χ.map_nonunit' a ha
@[ext]
lemma ext {χ χ' : mul_char R R'} (h : ∀ a : Rˣ, χ a = χ' a) : χ = χ' :=
begin
  apply ext',
  intro a,
  by_cases ha : is_unit a,
  { exact h ha.unit, },
  { rw [map_nonunit χ ha, map_nonunit χ' ha], },
end
lemma ext_iff {χ χ' : mul_char R R'} : χ = χ' ↔ ∀ a : Rˣ, χ a = χ' a :=
⟨by { rintro rfl a, refl }, ext⟩
def to_unit_hom (χ : mul_char R R') : Rˣ →* R'ˣ := units.map χ
lemma coe_to_unit_hom (χ : mul_char R R') (a : Rˣ) :
  ↑(χ.to_unit_hom a) = χ a :=
rfl
noncomputable
def of_unit_hom (f : Rˣ →* R'ˣ) : mul_char R R' :=
{ to_fun := by { classical, exact λ x, if hx : is_unit x then f hx.unit else 0 },
  map_one' := by { have h1 : (is_unit_one.unit : Rˣ) = 1 := units.eq_iff.mp rfl,
                   simp only [h1, dif_pos, units.coe_eq_one, map_one, is_unit_one], },
  map_mul' :=
  begin
    intros x y,
    by_cases hx : is_unit x,
    { simp only [hx, is_unit.mul_iff, true_and, dif_pos],
      by_cases hy : is_unit y,
      { simp only [hy, dif_pos],
        have hm : (is_unit.mul_iff.mpr ⟨hx, hy⟩).unit = hx.unit * hy.unit := units.eq_iff.mp rfl,
        rw [hm, map_mul],
        norm_cast, },
      { simp only [hy, not_false_iff, dif_neg, mul_zero], }, },
    { simp only [hx, is_unit.mul_iff, false_and, not_false_iff, dif_neg, zero_mul], },
  end ,
  map_nonunit' := by { intros a ha, simp only [ha, not_false_iff, dif_neg], }, }
lemma of_unit_hom_coe (f : Rˣ →* R'ˣ) (a : Rˣ) :
  of_unit_hom f ↑a = f a :=
by simp [of_unit_hom]
noncomputable
def equiv_to_unit_hom : mul_char R R' ≃ (Rˣ →* R'ˣ) :=
{ to_fun := to_unit_hom,
  inv_fun := of_unit_hom,
  left_inv :=
  by { intro χ, ext x, rw [of_unit_hom_coe, coe_to_unit_hom] },
  right_inv :=
  by { intro f, ext x, rw [coe_to_unit_hom, of_unit_hom_coe], } }
@[simp]
lemma to_unit_hom_eq (χ : mul_char R R') : to_unit_hom χ = equiv_to_unit_hom χ := rfl
@[simp]
lemma of_unit_hom_eq (χ : Rˣ →* R'ˣ) : of_unit_hom χ = equiv_to_unit_hom.symm χ := rfl
@[simp]
lemma coe_equiv_to_unit_hom (χ : mul_char R R') (a : Rˣ) :
  ↑(equiv_to_unit_hom χ a) = χ a :=
coe_to_unit_hom χ a
@[simp]
lemma equiv_unit_hom_symm_coe (f : Rˣ →* R'ˣ) (a : Rˣ) :
  equiv_to_unit_hom.symm f ↑a = f a :=
of_unit_hom_coe f a
protected
lemma map_one (χ : mul_char R R') : χ (1 : R) = 1 :=
χ.map_one'
protected
lemma map_zero {R : Type u} [comm_monoid_with_zero R] [nontrivial R] (χ : mul_char R R') :
  χ (0 : R) = 0 :=
by rw [map_nonunit χ not_is_unit_zero]
noncomputable
instance has_one : has_one (mul_char R R') := ⟨trivial R R'⟩
noncomputable
instance inhabited : inhabited (mul_char R R') := ⟨1⟩
@[simp]
lemma one_apply_coe (a : Rˣ) : (1 : mul_char R R') a = 1 :=
dif_pos a.is_unit
def mul (χ χ' : mul_char R R') : mul_char R R' :=
{ to_fun := χ * χ',
  map_nonunit' := λ a ha, by simp [map_nonunit χ ha],
  ..χ.to_monoid_hom * χ'.to_monoid_hom }
instance has_mul : has_mul (mul_char R R') := ⟨mul⟩
lemma mul_apply (χ χ' : mul_char R R') (a : R) : (χ * χ') a = χ a * χ' a := rfl
@[simp]
lemma coe_to_fun_mul (χ χ' : mul_char R R') : ⇑(χ * χ') = χ * χ' := rfl
protected
lemma one_mul (χ : mul_char R R') : (1 : mul_char R R') * χ = χ := by { ext, simp }
protected
lemma mul_one (χ : mul_char R R') : χ * 1 = χ := by { ext, simp }
noncomputable
def inv (χ : mul_char R R') : mul_char R R' :=
{ to_fun := λ a, monoid_with_zero.inverse (χ a),
  map_nonunit' := λ a ha, by simp [map_nonunit _ ha],
  ..monoid_with_zero.inverse.to_monoid_hom.comp χ.to_monoid_hom }
noncomputable
instance has_inv : has_inv (mul_char R R') := ⟨inv⟩
lemma inv_apply_eq_inv (χ : mul_char R R') (a : R) :
  χ⁻¹ a = ring.inverse (χ a) :=
eq.refl $ inv χ a
lemma inv_apply_eq_inv' {R' : Type v} [field R'] (χ : mul_char R R') (a : R) :
  χ⁻¹ a = (χ a)⁻¹ :=
(inv_apply_eq_inv χ a).trans $ ring.inverse_eq_inv (χ a)
lemma inv_apply {R : Type u} [comm_monoid_with_zero R] (χ : mul_char R R') (a : R) :
  χ⁻¹ a = χ (ring.inverse a) :=
begin
  by_cases ha : is_unit a,
  { rw [inv_apply_eq_inv],
    have h := is_unit.map χ ha,
    apply_fun ((*) (χ a)) using is_unit.mul_right_injective h,
    rw [ring.mul_inverse_cancel _ h, ← map_mul, ring.mul_inverse_cancel _ ha, mul_char.map_one], },
lemma inv_apply' {R : Type u} [field R] (χ : mul_char R R') (a : R) : χ⁻¹ a = χ a⁻¹ :=
(inv_apply χ a).trans $ congr_arg _ (ring.inverse_eq_inv a)
@[simp]
lemma inv_mul (χ : mul_char R R') : χ⁻¹ * χ = 1 :=
begin
  ext x,
  rw [coe_to_fun_mul, pi.mul_apply, inv_apply_eq_inv,
      ring.inverse_mul_cancel _ (is_unit.map _ x.is_unit), one_apply_coe],
end
noncomputable
instance comm_group : comm_group (mul_char R R') :=
{ one := 1,
  mul := (*),
  inv := has_inv.inv,
  mul_left_inv := inv_mul,
  mul_assoc := by { intros χ₁ χ₂ χ₃, ext a, simp [mul_assoc], },
  mul_comm := by { intros χ₁ χ₂, ext a, simp [mul_comm], },
  one_mul := one_mul,
  mul_one := mul_one, }
lemma pow_apply_coe (χ : mul_char R R') (n : ℕ) (a : Rˣ) :
  (χ ^ n) a = (χ a) ^ n :=
begin
  induction n with n ih,
  { rw [pow_zero, pow_zero, one_apply_coe], },
  { rw [pow_succ, pow_succ, mul_apply, ih], },
end
lemma pow_apply' (χ : mul_char R R') {n : ℕ} (hn : 0 < n) (a : R) :
  (χ ^ n) a = (χ a) ^ n :=
begin
  by_cases ha : is_unit a,
  { exact pow_apply_coe χ n ha.unit, },
  { rw [map_nonunit (χ ^ n) ha, map_nonunit χ ha, zero_pow hn], },
end
end mul_char
end group
end definition_and_group
section properties
namespace mul_char
universes u v w
variables {R : Type u} [comm_ring R] {R' : Type v} [comm_ring R'] {R'' : Type w} [comm_ring R'']
def is_nontrivial (χ : mul_char R R') : Prop := ∃ a : Rˣ, χ a ≠ 1
lemma is_nontrivial_iff (χ : mul_char R R') : χ.is_nontrivial ↔ χ ≠ 1 :=
by simp only [is_nontrivial, ne.def, ext_iff, not_forall, one_apply_coe]
def is_quadratic (χ : mul_char R R') : Prop := ∀ a, χ a = 0 ∨ χ a = 1 ∨ χ a = -1
@[simps]
def ring_hom_comp (χ : mul_char R R') (f : R' →+* R'') : mul_char R R'' :=
{ to_fun := λ a, f (χ a),
  map_nonunit' := λ a ha, by simp only [map_nonunit χ ha, map_zero],
  ..f.to_monoid_hom.comp χ.to_monoid_hom }
lemma is_nontrivial.comp {χ : mul_char R R'} (hχ : χ.is_nontrivial)
 {f : R' →+* R''} (hf : function.injective f) :
  (χ.ring_hom_comp f).is_nontrivial :=
begin
  obtain ⟨a, ha⟩ := hχ,
  use a,
  rw [ring_hom_comp_apply, ← ring_hom.map_one f],
  exact λ h, ha (hf h),
end
lemma is_quadratic.comp {χ : mul_char R R'} (hχ : χ.is_quadratic) (f : R' →+* R'') :
  (χ.ring_hom_comp f).is_quadratic :=
begin
  intro a,
  rcases hχ a with (ha | ha | ha);
    simp [ha],
end
lemma is_quadratic.inv {χ : mul_char R R'} (hχ : χ.is_quadratic) : χ⁻¹ = χ :=
begin
  ext x,
  rw [inv_apply_eq_inv],
  rcases hχ x with h₀ | h₁ | h₂,
  { rw [h₀, ring.inverse_zero], },
  { rw [h₁, ring.inverse_one], },
  { rw [h₂, (by norm_cast : (-1 : R') = (-1 : R'ˣ)), ring.inverse_unit (-1 : R'ˣ)],
    refl, },
end
lemma is_quadratic.sq_eq_one {χ : mul_char R R'} (hχ : χ.is_quadratic) : χ ^ 2 = 1 :=
begin
  convert mul_left_inv _,
  rw [pow_two, hχ.inv],
end
lemma is_quadratic.pow_char {χ : mul_char R R'} (hχ : χ.is_quadratic)
 (p : ℕ) [hp : fact p.prime] [char_p R' p] :
  χ ^ p = χ :=
begin
  ext x,
  rw [pow_apply_coe],
  rcases hχ x with (hx | hx | hx); rw hx,
  { rw [zero_pow (fact.out p.prime).pos], },
  { rw [one_pow], },
  { exact char_p.neg_one_pow_char R' p, },
end
lemma is_quadratic.pow_even {χ : mul_char R R'} (hχ : χ.is_quadratic) {n : ℕ} (hn : even n) :
  χ ^ n = 1 :=
begin
  obtain ⟨n, rfl⟩ := even_iff_two_dvd.mp hn,
  rw [pow_mul, hχ.sq_eq_one, one_pow]
end
lemma is_quadratic.pow_odd {χ : mul_char R R'} (hχ : χ.is_quadratic) {n : ℕ} (hn : odd n) :
  χ ^ n = χ :=
begin
  obtain ⟨n, rfl⟩ := hn,
  rw [pow_add, pow_one, hχ.pow_even (even_two_mul _), one_mul]
end
open_locale big_operators
lemma is_nontrivial.sum_eq_zero [fintype R] [is_domain R'] {χ : mul_char R R'}
 (hχ : χ.is_nontrivial) :
  ∑ a, χ a = 0 :=
begin
  rcases hχ with ⟨b, hb⟩,
  refine eq_zero_of_mul_eq_self_left hb _,
  simp only [finset.mul_sum, ← map_mul],
  exact fintype.sum_bijective _ (units.mul_left_bijective b) _ _ (λ x, rfl)
end
lemma sum_one_eq_card_units [fintype R] [decidable_eq R] :
  ∑ a, (1 : mul_char R R') a = fintype.card Rˣ :=
begin
  calc ∑ a, (1 : mul_char R R') a
      = ∑ a : R, if is_unit a then 1 else 0 : finset.sum_congr rfl (λ a _, _)
  ... = ((finset.univ : finset R).filter is_unit).card : finset.sum_boole
  ... = (finset.univ.map (⟨(coe : Rˣ → R), units.ext⟩)).card : _
  ... = fintype.card Rˣ : congr_arg _ (finset.card_map _),
  { split_ifs with h h,
    { exact one_apply_coe h.unit },
    { exact map_nonunit _ h } },
  { congr,
    ext a,
    simp only [finset.mem_filter, finset.mem_univ, true_and, finset.mem_map,
               function.embedding.coe_fn_mk, exists_true_left, is_unit], },
end
end mul_char
end properties
