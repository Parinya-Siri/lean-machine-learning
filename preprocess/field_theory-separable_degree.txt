import algebra.algebra.basic
import algebra.char_p.exp_char
import field_theory.separable
namespace polynomial
noncomputable theory
open_locale classical polynomial
section comm_semiring
variables {F : Type} [comm_semiring F] (q : ℕ)
def is_separable_contraction (f : F[X]) (g : F[X]) : Prop :=
g.separable ∧ ∃ m : ℕ, expand F (q^m) g = f
def has_separable_contraction (f : F[X]) : Prop :=
∃ g : F[X], is_separable_contraction q f g
variables {q} {f : F[X]} (hf : has_separable_contraction q f)
def has_separable_contraction.contraction : F[X] := classical.some hf
def has_separable_contraction.degree : ℕ := hf.contraction.nat_degree
lemma is_separable_contraction.dvd_degree' {g} (hf : is_separable_contraction q f g) :
  ∃ m : ℕ, g.nat_degree * (q ^ m) = f.nat_degree :=
begin
  obtain ⟨m, rfl⟩ := hf.2,
  use m,
  rw nat_degree_expand,
end
lemma has_separable_contraction.dvd_degree' : ∃ m : ℕ, hf.degree * (q ^ m) = f.nat_degree :=
(classical.some_spec hf).dvd_degree'
lemma has_separable_contraction.dvd_degree :
  hf.degree ∣ f.nat_degree :=
let ⟨a, ha⟩ := hf.dvd_degree' in dvd.intro (q ^ a) ha
lemma has_separable_contraction.eq_degree {f : F[X]}
  (hf : has_separable_contraction 1 f) : hf.degree = f.nat_degree :=
let ⟨a, ha⟩ := hf.dvd_degree' in by rw [←ha, one_pow a, mul_one]
end comm_semiring
section field
variables {F : Type} [field F]
variables (q : ℕ) {f : F[X]} (hf : has_separable_contraction q f)
lemma _root_.irreducible.has_separable_contraction (q : ℕ) [hF : exp_char F q]
  (f : F[X]) (irred : irreducible f) : has_separable_contraction q f :=
begin
  casesI hF,
  { exact ⟨f, irred.separable, ⟨0, by rw [pow_zero, expand_one]⟩⟩ },
  { rcases exists_separable_of_irreducible q irred ‹q.prime›.ne_zero with ⟨n, g, hgs, hge⟩,
    exact ⟨g, hgs, n, hge⟩, }
end
lemma contraction_degree_eq_aux [hq : fact q.prime] [hF : char_p F q]
  (g g' : F[X]) (m m' : ℕ)
  (h_expand : expand F (q^m) g = expand F (q^m') g')
  (h : m < m') (hg : g.separable):
  g.nat_degree =  g'.nat_degree :=
begin
  obtain ⟨s, rfl⟩ := nat.exists_eq_add_of_lt h,
  rw [add_assoc, pow_add, expand_mul] at h_expand,
  let aux := expand_injective (pow_pos hq.1.pos m) h_expand,
  rw aux at hg,
  have := (is_unit_or_eq_zero_of_separable_expand q (s + 1) hq.out.pos hg).resolve_right
    s.succ_ne_zero,
  rw [aux, nat_degree_expand,
    nat_degree_eq_of_degree_eq_some (degree_eq_zero_of_is_unit this),
    zero_mul]
end
theorem contraction_degree_eq_or_insep
  [hq : fact q.prime] [char_p F q]
  (g g' : F[X]) (m m' : ℕ)
  (h_expand : expand F (q^m) g = expand F (q^m') g')
  (hg : g.separable) (hg' : g'.separable) :
  g.nat_degree = g'.nat_degree :=
begin
  by_cases h : m = m',
theorem is_separable_contraction.degree_eq [hF : exp_char F q]
  (g : F[X]) (hg : is_separable_contraction q f g) :
  g.nat_degree = hf.degree :=
begin
  casesI hF,
  { rcases hg with ⟨g, m, hm⟩,
    rw [one_pow, expand_one] at hm,
    rw hf.eq_degree,
    rw hm, },
  { rcases hg with ⟨hg, m, hm⟩,
    let g' := classical.some hf,
    cases (classical.some_spec hf).2 with m' hm',
    haveI : fact q.prime := fact_iff.2 hF_hprime,
    apply contraction_degree_eq_or_insep q g g' m m',
    rw [hm, hm'],
    exact hg, exact (classical.some_spec hf).1 }
end
end field
end polynomial
