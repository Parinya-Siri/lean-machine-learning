import category_theory.action
import combinatorics.quiver.arborescence
import combinatorics.quiver.connected_component
import group_theory.is_free_group
noncomputable theory
open_locale classical
universes v u
open category_theory category_theory.action_category category_theory.single_obj quiver
  is_free_group as fgp
@[nolint unused_arguments has_inhabited_instance]
def is_free_groupoid.generators (G) [groupoid G] := G
class is_free_groupoid (G) [groupoid.{v} G] :=
(quiver_generators : quiver.{v+1} (is_free_groupoid.generators G))
(of : Œ† {a b : is_free_groupoid.generators G}, (a ‚ü∂ b) ‚Üí ((show G, from a) ‚ü∂ b))
(unique_lift : ‚àÄ {X : Type v} [group X] (f : labelling (is_free_groupoid.generators G) X),
                ‚àÉ! F : G ‚•§ single_obj X, ‚àÄ a b (g : a ‚ü∂ b),
                  F.map (of g) = f g)
namespace is_free_groupoid
attribute [instance] quiver_generators
@[ext]
lemma ext_functor {G} [groupoid.{v} G] [is_free_groupoid G] {X : Type v} [group X]
  (f g : G ‚•§ single_obj X)
  (h : ‚àÄ a b (e : a ‚ü∂ b), f.map (of e) = g.map (of e)) :
  f = g :=
let ‚ü®_, _, u‚ü© := @unique_lift G _ _ X _ (Œª (a b : generators G) (e : a ‚ü∂ b), g.map (of e)) in
trans (u _ h) (u _ (Œª _ _ _, rfl)).symm
instance action_groupoid_is_free {G A : Type u} [group G] [is_free_group G] [mul_action G A] :
  is_free_groupoid (action_category G A) :=
{ quiver_generators := ‚ü®Œª a b, { e : fgp.generators G // fgp.of e ‚Ä¢ a.back = b.back }‚ü©,
  of := Œª a b e, ‚ü®fgp.of e, e.property‚ü©,
  unique_lift := begin
    introsI X _ f,
    let f' : fgp.generators G ‚Üí (A ‚Üí X) ‚ãä[mul_aut_arrow] G :=
      Œª e, ‚ü®Œª b, @f ‚ü®(), _‚ü© ‚ü®(), b‚ü© ‚ü®e, smul_inv_smul _ b‚ü©, fgp.of e‚ü©,
    rcases fgp.unique_lift f' with ‚ü®F', hF', uF'‚ü©,
    refine ‚ü®uncurry F' _, _, _‚ü©,
    { suffices : semidirect_product.right_hom.comp F' = monoid_hom.id _,
      { exact monoid_hom.ext_iff.mp this },
      ext,
      rw [monoid_hom.comp_apply, hF'],
      refl },
    { rintros ‚ü®‚ü®‚ü©, a : A‚ü© ‚ü®‚ü®‚ü©, b‚ü© ‚ü®e, h : fgp.of e ‚Ä¢ a = b‚ü©,
      change (F' (fgp.of _)).left _ = _,
      rw hF',
      cases (inv_smul_eq_iff.mpr h.symm),
      refl },
    { intros E hE,
      have : curry E = F',
      { apply uF',
        intro e,
        ext,
        { convert hE _ _ _, refl },
        { refl } },
      apply functor.hext,
      { intro, apply unit.ext },
      { refine action_category.cases _, intros,
        simp only [‚Üêthis, uncurry_map, curry_apply_left, coe_back, hom_of_pair.val] } },
  end }
namespace spanning_tree
variables {G : Type u} [groupoid.{u} G] [is_free_groupoid G]
  (T : wide_subquiver (symmetrify $ generators G)) [arborescence T]
private def root' : G := show T, from root T
def tree_hom (a : G) : root' T ‚ü∂ a := hom_of_path T default
lemma tree_hom_eq {a : G} (p : path (root T) a) : tree_hom T a = hom_of_path T p :=
by rw [tree_hom, unique.default_eq]
@[simp] lemma tree_hom_root : tree_hom T (root' T) = ùüô _ :=
def loop_of_hom {a b : G} (p : a ‚ü∂ b) : End (root' T) :=
tree_hom T a ‚â´ p ‚â´ inv (tree_hom T b)
lemma loop_of_hom_eq_id {a b : generators G} (e ‚àà wide_subquiver_symmetrify T a b) :
  loop_of_hom T (of e) = ùüô (root' T) :=
begin
  rw [loop_of_hom, ‚Üêcategory.assoc, is_iso.comp_inv_eq, category.id_comp],
  cases H,
  { rw [tree_hom_eq T (path.cons default ‚ü®sum.inl e, H‚ü©), hom_of_path], refl },
  { rw [tree_hom_eq T (path.cons default ‚ü®sum.inr e, H‚ü©), hom_of_path],
    simp only [is_iso.inv_hom_id, category.comp_id, category.assoc, tree_hom] }
end
@[simps] def functor_of_monoid_hom {X} [monoid X] (f : End (root' T) ‚Üí* X) :
  G ‚•§ single_obj X :=
{ obj := Œª _, (),
  map := Œª a b p, f (loop_of_hom T p),
  map_id' := begin
    intro a,
    rw [loop_of_hom, category.id_comp, is_iso.hom_inv_id, ‚ÜêEnd.one_def, f.map_one, id_as_one],
 end,
  map_comp' := begin
    intros,
    rw [comp_as_mul, ‚Üêf.map_mul],
    simp only [is_iso.inv_hom_id_assoc, loop_of_hom, End.mul_def, category.assoc]
  end }
def End_is_free : is_free_group (End (root' T)) :=
is_free_group.of_unique_lift
  ((wide_subquiver_equiv_set_total $ wide_subquiver_symmetrify T)·∂ú : set _)
  (Œª e, loop_of_hom T (of e.val.hom))
  begin
    introsI X _ f,
    let f' : labelling (generators G) X := Œª a b e,
      if h : e ‚àà wide_subquiver_symmetrify T a b then 1
      else f ‚ü®‚ü®a, b, e‚ü©, h‚ü©,
    rcases unique_lift f' with ‚ü®F', hF', uF'‚ü©,
    refine ‚ü®F'.map_End _, _, _‚ü©,
    { suffices : ‚àÄ {x y} (q : x ‚ü∂ y), F'.map (loop_of_hom T q) = (F'.map q : X),
      { rintro ‚ü®‚ü®a, b, e‚ü©, h‚ü©,
        rw [functor.map_End_apply, this, hF'],
        exact dif_neg h },
      intros,
      suffices : ‚àÄ {a} (p : path (root' T) a), F'.map (hom_of_path T p) = 1,
      { simp only [this, tree_hom, comp_as_mul, inv_as_inv, loop_of_hom,
        inv_one, mul_one, one_mul, functor.map_inv, functor.map_comp] },
      intros a p, induction p with b c p e ih,
      { rw [hom_of_path, F'.map_id, id_as_one] },
      rw [hom_of_path, F'.map_comp, comp_as_mul, ih, mul_one],
      rcases e with ‚ü®e | e, eT‚ü©,
      { rw hF', exact dif_pos (or.inl eT) },
      { rw [F'.map_inv, inv_as_inv, inv_eq_one, hF'], exact dif_pos (or.inr eT) } },
    { intros E hE,
      ext,
      suffices : (functor_of_monoid_hom T E).map x = F'.map x,
      { simpa only [loop_of_hom, functor_of_monoid_hom_map, is_iso.inv_id, tree_hom_root,
          category.id_comp, category.comp_id] using this },
      congr,
      apply uF',
      intros a b e,
      change E (loop_of_hom T _) = dite _ _ _,
      split_ifs,
      { rw [loop_of_hom_eq_id T e h, ‚ÜêEnd.one_def, E.map_one] },
      { exact hE ‚ü®‚ü®a, b, e‚ü©, h‚ü© } }
  end
end spanning_tree
private def symgen {G : Type u} [groupoid.{v} G] [is_free_groupoid G] :
  G ‚Üí symmetrify (generators G) := id
lemma path_nonempty_of_hom {G} [groupoid.{u u} G] [is_free_groupoid G] {a b : G} :
  nonempty (a ‚ü∂ b) ‚Üí nonempty (path (symgen a) (symgen b)) :=
begin
  rintro ‚ü®p‚ü©,
  rw [‚Üê@weakly_connected_component.eq (generators G), eq_comm,
    ‚Üêfree_group.of_injective.eq_iff, ‚Üêmul_inv_eq_one],
  let X := free_group (weakly_connected_component $ generators G),
  let f : G ‚Üí X := Œª g, free_group.of (weakly_connected_component.mk g),
  let F : G ‚•§ single_obj X := single_obj.difference_functor f,
  change F.map p = ((category_theory.functor.const G).obj ()).map p,
  congr, ext,
  rw [functor.const.obj_map, id_as_one, difference_functor_map, mul_inv_eq_one],
  apply congr_arg free_group.of,
  apply (weakly_connected_component.eq _ _).mpr,
  exact ‚ü®hom.to_path (sum.inr e)‚ü©,
end
instance generators_connected (G) [groupoid.{u u} G] [is_connected G] [is_free_groupoid G]
  (r : G) : rooted_connected (symgen r) :=
‚ü®Œª b, path_nonempty_of_hom (category_theory.nonempty_hom_of_connected_groupoid r b)‚ü©
instance End_is_free_of_connected_free {G} [groupoid G] [is_connected G] [is_free_groupoid G]
  (r : G) : is_free_group (End r) :=
spanning_tree.End_is_free $ geodesic_subtree (symgen r)
end is_free_groupoid
instance subgroup_is_free_of_is_free {G : Type u} [group G] [is_free_group G]
  (H : subgroup G) : is_free_group H :=
is_free_group.of_mul_equiv (End_mul_equiv_subgroup H)
