import algebra.category.Mon.limits
import algebra.category.Group.preadditive
import category_theory.over
import category_theory.limits.concrete_category
import category_theory.limits.shapes.concrete_category
import group_theory.subgroup.basic
open category_theory
open category_theory.limits
universes v u
noncomputable theory
variables {J : Type v} [small_category J]
namespace Group
@[to_additive]
instance group_obj (F : J ‚•§ Group.{max v u}) (j) :
  group ((F ‚ãô forget Group).obj j) :=
by { change group (F.obj j), apply_instance }
@[to_additive
  "The flat sections of a functor into `AddGroup` form an additive subgroup of all sections."]
def sections_subgroup (F : J ‚•§ Group) :
  subgroup (Œ† j, F.obj j) :=
{ carrier := (F ‚ãô forget Group).sections,
  inv_mem' := Œª a ah j j' f,
  begin
    simp only [forget_map_eq_coe, functor.comp_map, pi.inv_apply, monoid_hom.map_inv, inv_inj],
    dsimp [functor.sections] at ah,
    rw ah f,
  end,
  ..(Mon.sections_submonoid (F ‚ãô forget‚ÇÇ Group Mon)) }
@[to_additive]
instance limit_group (F : J ‚•§ Group.{max v u}) :
  group (types.limit_cone (F ‚ãô forget Group)).X :=
begin
  change group (sections_subgroup F),
  apply_instance,
end
@[to_additive "We show that the forgetful functor `AddGroup ‚•§ AddMon` creates limits.
All we need to do is notice that the limit point has an `add_group` instance available, and then
reuse the existing limit."]
instance (F : J ‚•§ Group.{max v u}) : creates_limit F (forget‚ÇÇ Group.{max v u} Mon.{max v u}) :=
creates_limit_of_reflects_iso (Œª c' t,
{ lifted_cone :=
  { X := Group.of (types.limit_cone (F ‚ãô forget Group)).X,
    œÄ :=
    { app := Mon.limit_œÄ_monoid_hom (F ‚ãô forget‚ÇÇ Group Mon.{max v u}),
      naturality' :=
        (Mon.has_limits.limit_cone (F ‚ãô forget‚ÇÇ Group Mon.{max v u})).œÄ.naturality, } },
  valid_lift := by apply is_limit.unique_up_to_iso (Mon.has_limits.limit_cone_is_limit _) t,
  makes_limit := is_limit.of_faithful (forget‚ÇÇ Group Mon.{max v u})
    (Mon.has_limits.limit_cone_is_limit _) (Œª s, _) (Œª s, rfl) })
@[to_additive "A choice of limit cone for a functor into `Group`.
(Generally, you'll just want to use `limit F`.)"]
def limit_cone (F : J ‚•§ Group.{max v u}) : cone F :=
lift_limit (limit.is_limit (F ‚ãô (forget‚ÇÇ Group Mon.{max v u})))
@[to_additive "The chosen cone is a limit cone.
(Generally, you'll just want to use `limit.cone F`.)"]
def limit_cone_is_limit (F : J ‚•§ Group.{max v u}) : is_limit (limit_cone F) :=
lifted_limit_is_limit _
@[to_additive "The category of additive groups has all limits."]
instance has_limits_of_size : has_limits_of_size.{v v} Group.{max v u} :=
{ has_limits_of_shape := Œª J ùí•, by exactI
  { has_limit := Œª F, has_limit_of_created F (forget‚ÇÇ Group Mon.{max v u}) } }
@[to_additive]
instance has_limits : has_limits Group.{u} := Group.has_limits_of_size.{u u}
@[to_additive AddGroup.forget‚ÇÇ_AddMon_preserves_limits "The forgetful functor from additive groups
to additive monoids preserves all limits.
This means the underlying additive monoid of a limit can be computed as a limit in the category of
additive monoids."]
instance forget‚ÇÇ_Mon_preserves_limits_of_size :
  preserves_limits_of_size.{v v} (forget‚ÇÇ Group Mon.{max v u}) :=
{ preserves_limits_of_shape := Œª J ùí•,
  { preserves_limit := Œª F, by apply_instance } }
@[to_additive]
instance forget‚ÇÇ_Mon_preserves_limits : preserves_limits (forget‚ÇÇ Group Mon.{u}) :=
Group.forget‚ÇÇ_Mon_preserves_limits_of_size.{u u}
@[to_additive "The forgetful functor from additive groups to types preserves all limits.
This means the underlying type of a limit can be computed as a limit in the category of types."]
instance forget_preserves_limits_of_size :
  preserves_limits_of_size.{v v} (forget Group.{max v u}) :=
{ preserves_limits_of_shape := Œª J ùí•, by exactI
  { preserves_limit := Œª F, limits.comp_preserves_limit (forget‚ÇÇ Group Mon) (forget Mon) } }
@[to_additive]
instance forget_preserves_limits : preserves_limits (forget Group.{u}) :=
Group.forget_preserves_limits_of_size.{u u}
end Group
namespace CommGroup
@[to_additive]
instance comm_group_obj (F : J ‚•§ CommGroup.{max v u}) (j) :
  comm_group ((F ‚ãô forget CommGroup).obj j) :=
by { change comm_group (F.obj j), apply_instance }
@[to_additive]
instance limit_comm_group (F : J ‚•§ CommGroup.{max v u}) :
  comm_group (types.limit_cone (F ‚ãô forget CommGroup.{max v u})).X :=
@subgroup.to_comm_group (Œ† j, F.obj j) _
  (Group.sections_subgroup (F ‚ãô forget‚ÇÇ CommGroup Group.{max v u}))
@[to_additive]
instance (F : J ‚•§ CommGroup.{max v u}) : creates_limit F (forget‚ÇÇ CommGroup Group.{max v u}) :=
creates_limit_of_reflects_iso (Œª c' t,
{ lifted_cone :=
  { X := CommGroup.of (types.limit_cone (F ‚ãô forget CommGroup)).X,
    œÄ :=
    { app := Mon.limit_œÄ_monoid_hom
        (F ‚ãô forget‚ÇÇ CommGroup Group.{max v u} ‚ãô forget‚ÇÇ Group Mon.{max v u}),
      naturality' := (Mon.has_limits.limit_cone _).œÄ.naturality, } },
  valid_lift := by apply is_limit.unique_up_to_iso (Group.limit_cone_is_limit _) t,
  makes_limit := is_limit.of_faithful (forget‚ÇÇ _ Group.{max v u} ‚ãô forget‚ÇÇ _ Mon.{max v u})
    (by apply Mon.has_limits.limit_cone_is_limit _) (Œª s, _) (Œª s, rfl) })
@[to_additive "A choice of limit cone for a functor into `CommGroup`.
(Generally, you'll just want to use `limit F`.)"]
def limit_cone (F : J ‚•§ CommGroup.{max v u}) : cone F :=
lift_limit (limit.is_limit (F ‚ãô (forget‚ÇÇ CommGroup Group.{max v u})))
@[to_additive "The chosen cone is a limit cone.
(Generally, you'll just wantto use `limit.cone F`.)"]
def limit_cone_is_limit (F : J ‚•§ CommGroup.{max v u}) : is_limit (limit_cone F) :=
lifted_limit_is_limit _
@[to_additive "The category of additive commutative groups has all limits."]
instance has_limits_of_size : has_limits_of_size.{v v} CommGroup.{max v u} :=
{ has_limits_of_shape := Œª J ùí•, by exactI
  { has_limit := Œª F, has_limit_of_created F (forget‚ÇÇ CommGroup Group.{max v u}) } }
@[to_additive]
instance has_limits : has_limits CommGroup.{u} := CommGroup.has_limits_of_size.{u u}
@[to_additive AddCommGroup.forget‚ÇÇ_AddGroup_preserves_limits
"The forgetful functor from additive commutative groups to groups preserves all limits.
(That is, the underlying group could have been computed instead as limits in the category
of additive groups.)"]
instance forget‚ÇÇ_Group_preserves_limits_of_size :
  preserves_limits_of_size.{v v} (forget‚ÇÇ CommGroup Group.{max v u}) :=
{ preserves_limits_of_shape := Œª J ùí•,
  { preserves_limit := Œª F, by apply_instance } }
@[to_additive]
instance forget‚ÇÇ_Group_preserves_limits : preserves_limits (forget‚ÇÇ CommGroup Group.{u}) :=
CommGroup.forget‚ÇÇ_Group_preserves_limits_of_size.{u u}
@[to_additive AddCommGroup.forget‚ÇÇ_AddCommMon_preserves_limits_aux
  "An auxiliary declaration to speed up typechecking."]
def forget‚ÇÇ_CommMon_preserves_limits_aux (F : J ‚•§ CommGroup.{max v u}) :
  is_limit ((forget‚ÇÇ CommGroup CommMon).map_cone (limit_cone F)) :=
CommMon.limit_cone_is_limit (F ‚ãô forget‚ÇÇ CommGroup CommMon)
@[to_additive AddCommGroup.forget‚ÇÇ_AddCommMon_preserves_limits
"The forgetful functor from additive commutative groups to additive commutative monoids preserves
all limits. (That is, the underlying additive commutative monoids could have been computed instead
as limits in the category of additive commutative monoids.)"]
instance forget‚ÇÇ_CommMon_preserves_limits_of_size :
  preserves_limits_of_size.{v v} (forget‚ÇÇ CommGroup CommMon.{max v u}) :=
{ preserves_limits_of_shape := Œª J ùí•, by exactI
  { preserves_limit := Œª F, preserves_limit_of_preserves_limit_cone
    (limit_cone_is_limit F) (forget‚ÇÇ_CommMon_preserves_limits_aux F) } }
@[to_additive AddCommGroup.forget_preserves_limits
"The forgetful functor from additive commutative groups to types preserves all limits. (That is,
the underlying types could have been computed instead as limits in the category of types.)"]
instance forget_preserves_limits_of_size :
  preserves_limits_of_size.{v v} (forget CommGroup.{max v u}) :=
{ preserves_limits_of_shape := Œª J ùí•, by exactI
  { preserves_limit := Œª F, limits.comp_preserves_limit (forget‚ÇÇ CommGroup Group) (forget Group) } }
def kernel_iso_ker {G H : AddCommGroup.{u}} (f : G ‚ü∂ H) :
  kernel f ‚âÖ AddCommGroup.of f.ker :=
{ hom :=
  { to_fun := Œª g, ‚ü®kernel.Œπ f g,
    begin
@[simps]
def kernel_iso_ker_over {G H : AddCommGroup.{u}} (f : G ‚ü∂ H) :
  over.mk (kernel.Œπ f) ‚âÖ @over.mk _ _ G (AddCommGroup.of f.ker) (add_subgroup.subtype f.ker) :=
over.iso_mk (kernel_iso_ker f) (by simp)
end AddCommGroup
