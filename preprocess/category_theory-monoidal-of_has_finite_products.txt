import category_theory.monoidal.braided
import category_theory.limits.shapes.binary_products
import category_theory.limits.shapes.terminal
universes v u
noncomputable theory
namespace category_theory
variables (C : Type u) [category.{v} C] {X Y : C}
open category_theory.limits
section
local attribute [tidy] tactic.case_bash
def monoidal_of_has_finite_products [has_terminal C] [has_binary_products C] :
  monoidal_category C :=
{ tensor_unit  := ‚ä§_ C,
  tensor_obj   := Œª X Y, X ‚®Ø Y,
  tensor_hom   := Œª _ _ _ _ f g, limits.prod.map f g,
  associator   := prod.associator,
  left_unitor  := Œª P, prod.left_unitor P,
  right_unitor := Œª P, prod.right_unitor P,
  pentagon'    := prod.pentagon,
  triangle'    := prod.triangle,
  associator_naturality' := @prod.associator_naturality _ _ _, }
end
section
local attribute [instance] monoidal_of_has_finite_products
open monoidal_category
@[simps]
def symmetric_of_has_finite_products [has_terminal C] [has_binary_products C] :
  symmetric_category C :=
{ braiding := Œª X Y, limits.prod.braiding X Y,
  braiding_naturality' := Œª X X' Y Y' f g,
    by { dsimp [tensor_hom], simp, },
  hexagon_forward' := Œª X Y Z,
    by { dsimp [monoidal_of_has_finite_products], simp },
  hexagon_reverse' := Œª X Y Z,
    by { dsimp [monoidal_of_has_finite_products], simp },
  symmetry' := Œª X Y, by { dsimp, simp, refl, }, }
end
namespace monoidal_of_has_finite_products
variables [has_terminal C] [has_binary_products C]
local attribute [instance] monoidal_of_has_finite_products
@[simp]
lemma tensor_obj (X Y : C) : X ‚äó Y = (X ‚®Ø Y) := rfl
@[simp]
lemma tensor_hom {W X Y Z : C} (f : W ‚ü∂ X) (g : Y ‚ü∂ Z) : f ‚äó g = limits.prod.map f g := rfl
@[simp]
lemma left_unitor_hom (X : C) : (Œª_ X).hom = limits.prod.snd := rfl
@[simp]
lemma left_unitor_inv (X : C) : (Œª_ X).inv = prod.lift (terminal.from X) (ùüô _) := rfl
@[simp]
lemma right_unitor_hom (X : C) : (œÅ_ X).hom = limits.prod.fst := rfl
@[simp]
lemma right_unitor_inv (X : C) : (œÅ_ X).inv = prod.lift (ùüô _) (terminal.from X) := rfl
def monoidal_of_has_finite_coproducts [has_initial C] [has_binary_coproducts C] :
  monoidal_category C :=
{ tensor_unit  := ‚ä•_ C,
  tensor_obj   := Œª X Y, X ‚®ø Y,
  tensor_hom   := Œª _ _ _ _ f g, limits.coprod.map f g,
  associator   := coprod.associator,
  left_unitor  := coprod.left_unitor,
  right_unitor := coprod.right_unitor,
  pentagon'    := coprod.pentagon,
  triangle'    := coprod.triangle,
  associator_naturality' := @coprod.associator_naturality _ _ _, }
end
section
local attribute [instance] monoidal_of_has_finite_coproducts
open monoidal_category
@[simps]
def symmetric_of_has_finite_coproducts [has_initial C] [has_binary_coproducts C] :
  symmetric_category C :=
{ braiding := limits.coprod.braiding,
  braiding_naturality' := Œª X X' Y Y' f g,
    by { dsimp [tensor_hom], simp, },
  hexagon_forward' := Œª X Y Z,
    by { dsimp [monoidal_of_has_finite_coproducts], simp },
  hexagon_reverse' := Œª X Y Z,
    by { dsimp [monoidal_of_has_finite_coproducts], simp },
  symmetry' := Œª X Y, by { dsimp, simp, refl, }, }
end
namespace monoidal_of_has_finite_coproducts
variables [has_initial C] [has_binary_coproducts C]
local attribute [instance] monoidal_of_has_finite_coproducts
@[simp]
lemma tensor_obj (X Y : C) : X ‚äó Y = (X ‚®ø Y) := rfl
@[simp]
lemma tensor_hom {W X Y Z : C} (f : W ‚ü∂ X) (g : Y ‚ü∂ Z) : f ‚äó g = limits.coprod.map f g := rfl
@[simp]
lemma left_unitor_hom (X : C) : (Œª_ X).hom = coprod.desc (initial.to X) (ùüô _) := rfl
@[simp]
lemma right_unitor_hom (X : C) : (œÅ_ X).hom = coprod.desc (ùüô _) (initial.to X) := rfl
@[simp]
lemma left_unitor_inv (X : C) : (Œª_ X).inv = limits.coprod.inr := rfl
@[simp]
lemma right_unitor_inv (X : C) : (œÅ_ X).inv = limits.coprod.inl := rfl
