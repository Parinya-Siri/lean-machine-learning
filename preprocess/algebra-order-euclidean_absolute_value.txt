import algebra.order.absolute_value
import algebra.euclidean_domain
local infix ` ≺ `:50 := euclidean_domain.r
namespace absolute_value
section ordered_semiring
variables {R S : Type*} [euclidean_domain R] [ordered_semiring S]
variables (abv : absolute_value R S)
structure is_euclidean : Prop :=
(map_lt_map_iff' : ∀ {x y}, abv x < abv y ↔ x ≺ y)
namespace is_euclidean
variables {abv}
protected lemma abs_is_euclidean : is_euclidean (absolute_value.abs : absolute_value ℤ ℤ) :=
{ map_lt_map_iff' := λ x y, show abs x < abs y ↔ nat_abs x < nat_abs y,
    by rw [abs_eq_nat_abs, abs_eq_nat_abs, coe_nat_lt] }
end int
end absolute_value
