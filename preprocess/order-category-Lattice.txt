import order.category.PartialOrder
import order.hom.lattice
universes u
open category_theory
def Lattice := bundled lattice
namespace Lattice
instance : has_coe_to_sort Lattice Type* := bundled.has_coe_to_sort
instance (X : Lattice) : lattice X := X.str
def of (α : Type*) [lattice α] : Lattice := bundled.of α
@[simp] lemma coe_of (α : Type*) [lattice α] : ↥(of α) = α := rfl
instance : inhabited Lattice := ⟨of bool⟩
instance : bundled_hom @lattice_hom :=
{ to_fun := λ _ _ _ _, coe_fn,
  id := @lattice_hom.id,
  comp := @lattice_hom.comp,
  hom_ext := λ X Y _ _, by exactI fun_like.coe_injective }
instance : large_category.{u} Lattice := bundled_hom.category lattice_hom
instance : concrete_category Lattice := bundled_hom.concrete_category lattice_hom
instance has_forget_to_PartialOrder : has_forget₂ Lattice PartialOrder :=
{ forget₂ := { obj := λ X, ⟨X⟩, map := λ X Y f, f },
  forget_comp := rfl }
@[simps] def iso.mk {α β : Lattice.{u}} (e : α ≃o β) : α ≅ β :=
{ hom := e,
  inv := e.symm,
  hom_inv_id' := by { ext, exact e.symm_apply_apply _ },
  inv_hom_id' := by { ext, exact e.apply_symm_apply _ } }
@[simps] def dual : Lattice ⥤ Lattice := { obj := λ X, of Xᵒᵈ, map := λ X Y, lattice_hom.dual }
@[simps functor inverse] def dual_equiv : Lattice ≌ Lattice :=
equivalence.mk dual dual
  (nat_iso.of_components (λ X, iso.mk $ order_iso.dual_dual X) $ λ X Y f, rfl)
  (nat_iso.of_components (λ X, iso.mk $ order_iso.dual_dual X) $ λ X Y f, rfl)
end Lattice
lemma Lattice_dual_comp_forget_to_PartialOrder :
  Lattice.dual ⋙ forget₂ Lattice PartialOrder =
    forget₂ Lattice PartialOrder ⋙ PartialOrder.dual := rfl
