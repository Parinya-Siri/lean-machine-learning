import data.nat.modeq
import group_theory.submonoid.basic
import group_theory.submonoid.membership
open nat
def is_frobenius_number (n : ℕ) (s : set ℕ) : Prop :=
is_greatest {k | k ∉ add_submonoid.closure (s)} n
variables {m n : ℕ}
theorem is_frobenius_number_pair (cop : coprime m n) (hm : 1 < m) (hn : 1 < n) :
  is_frobenius_number (m * n - m - n) {m, n} :=
begin
  simp_rw [is_frobenius_number, add_submonoid.mem_closure_pair],
  have hmn : m + n ≤ m * n := add_le_mul hm hn,
  split,
  { push_neg,
    intros a b h,
    apply cop.mul_add_mul_ne_mul (add_one_ne_zero a) (add_one_ne_zero b),
    simp only [nat.sub_sub, smul_eq_mul] at h, zify at h ⊢,
    rw [← sub_eq_zero] at h ⊢, rw ← h,
    ring, },
  { intros k hk, dsimp at hk, contrapose! hk,
    let x := chinese_remainder cop 0 k,
    have hx : x.val < m * n := chinese_remainder_lt_mul cop 0 k (ne_bot_of_gt hm) (ne_bot_of_gt hn),
    suffices key : x.1 ≤ k,
    { obtain ⟨a, ha⟩ := modeq_zero_iff_dvd.mp x.2.1,
      obtain ⟨b, hb⟩ := (modeq_iff_dvd' key).mp x.2.2,
      exact ⟨a, b, by rw [mul_comm, ←ha, mul_comm, ←hb, nat.add_sub_of_le key]⟩, },
    refine modeq.le_of_lt_add x.2.2 (lt_of_le_of_lt _ (add_lt_add_right hk n)),
    rw nat.sub_add_cancel (le_tsub_of_add_le_left hmn),
    exact modeq.le_of_lt_add
      (x.2.1.trans (modeq_zero_iff_dvd.mpr (nat.dvd_sub' (dvd_mul_right m n) dvd_rfl)).symm)
      (lt_of_lt_of_le hx le_tsub_add), },
end
