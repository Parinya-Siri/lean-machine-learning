import category_theory.category.Groupoid
import category_theory.groupoid
import topology.category.Top.basic
import topology.path_connected
import topology.homotopy.path
import algebraic_topology.fundamental_groupoid.basic
universes u v
variables {X : Type u} {Y : Type v} [topological_space X] [topological_space Y]
variables {x₀ x₁ : X}
noncomputable theory
open category_theory
@[derive [group,inhabited]]
def fundamental_group (X : Type u) [topological_space X] (x : X) :=
@Aut (fundamental_groupoid X) _ x
namespace fundamental_group
local attribute [instance] path.homotopic.setoid
local attribute [reducible] fundamental_groupoid
def fundamental_group_mul_equiv_of_path (p : path x₀ x₁) :
  fundamental_group X x₀ ≃* fundamental_group X x₁ := Aut.Aut_mul_equiv_of_iso (as_iso ⟦p⟧)
variables (x₀ x₁)
def fundamental_group_mul_equiv_of_path_connected [path_connected_space X] :
  (fundamental_group X x₀) ≃* (fundamental_group X x₁) :=
fundamental_group_mul_equiv_of_path (path_connected_space.some_path x₀ x₁)
abbreviation to_arrow {X : Top} {x : X} (p : fundamental_group X x) : x ⟶ x :=
p.hom
abbreviation to_path {X : Top} {x : X} (p : fundamental_group X x) :
  path.homotopic.quotient x x := to_arrow p
abbreviation from_arrow {X : Top} {x : X} (p : x ⟶ x) : fundamental_group X x :=
⟨p, category_theory.groupoid.inv p⟩
abbreviation from_path {X : Top} {x : X} (p : path.homotopic.quotient x x) :
  fundamental_group X x := from_arrow p
end fundamental_group
