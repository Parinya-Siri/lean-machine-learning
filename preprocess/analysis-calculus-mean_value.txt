import analysis.calculus.local_extr
import analysis.convex.slope
import analysis.convex.topology
import data.complex.is_R_or_C
variables {E : Type*} [normed_group E] [normed_space ‚Ñù E]
          {F : Type*} [normed_group F] [normed_space ‚Ñù F]
open metric set asymptotics continuous_linear_map filter
open_locale classical topological_space nnreal
lemma image_le_of_liminf_slope_right_lt_deriv_boundary' {f f' : ‚Ñù ‚Üí ‚Ñù} {a b : ‚Ñù}
  (hf : continuous_on f (Icc a b))
lemma image_le_of_liminf_slope_right_lt_deriv_boundary {f f' : ‚Ñù ‚Üí ‚Ñù} {a b : ‚Ñù}
  (hf : continuous_on f (Icc a b))
lemma image_le_of_liminf_slope_right_le_deriv_boundary {f : ‚Ñù ‚Üí ‚Ñù} {a b : ‚Ñù}
  (hf : continuous_on f (Icc a b))
  {B B' : ‚Ñù ‚Üí ‚Ñù} (ha : f a ‚â§ B a) (hB : continuous_on B (Icc a b))
  (hB' : ‚àÄ x ‚àà Ico a b, has_deriv_within_at B (B' x) (Ici x) x)
lemma image_le_of_deriv_right_lt_deriv_boundary' {f f' : ‚Ñù ‚Üí ‚Ñù} {a b : ‚Ñù}
  (hf : continuous_on f (Icc a b))
  (hf' : ‚àÄ x ‚àà Ico a b, has_deriv_within_at f (f' x) (Ici x) x)
  {B B' : ‚Ñù ‚Üí ‚Ñù} (ha : f a ‚â§ B a) (hB : continuous_on B (Icc a b))
  (hB' : ‚àÄ x ‚àà Ico a b, has_deriv_within_at B (B' x) (Ici x) x)
  (bound : ‚àÄ x ‚àà Ico a b, f x = B x ‚Üí f' x < B' x) :
  ‚àÄ ‚¶Éx‚¶Ñ, x ‚àà Icc a b ‚Üí f x ‚â§ B x :=
image_le_of_liminf_slope_right_lt_deriv_boundary' hf
  (Œª x hx r hr, (hf' x hx).liminf_right_slope_le hr) ha hB hB' bound
lemma image_le_of_deriv_right_lt_deriv_boundary {f f' : ‚Ñù ‚Üí ‚Ñù} {a b : ‚Ñù}
  (hf : continuous_on f (Icc a b))
  (hf' : ‚àÄ x ‚àà Ico a b, has_deriv_within_at f (f' x) (Ici x) x)
  {B B' : ‚Ñù ‚Üí ‚Ñù} (ha : f a ‚â§ B a) (hB : ‚àÄ x, has_deriv_at B (B' x) x)
  (bound : ‚àÄ x ‚àà Ico a b, f x = B x ‚Üí f' x < B' x) :
  ‚àÄ ‚¶Éx‚¶Ñ, x ‚àà Icc a b ‚Üí f x ‚â§ B x :=
image_le_of_deriv_right_lt_deriv_boundary' hf hf' ha
  (Œª x hx, (hB x).continuous_at.continuous_within_at)
  (Œª x hx, (hB x).has_deriv_within_at) bound
lemma image_le_of_deriv_right_le_deriv_boundary {f f' : ‚Ñù ‚Üí ‚Ñù} {a b : ‚Ñù}
  (hf : continuous_on f (Icc a b))
  (hf' : ‚àÄ x ‚àà Ico a b, has_deriv_within_at f (f' x) (Ici x) x)
  {B B' : ‚Ñù ‚Üí ‚Ñù} (ha : f a ‚â§ B a) (hB : continuous_on B (Icc a b))
  (hB' : ‚àÄ x ‚àà Ico a b, has_deriv_within_at B (B' x) (Ici x) x)
  (bound : ‚àÄ x ‚àà Ico a b, f' x ‚â§ B' x) :
  ‚àÄ ‚¶Éx‚¶Ñ, x ‚àà Icc a b ‚Üí f x ‚â§ B x :=
image_le_of_liminf_slope_right_le_deriv_boundary hf ha hB hB' $
assume x hx r hr, (hf' x hx).liminf_right_slope_le (lt_of_le_of_lt (bound x hx) hr)
section
variables {f : ‚Ñù ‚Üí E} {a b : ‚Ñù}
lemma image_norm_le_of_liminf_right_slope_norm_lt_deriv_boundary {E : Type*} [normed_group E]
  {f : ‚Ñù ‚Üí E} {f' : ‚Ñù ‚Üí ‚Ñù} (hf : continuous_on f (Icc a b))
lemma image_norm_le_of_norm_deriv_right_lt_deriv_boundary' {f' : ‚Ñù ‚Üí E}
  (hf : continuous_on f (Icc a b))
  (hf' : ‚àÄ x ‚àà Ico a b, has_deriv_within_at f (f' x) (Ici x) x)
  {B B' : ‚Ñù ‚Üí ‚Ñù} (ha : ‚à•f a‚à• ‚â§ B a) (hB : continuous_on B (Icc a b))
  (hB' : ‚àÄ x ‚àà Ico a b, has_deriv_within_at B (B' x) (Ici x) x)
  (bound : ‚àÄ x ‚àà Ico a b, ‚à•f x‚à• = B x ‚Üí ‚à•f' x‚à• < B' x) :
  ‚àÄ ‚¶Éx‚¶Ñ, x ‚àà Icc a b ‚Üí ‚à•f x‚à• ‚â§ B x :=
image_norm_le_of_liminf_right_slope_norm_lt_deriv_boundary hf
  (Œª x hx r hr, (hf' x hx).liminf_right_slope_norm_le hr) ha hB hB' bound
lemma image_norm_le_of_norm_deriv_right_lt_deriv_boundary {f' : ‚Ñù ‚Üí E}
  (hf : continuous_on f (Icc a b))
  (hf' : ‚àÄ x ‚àà Ico a b, has_deriv_within_at f (f' x) (Ici x) x)
  {B B' : ‚Ñù ‚Üí ‚Ñù} (ha : ‚à•f a‚à• ‚â§ B a) (hB : ‚àÄ x, has_deriv_at B (B' x) x)
  (bound : ‚àÄ x ‚àà Ico a b, ‚à•f x‚à• = B x ‚Üí ‚à•f' x‚à• < B' x) :
  ‚àÄ ‚¶Éx‚¶Ñ, x ‚àà Icc a b ‚Üí ‚à•f x‚à• ‚â§ B x :=
image_norm_le_of_norm_deriv_right_lt_deriv_boundary' hf hf' ha
  (Œª x hx, (hB x).continuous_at.continuous_within_at)
  (Œª x hx, (hB x).has_deriv_within_at) bound
lemma image_norm_le_of_norm_deriv_right_le_deriv_boundary' {f' : ‚Ñù ‚Üí E}
  (hf : continuous_on f (Icc a b))
  (hf' : ‚àÄ x ‚àà Ico a b, has_deriv_within_at f (f' x) (Ici x) x)
  {B B' : ‚Ñù ‚Üí ‚Ñù} (ha : ‚à•f a‚à• ‚â§ B a) (hB : continuous_on B (Icc a b))
  (hB' : ‚àÄ x ‚àà Ico a b, has_deriv_within_at B (B' x) (Ici x) x)
  (bound : ‚àÄ x ‚àà Ico a b, ‚à•f' x‚à• ‚â§ B' x) :
  ‚àÄ ‚¶Éx‚¶Ñ, x ‚àà Icc a b ‚Üí ‚à•f x‚à• ‚â§ B x :=
image_le_of_liminf_slope_right_le_deriv_boundary (continuous_norm.comp_continuous_on hf) ha hB hB' $
  (Œª x hx r hr, (hf' x hx).liminf_right_slope_norm_le (lt_of_le_of_lt (bound x hx) hr))
lemma image_norm_le_of_norm_deriv_right_le_deriv_boundary {f' : ‚Ñù ‚Üí E}
  (hf : continuous_on f (Icc a b))
  (hf' : ‚àÄ x ‚àà Ico a b, has_deriv_within_at f (f' x) (Ici x) x)
  {B B' : ‚Ñù ‚Üí ‚Ñù} (ha : ‚à•f a‚à• ‚â§ B a) (hB : ‚àÄ x, has_deriv_at B (B' x) x)
  (bound : ‚àÄ x ‚àà Ico a b, ‚à•f' x‚à• ‚â§ B' x) :
  ‚àÄ ‚¶Éx‚¶Ñ, x ‚àà Icc a b ‚Üí ‚à•f x‚à• ‚â§ B x :=
image_norm_le_of_norm_deriv_right_le_deriv_boundary' hf hf' ha
  (Œª x hx, (hB x).continuous_at.continuous_within_at)
  (Œª x hx, (hB x).has_deriv_within_at) bound
theorem norm_image_sub_le_of_norm_deriv_right_le_segment {f' : ‚Ñù ‚Üí E} {C : ‚Ñù}
  (hf : continuous_on f (Icc a b))
  (hf' : ‚àÄ x ‚àà Ico a b, has_deriv_within_at f (f' x) (Ici x) x)
  (bound : ‚àÄx ‚àà Ico a b, ‚à•f' x‚à• ‚â§ C) :
  ‚àÄ x ‚àà Icc a b, ‚à•f x - f a‚à• ‚â§ C * (x - a) :=
begin
  let g := Œª x, f x - f a,
  have hg : continuous_on g (Icc a b), from hf.sub continuous_on_const,
  have hg' : ‚àÄ x ‚àà Ico a b, has_deriv_within_at g (f' x) (Ici x) x,
  { assume x hx,
    simpa using (hf' x hx).sub (has_deriv_within_at_const _ _ _) },
  let B := Œª x, C * (x - a),
  have hB : ‚àÄ x, has_deriv_at B C x,
  { assume x,
    simpa using (has_deriv_at_const x C).mul ((has_deriv_at_id x).sub (has_deriv_at_const x a)) },
  convert image_norm_le_of_norm_deriv_right_le_deriv_boundary hg hg' _ hB bound,
  simp only [g, B], rw [sub_self, norm_zero, sub_self, mul_zero]
end
theorem norm_image_sub_le_of_norm_deriv_le_segment' {f' : ‚Ñù ‚Üí E} {C : ‚Ñù}
  (hf : ‚àÄ x ‚àà Icc a b, has_deriv_within_at f (f' x) (Icc a b) x)
  (bound : ‚àÄx ‚àà Ico a b, ‚à•f' x‚à• ‚â§ C) :
  ‚àÄ x ‚àà Icc a b, ‚à•f x - f a‚à• ‚â§ C * (x - a) :=
begin
  refine norm_image_sub_le_of_norm_deriv_right_le_segment
    (Œª x hx, (hf x hx).continuous_within_at) (Œª x hx, _) bound,
  exact (hf x $ Ico_subset_Icc_self hx).nhds_within (Icc_mem_nhds_within_Ici hx)
end
theorem norm_image_sub_le_of_norm_deriv_le_segment {C : ‚Ñù} (hf : differentiable_on ‚Ñù f (Icc a b))
  (bound : ‚àÄx ‚àà Ico a b, ‚à•deriv_within f (Icc a b) x‚à• ‚â§ C) :
  ‚àÄ x ‚àà Icc a b, ‚à•f x - f a‚à• ‚â§ C * (x - a) :=
begin
  refine norm_image_sub_le_of_norm_deriv_le_segment' _ bound,
  exact Œª x hx, (hf x  hx).has_deriv_within_at
end
theorem norm_image_sub_le_of_norm_deriv_le_segment_01' {f' : ‚Ñù ‚Üí E} {C : ‚Ñù}
  (hf : ‚àÄ x ‚àà Icc (0:‚Ñù) 1, has_deriv_within_at f (f' x) (Icc (0:‚Ñù) 1) x)
  (bound : ‚àÄx ‚àà Ico (0:‚Ñù) 1, ‚à•f' x‚à• ‚â§ C) :
  ‚à•f 1 - f 0‚à• ‚â§ C :=
by simpa only [sub_zero, mul_one]
  using norm_image_sub_le_of_norm_deriv_le_segment' hf bound 1 (right_mem_Icc.2 zero_le_one)
theorem norm_image_sub_le_of_norm_deriv_le_segment_01 {C : ‚Ñù}
  (hf : differentiable_on ‚Ñù f (Icc (0:‚Ñù) 1))
  (bound : ‚àÄx ‚àà Ico (0:‚Ñù) 1, ‚à•deriv_within f (Icc (0:‚Ñù) 1) x‚à• ‚â§ C) :
  ‚à•f 1 - f 0‚à• ‚â§ C :=
by simpa only [sub_zero, mul_one]
  using norm_image_sub_le_of_norm_deriv_le_segment hf bound 1 (right_mem_Icc.2 zero_le_one)
theorem constant_of_has_deriv_right_zero (hcont : continuous_on f (Icc a b))
  (hderiv : ‚àÄ x ‚àà Ico a b, has_deriv_within_at f 0 (Ici x) x) :
  ‚àÄ x ‚àà Icc a b, f x = f a :=
by simpa only [zero_mul, norm_le_zero_iff, sub_eq_zero] using
  Œª x hx, norm_image_sub_le_of_norm_deriv_right_le_segment
    hcont hderiv (Œª y hy, by rw norm_le_zero_iff) x hx
theorem constant_of_deriv_within_zero (hdiff : differentiable_on ‚Ñù f (Icc a b))
  (hderiv : ‚àÄ x ‚àà Ico a b, deriv_within f (Icc a b) x = 0) :
  ‚àÄ x ‚àà Icc a b, f x = f a :=
begin
  have H : ‚àÄ x ‚àà Ico a b, ‚à•deriv_within f (Icc a b) x‚à• ‚â§ 0 :=
    by simpa only [norm_le_zero_iff] using Œª x hx, hderiv x hx,
  simpa only [zero_mul, norm_le_zero_iff, sub_eq_zero] using
    Œª x hx, norm_image_sub_le_of_norm_deriv_le_segment hdiff H x hx,
end
variables {f' g : ‚Ñù ‚Üí E}
theorem eq_of_has_deriv_right_eq
  (derivf : ‚àÄ x ‚àà Ico a b, has_deriv_within_at f (f' x) (Ici x) x)
  (derivg : ‚àÄ x ‚àà Ico a b, has_deriv_within_at g (f' x) (Ici x) x)
  (fcont : continuous_on f (Icc a b)) (gcont : continuous_on g (Icc a b))
  (hi : f a = g a) :
  ‚àÄ y ‚àà Icc a b, f y = g y :=
begin
  simp only [‚Üê @sub_eq_zero _ _ (f _)] at hi ‚ä¢,
  exact hi ‚ñ∏ constant_of_has_deriv_right_zero (fcont.sub gcont)
    (Œª y hy, by simpa only [sub_self] using (derivf y hy).sub (derivg y hy)),
end
theorem eq_of_deriv_within_eq (fdiff : differentiable_on ‚Ñù f (Icc a b))
  (gdiff : differentiable_on ‚Ñù g (Icc a b))
  (hderiv : eq_on (deriv_within f (Icc a b)) (deriv_within g (Icc a b)) (Ico a b))
  (hi : f a = g a) :
  ‚àÄ y ‚àà Icc a b, f y = g y :=
begin
  have A : ‚àÄ y ‚àà Ico a b, has_deriv_within_at f (deriv_within f (Icc a b) y) (Ici y) y :=
    Œª y hy, (fdiff y (mem_Icc_of_Ico hy)).has_deriv_within_at.nhds_within
      (Icc_mem_nhds_within_Ici hy),
  have B : ‚àÄ y ‚àà Ico a b, has_deriv_within_at g (deriv_within g (Icc a b) y) (Ici y) y :=
    Œª y hy, (gdiff y (mem_Icc_of_Ico hy)).has_deriv_within_at.nhds_within
      (Icc_mem_nhds_within_Ici hy),
  exact eq_of_has_deriv_right_eq A (Œª y hy, (hderiv hy).symm ‚ñ∏ B y hy) fdiff.continuous_on
    gdiff.continuous_on hi
end
end
section
variables {ùïú G : Type*} [is_R_or_C ùïú] [normed_space ùïú E] [normed_group G] [normed_space ùïú G]
namespace convex
variables  {f : E ‚Üí G} {C : ‚Ñù} {s : set E} {x y : E} {f' : E ‚Üí E ‚ÜíL[ùïú] G} {œÜ : E ‚ÜíL[ùïú] G}
theorem norm_image_sub_le_of_norm_has_fderiv_within_le
  (hf : ‚àÄ x ‚àà s, has_fderiv_within_at f (f' x) s x) (bound : ‚àÄx‚ààs, ‚à•f' x‚à• ‚â§ C)
  (hs : convex ‚Ñù s) (xs : x ‚àà s) (ys : y ‚àà s) : ‚à•f y - f x‚à• ‚â§ C * ‚à•y - x‚à• :=
begin
  letI : normed_space ‚Ñù G := restrict_scalars.normed_space ‚Ñù ùïú G,
  have C0 : 0 ‚â§ C := le_trans (norm_nonneg _) (bound x xs),
  set g : ‚Ñù ‚Üí E := Œª t, x + t ‚Ä¢ (y - x),
  have Dg : ‚àÄ t, has_deriv_at g (y-x) t,
  { assume t,
    simpa only [one_smul] using ((has_deriv_at_id t).smul_const (y - x)).const_add x },
  have segm : Icc 0 1 ‚äÜ g ‚Åª¬π' s,
  { rw [‚Üê image_subset_iff, ‚Üê segment_eq_image'],
    apply hs.segment_subset xs ys },
  have : f x = f (g 0), by { simp only [g], rw [zero_smul, add_zero] },
  rw this,
  have : f y = f (g 1), by { simp only [g], rw [one_smul, add_sub_cancel'_right] },
  rw this,
  have D2: ‚àÄ t ‚àà Icc (0:‚Ñù) 1, has_deriv_within_at (f ‚àò g) (f' (g t) (y - x)) (Icc 0 1) t,
  { intros t ht,
    have : has_fderiv_within_at f ((f' (g t)).restrict_scalars ‚Ñù) s (g t),
      from hf (g t) (segm ht),
    exact this.comp_has_deriv_within_at _ (Dg t).has_deriv_within_at segm },
  apply norm_image_sub_le_of_norm_deriv_le_segment_01' D2,
  refine Œª t ht, le_of_op_norm_le _ _ _,
  exact bound (g t) (segm $ Ico_subset_Icc_self ht)
end
theorem lipschitz_on_with_of_nnnorm_has_fderiv_within_le {C : ‚Ñù‚â•0}
  (hf : ‚àÄ x ‚àà s, has_fderiv_within_at f (f' x) s x) (bound : ‚àÄx‚ààs, ‚à•f' x‚à•‚Çä ‚â§ C)
  (hs : convex ‚Ñù s) : lipschitz_on_with C f s :=
begin
  rw lipschitz_on_with_iff_norm_sub_le,
  intros x x_in y y_in,
  exact hs.norm_image_sub_le_of_norm_has_fderiv_within_le hf bound y_in x_in
end
lemma exists_nhds_within_lipschitz_on_with_of_has_fderiv_within_at_of_nnnorm_lt
  (hs : convex ‚Ñù s) {f : E ‚Üí G} (hder : ‚àÄ·∂† y in ùìù[s] x, has_fderiv_within_at f (f' y) s y)
  (hcont : continuous_within_at f' s x) (K : ‚Ñù‚â•0) (hK : ‚à•f' x‚à•‚Çä < K) :
  ‚àÉ t ‚àà ùìù[s] x, lipschitz_on_with K f t :=
begin
  obtain ‚ü®Œµ, Œµ0, hŒµ‚ü© :
    ‚àÉ Œµ > 0, ball x Œµ ‚à© s ‚äÜ {y | has_fderiv_within_at f (f' y) s y ‚àß ‚à•f' y‚à•‚Çä < K},
    from mem_nhds_within_iff.1 (hder.and $ hcont.nnnorm.eventually (gt_mem_nhds hK)),
  rw inter_comm at hŒµ,
  refine ‚ü®s ‚à© ball x Œµ, inter_mem_nhds_within _ (ball_mem_nhds _ Œµ0), _‚ü©,
  exact (hs.inter (convex_ball _ _)).lipschitz_on_with_of_nnnorm_has_fderiv_within_le
    (Œª y hy, (hŒµ hy).1.mono (inter_subset_left _ _)) (Œª y hy, (hŒµ hy).2.le)
end
lemma exists_nhds_within_lipschitz_on_with_of_has_fderiv_within_at
  (hs : convex ‚Ñù s) {f : E ‚Üí G} (hder : ‚àÄ·∂† y in ùìù[s] x, has_fderiv_within_at f (f' y) s y)
  (hcont : continuous_within_at f' s x) :
  ‚àÉ K (t ‚àà ùìù[s] x), lipschitz_on_with K f t :=
(exists_gt _).imp $
  hs.exists_nhds_within_lipschitz_on_with_of_has_fderiv_within_at_of_nnnorm_lt hder hcont
theorem norm_image_sub_le_of_norm_fderiv_within_le
  (hf : differentiable_on ùïú f s) (bound : ‚àÄx‚ààs, ‚à•fderiv_within ùïú f s x‚à• ‚â§ C)
  (hs : convex ‚Ñù s) (xs : x ‚àà s) (ys : y ‚àà s) : ‚à•f y - f x‚à• ‚â§ C * ‚à•y - x‚à• :=
hs.norm_image_sub_le_of_norm_has_fderiv_within_le (Œª x hx, (hf x hx).has_fderiv_within_at)
bound xs ys
theorem lipschitz_on_with_of_nnnorm_fderiv_within_le {C : ‚Ñù‚â•0}
  (hf : differentiable_on ùïú f s) (bound : ‚àÄ x ‚àà s, ‚à•fderiv_within ùïú f s x‚à•‚Çä ‚â§ C)
  (hs : convex ‚Ñù s) : lipschitz_on_with C f s:=
hs.lipschitz_on_with_of_nnnorm_has_fderiv_within_le (Œª x hx, (hf x hx).has_fderiv_within_at) bound
theorem norm_image_sub_le_of_norm_fderiv_le
  (hf : ‚àÄ x ‚àà s, differentiable_at ùïú f x) (bound : ‚àÄx‚ààs, ‚à•fderiv ùïú f x‚à• ‚â§ C)
  (hs : convex ‚Ñù s) (xs : x ‚àà s) (ys : y ‚àà s) : ‚à•f y - f x‚à• ‚â§ C * ‚à•y - x‚à• :=
hs.norm_image_sub_le_of_norm_has_fderiv_within_le
(Œª x hx, (hf x hx).has_fderiv_at.has_fderiv_within_at) bound xs ys
theorem lipschitz_on_with_of_nnnorm_fderiv_le {C : ‚Ñù‚â•0}
  (hf : ‚àÄ x ‚àà s, differentiable_at ùïú f x) (bound : ‚àÄx‚ààs, ‚à•fderiv ùïú f x‚à•‚Çä ‚â§ C)
  (hs : convex ‚Ñù s) : lipschitz_on_with C f s :=
hs.lipschitz_on_with_of_nnnorm_has_fderiv_within_le
(Œª x hx, (hf x hx).has_fderiv_at.has_fderiv_within_at) bound
theorem norm_image_sub_le_of_norm_has_fderiv_within_le'
  (hf : ‚àÄ x ‚àà s, has_fderiv_within_at f (f' x) s x) (bound : ‚àÄx‚ààs, ‚à•f' x - œÜ‚à• ‚â§ C)
  (hs : convex ‚Ñù s) (xs : x ‚àà s) (ys : y ‚àà s) : ‚à•f y - f x - œÜ (y - x)‚à• ‚â§ C * ‚à•y - x‚à• :=
begin
  let g := Œªy, f y - œÜ y,
  have hg : ‚àÄ x ‚àà s, has_fderiv_within_at g (f' x - œÜ) s x :=
    Œª x xs, (hf x xs).sub œÜ.has_fderiv_within_at,
  calc ‚à•f y - f x - œÜ (y - x)‚à• = ‚à•f y - f x - (œÜ y - œÜ x)‚à• : by simp
  ... = ‚à•(f y - œÜ y) - (f x - œÜ x)‚à• : by abel
  ... = ‚à•g y - g x‚à• : by simp
  ... ‚â§ C * ‚à•y - x‚à• : convex.norm_image_sub_le_of_norm_has_fderiv_within_le hg bound hs xs ys,
end
theorem norm_image_sub_le_of_norm_fderiv_within_le'
  (hf : differentiable_on ùïú f s) (bound : ‚àÄx‚ààs, ‚à•fderiv_within ùïú f s x - œÜ‚à• ‚â§ C)
  (hs : convex ‚Ñù s) (xs : x ‚àà s) (ys : y ‚àà s) : ‚à•f y - f x - œÜ (y - x)‚à• ‚â§ C * ‚à•y - x‚à• :=
hs.norm_image_sub_le_of_norm_has_fderiv_within_le' (Œª x hx, (hf x hx).has_fderiv_within_at)
bound xs ys
theorem norm_image_sub_le_of_norm_fderiv_le'
  (hf : ‚àÄ x ‚àà s, differentiable_at ùïú f x) (bound : ‚àÄx‚ààs, ‚à•fderiv ùïú f x - œÜ‚à• ‚â§ C)
  (hs : convex ‚Ñù s) (xs : x ‚àà s) (ys : y ‚àà s) : ‚à•f y - f x - œÜ (y - x)‚à• ‚â§ C * ‚à•y - x‚à• :=
hs.norm_image_sub_le_of_norm_has_fderiv_within_le'
(Œª x hx, (hf x hx).has_fderiv_at.has_fderiv_within_at) bound xs ys
theorem is_const_of_fderiv_within_eq_zero (hs : convex ‚Ñù s) (hf : differentiable_on ùïú f s)
  (hf' : ‚àÄ x ‚àà s, fderiv_within ùïú f s x = 0) (hx : x ‚àà s) (hy : y ‚àà s) :
  f x = f y :=
have bound : ‚àÄ x ‚àà s, ‚à•fderiv_within ùïú f s x‚à• ‚â§ 0,
  from Œª x hx, by simp only [hf' x hx, norm_zero],
by simpa only [(dist_eq_norm _ _).symm, zero_mul, dist_le_zero, eq_comm]
  using hs.norm_image_sub_le_of_norm_fderiv_within_le hf bound hx hy
theorem _root_.is_const_of_fderiv_eq_zero (hf : differentiable ùïú f) (hf' : ‚àÄ x, fderiv ùïú f x = 0)
  (x y : E) :
  f x = f y :=
convex_univ.is_const_of_fderiv_within_eq_zero hf.differentiable_on
  (Œª x _, by rw fderiv_within_univ; exact hf' x) trivial trivial
end convex
namespace convex
variables {f f' : ùïú ‚Üí G} {s : set ùïú} {x y : ùïú}
theorem norm_image_sub_le_of_norm_has_deriv_within_le {C : ‚Ñù}
  (hf : ‚àÄ x ‚àà s, has_deriv_within_at f (f' x) s x) (bound : ‚àÄx‚ààs, ‚à•f' x‚à• ‚â§ C)
  (hs : convex ‚Ñù s) (xs : x ‚àà s) (ys : y ‚àà s) : ‚à•f y - f x‚à• ‚â§ C * ‚à•y - x‚à• :=
convex.norm_image_sub_le_of_norm_has_fderiv_within_le (Œª x hx, (hf x hx).has_fderiv_within_at)
(Œª x hx, le_trans (by simp) (bound x hx)) hs xs ys
theorem lipschitz_on_with_of_nnnorm_has_deriv_within_le {C : ‚Ñù‚â•0} (hs : convex ‚Ñù s)
  (hf : ‚àÄ x ‚àà s, has_deriv_within_at f (f' x) s x) (bound : ‚àÄx‚ààs, ‚à•f' x‚à•‚Çä ‚â§ C) :
  lipschitz_on_with C f s :=
convex.lipschitz_on_with_of_nnnorm_has_fderiv_within_le (Œª x hx, (hf x hx).has_fderiv_within_at)
(Œª x hx, le_trans (by simp) (bound x hx)) hs
theorem norm_image_sub_le_of_norm_deriv_within_le {C : ‚Ñù}
  (hf : differentiable_on ùïú f s) (bound : ‚àÄx‚ààs, ‚à•deriv_within f s x‚à• ‚â§ C)
  (hs : convex ‚Ñù s) (xs : x ‚àà s) (ys : y ‚àà s) : ‚à•f y - f x‚à• ‚â§ C * ‚à•y - x‚à• :=
hs.norm_image_sub_le_of_norm_has_deriv_within_le (Œª x hx, (hf x hx).has_deriv_within_at)
bound xs ys
theorem lipschitz_on_with_of_nnnorm_deriv_within_le {C : ‚Ñù‚â•0} (hs : convex ‚Ñù s)
  (hf : differentiable_on ùïú f s) (bound : ‚àÄx‚ààs, ‚à•deriv_within f s x‚à•‚Çä ‚â§ C) :
  lipschitz_on_with C f s :=
hs.lipschitz_on_with_of_nnnorm_has_deriv_within_le (Œª x hx, (hf x hx).has_deriv_within_at) bound
theorem norm_image_sub_le_of_norm_deriv_le {C : ‚Ñù}
  (hf : ‚àÄ x ‚àà s, differentiable_at ùïú f x) (bound : ‚àÄx‚ààs, ‚à•deriv f x‚à• ‚â§ C)
  (hs : convex ‚Ñù s) (xs : x ‚àà s) (ys : y ‚àà s) : ‚à•f y - f x‚à• ‚â§ C * ‚à•y - x‚à• :=
hs.norm_image_sub_le_of_norm_has_deriv_within_le
(Œª x hx, (hf x hx).has_deriv_at.has_deriv_within_at) bound xs ys
theorem lipschitz_on_with_of_nnnorm_deriv_le {C : ‚Ñù‚â•0}
  (hf : ‚àÄ x ‚àà s, differentiable_at ùïú f x) (bound : ‚àÄx‚ààs, ‚à•deriv f x‚à•‚Çä ‚â§ C)
  (hs : convex ‚Ñù s) : lipschitz_on_with C f s :=
hs.lipschitz_on_with_of_nnnorm_has_deriv_within_le
(Œª x hx, (hf x hx).has_deriv_at.has_deriv_within_at) bound
theorem _root_.lipschitz_with_of_nnnorm_deriv_le {C : ‚Ñù‚â•0} (hf : differentiable ùïú f)
  (bound : ‚àÄ x, ‚à•deriv f x‚à•‚Çä ‚â§ C) : lipschitz_with C f :=
lipschitz_on_univ.1 $ convex_univ.lipschitz_on_with_of_nnnorm_deriv_le (Œª x hx, hf x)
  (Œª x hx, bound x)
theorem _root_.is_const_of_deriv_eq_zero (hf : differentiable ùïú f) (hf' : ‚àÄ x, deriv f x = 0)
  (x y : ùïú) :
  f x = f y :=
is_const_of_fderiv_eq_zero hf (Œª z, by { ext, simp [‚Üê deriv_fderiv, hf'] }) _ _
end convex
end
section interval
lemma exists_ratio_has_deriv_at_eq_ratio_slope :
  ‚àÉ c ‚àà Ioo a b, (g b - g a) * f' c = (f b - f a) * g' c :=
begin
  let h := Œª x, (g b - g a) * f x - (f b - f a) * g x,
  have hI : h a = h b,
  { simp only [h], ring },
  let h' := Œª x, (g b - g a) * f' x - (f b - f a) * g' x,
  have hhh' : ‚àÄ x ‚àà Ioo a b, has_deriv_at h (h' x) x,
    from Œª x hx, ((hff' x hx).const_mul (g b - g a)).sub ((hgg' x hx).const_mul (f b - f a)),
  have hhc : continuous_on h (Icc a b),
    from (continuous_on_const.mul hfc).sub (continuous_on_const.mul hgc),
  rcases exists_has_deriv_at_eq_zero h h' hab hhc hI hhh' with ‚ü®c, cmem, hc‚ü©,
  exact ‚ü®c, cmem, sub_eq_zero.1 hc‚ü©
end
omit hfc hgc
lemma exists_ratio_has_deriv_at_eq_ratio_slope' {lfa lga lfb lgb : ‚Ñù}
  (hff' : ‚àÄ x ‚àà Ioo a b, has_deriv_at f (f' x) x) (hgg' : ‚àÄ x ‚àà Ioo a b, has_deriv_at g (g' x) x)
  (hfa : tendsto f (ùìù[>] a) (ùìù lfa)) (hga : tendsto g (ùìù[>] a) (ùìù lga))
  (hfb : tendsto f (ùìù[<] b) (ùìù lfb)) (hgb : tendsto g (ùìù[<] b) (ùìù lgb)) :
  ‚àÉ c ‚àà Ioo a b, (lgb - lga) * (f' c) = (lfb - lfa) * (g' c) :=
begin
  let h := Œª x, (lgb - lga) * f x - (lfb - lfa) * g x,
  have hha : tendsto h (ùìù[>] a) (ùìù $ lgb * lfa - lfb * lga),
  { have : tendsto h (ùìù[>] a)(ùìù $ (lgb - lga) * lfa - (lfb - lfa) * lga) :=
      (tendsto_const_nhds.mul hfa).sub (tendsto_const_nhds.mul hga),
    convert this using 2,
    ring },
  have hhb : tendsto h (ùìù[<] b) (ùìù $ lgb * lfa - lfb * lga),
  { have : tendsto h (ùìù[<] b)(ùìù $ (lgb - lga) * lfb - (lfb - lfa) * lgb) :=
      (tendsto_const_nhds.mul hfb).sub (tendsto_const_nhds.mul hgb),
    convert this using 2,
    ring },
  let h' := Œª x, (lgb - lga) * f' x - (lfb - lfa) * g' x,
  have hhh' : ‚àÄ x ‚àà Ioo a b, has_deriv_at h (h' x) x,
  { intros x hx,
    exact ((hff' x hx).const_mul _ ).sub (((hgg' x hx)).const_mul _) },
  rcases exists_has_deriv_at_eq_zero' hab hha hhb hhh' with ‚ü®c, cmem, hc‚ü©,
  exact ‚ü®c, cmem, sub_eq_zero.1 hc‚ü©
end
include hfc
omit hgg'
lemma exists_has_deriv_at_eq_slope : ‚àÉ c ‚àà Ioo a b, f' c = (f b - f a) / (b - a) :=
begin
  rcases exists_ratio_has_deriv_at_eq_ratio_slope f f' hab hfc hff'
    id 1 continuous_id.continuous_on (Œª x hx, has_deriv_at_id x) with ‚ü®c, cmem, hc‚ü©,
  use [c, cmem],
  simp only [_root_.id, pi.one_apply, mul_one] at hc,
  rw [‚Üê hc, mul_div_cancel_left],
  exact ne_of_gt (sub_pos.2 hab)
end
omit hff'
lemma exists_ratio_deriv_eq_ratio_slope :
  ‚àÉ c ‚àà Ioo a b, (g b - g a) * (deriv f c) = (f b - f a) * (deriv g c) :=
exists_ratio_has_deriv_at_eq_ratio_slope f (deriv f) hab hfc
  (Œª x hx, ((hfd x hx).differentiable_at $ is_open.mem_nhds is_open_Ioo hx).has_deriv_at)
  g (deriv g) hgc $
    Œª x hx, ((hgd x hx).differentiable_at $ is_open.mem_nhds is_open_Ioo hx).has_deriv_at
omit hfc
lemma exists_ratio_deriv_eq_ratio_slope' {lfa lga lfb lgb : ‚Ñù}
  (hdf : differentiable_on ‚Ñù f $ Ioo a b) (hdg : differentiable_on ‚Ñù g $ Ioo a b)
  (hfa : tendsto f (ùìù[>] a) (ùìù lfa)) (hga : tendsto g (ùìù[>] a) (ùìù lga))
  (hfb : tendsto f (ùìù[<] b) (ùìù lfb)) (hgb : tendsto g (ùìù[<] b) (ùìù lgb)) :
  ‚àÉ c ‚àà Ioo a b, (lgb - lga) * (deriv f c) = (lfb - lfa) * (deriv g c) :=
exists_ratio_has_deriv_at_eq_ratio_slope' _ _ hab _ _
  (Œª x hx, ((hdf x hx).differentiable_at $ Ioo_mem_nhds hx.1 hx.2).has_deriv_at)
  (Œª x hx, ((hdg x hx).differentiable_at $ Ioo_mem_nhds hx.1 hx.2).has_deriv_at)
  hfa hga hfb hgb
lemma exists_deriv_eq_slope : ‚àÉ c ‚àà Ioo a b, deriv f c = (f b - f a) / (b - a) :=
exists_has_deriv_at_eq_slope f (deriv f) hab hfc
  (Œª x hx, ((hfd x hx).differentiable_at $ is_open.mem_nhds is_open_Ioo hx).has_deriv_at)
end interval
theorem convex.mul_sub_lt_image_sub_of_lt_deriv {D : set ‚Ñù} (hD : convex ‚Ñù D) {f : ‚Ñù ‚Üí ‚Ñù}
  (hf : continuous_on f D) (hf' : differentiable_on ‚Ñù f (interior D))
  {C} (hf'_gt : ‚àÄ x ‚àà interior D, C < deriv f x) :
  ‚àÄ x y ‚àà D, x < y ‚Üí C * (y - x) < f y - f x :=
begin
  assume x hx y hy hxy,
  have hxyD : Icc x y ‚äÜ D, from hD.ord_connected.out hx hy,
  have hxyD' : Ioo x y ‚äÜ interior D,
    from subset_sUnion_of_mem ‚ü®is_open_Ioo, subset.trans Ioo_subset_Icc_self hxyD‚ü©,
  obtain ‚ü®a, a_mem, ha‚ü© : ‚àÉ a ‚àà Ioo x y, deriv f a = (f y - f x) / (y - x),
    from exists_deriv_eq_slope f hxy (hf.mono hxyD) (hf'.mono hxyD'),
  have : C < (f y - f x) / (y - x), by { rw [‚Üê ha], exact hf'_gt _ (hxyD' a_mem) },
  exact (lt_div_iff (sub_pos.2 hxy)).1 this
end
theorem mul_sub_lt_image_sub_of_lt_deriv {f : ‚Ñù ‚Üí ‚Ñù} (hf : differentiable ‚Ñù f)
  {C} (hf'_gt : ‚àÄ x, C < deriv f x) ‚¶Éx y‚¶Ñ (hxy : x < y) :
  C * (y - x) < f y - f x :=
convex_univ.mul_sub_lt_image_sub_of_lt_deriv hf.continuous.continuous_on hf.differentiable_on
  (Œª x _, hf'_gt x) x trivial y trivial hxy
theorem convex.mul_sub_le_image_sub_of_le_deriv {D : set ‚Ñù} (hD : convex ‚Ñù D) {f : ‚Ñù ‚Üí ‚Ñù}
  (hf : continuous_on f D) (hf' : differentiable_on ‚Ñù f (interior D))
  {C} (hf'_ge : ‚àÄ x ‚àà interior D, C ‚â§ deriv f x) :
  ‚àÄ x y ‚àà D, x ‚â§ y ‚Üí C * (y - x) ‚â§ f y - f x :=
begin
  assume x hx y hy hxy,
  cases eq_or_lt_of_le hxy with hxy' hxy', by rw [hxy', sub_self, sub_self, mul_zero],
  have hxyD : Icc x y ‚äÜ D, from hD.ord_connected.out hx hy,
  have hxyD' : Ioo x y ‚äÜ interior D,
    from subset_sUnion_of_mem ‚ü®is_open_Ioo, subset.trans Ioo_subset_Icc_self hxyD‚ü©,
  obtain ‚ü®a, a_mem, ha‚ü© : ‚àÉ a ‚àà Ioo x y, deriv f a = (f y - f x) / (y - x),
    from exists_deriv_eq_slope f hxy' (hf.mono hxyD) (hf'.mono hxyD'),
  have : C ‚â§ (f y - f x) / (y - x), by { rw [‚Üê ha], exact hf'_ge _ (hxyD' a_mem) },
  exact (le_div_iff (sub_pos.2 hxy')).1 this
end
theorem mul_sub_le_image_sub_of_le_deriv {f : ‚Ñù ‚Üí ‚Ñù} (hf : differentiable ‚Ñù f)
  {C} (hf'_ge : ‚àÄ x, C ‚â§ deriv f x) ‚¶Éx y‚¶Ñ (hxy : x ‚â§ y) :
  C * (y - x) ‚â§ f y - f x :=
convex_univ.mul_sub_le_image_sub_of_le_deriv hf.continuous.continuous_on hf.differentiable_on
  (Œª x _, hf'_ge x) x trivial y trivial hxy
theorem convex.image_sub_lt_mul_sub_of_deriv_lt {D : set ‚Ñù} (hD : convex ‚Ñù D) {f : ‚Ñù ‚Üí ‚Ñù}
  (hf : continuous_on f D) (hf' : differentiable_on ‚Ñù f (interior D))
  {C} (lt_hf' : ‚àÄ x ‚àà interior D, deriv f x < C) :
  ‚àÄ x y ‚àà D, x < y ‚Üí f y - f x < C * (y - x) :=
begin
  assume x hx y hy hxy,
  have hf'_gt : ‚àÄ x ‚àà interior D, -C < deriv (Œª y, -f y) x,
  { assume x hx,
    rw [deriv.neg, neg_lt_neg_iff],
    exact lt_hf' x hx },
  simpa [-neg_lt_neg_iff]
    using neg_lt_neg (hD.mul_sub_lt_image_sub_of_lt_deriv hf.neg hf'.neg hf'_gt x hx y hy hxy)
end
theorem image_sub_lt_mul_sub_of_deriv_lt {f : ‚Ñù ‚Üí ‚Ñù} (hf : differentiable ‚Ñù f)
  {C} (lt_hf' : ‚àÄ x, deriv f x < C) ‚¶Éx y‚¶Ñ (hxy : x < y) :
  f y - f x < C * (y - x) :=
convex_univ.image_sub_lt_mul_sub_of_deriv_lt hf.continuous.continuous_on hf.differentiable_on
  (Œª x _, lt_hf' x) x trivial y trivial hxy
theorem convex.image_sub_le_mul_sub_of_deriv_le {D : set ‚Ñù} (hD : convex ‚Ñù D) {f : ‚Ñù ‚Üí ‚Ñù}
  (hf : continuous_on f D) (hf' : differentiable_on ‚Ñù f (interior D))
  {C} (le_hf' : ‚àÄ x ‚àà interior D, deriv f x ‚â§ C) :
  ‚àÄ x y ‚àà D, x ‚â§ y ‚Üí f y - f x ‚â§ C * (y - x) :=
begin
  assume x hx y hy hxy,
  have hf'_ge : ‚àÄ x ‚àà interior D, -C ‚â§ deriv (Œª y, -f y) x,
  { assume x hx,
    rw [deriv.neg, neg_le_neg_iff],
    exact le_hf' x hx },
  simpa [-neg_le_neg_iff]
    using neg_le_neg (hD.mul_sub_le_image_sub_of_le_deriv hf.neg hf'.neg hf'_ge x hx y hy hxy)
end
theorem image_sub_le_mul_sub_of_deriv_le {f : ‚Ñù ‚Üí ‚Ñù} (hf : differentiable ‚Ñù f)
  {C} (le_hf' : ‚àÄ x, deriv f x ‚â§ C) ‚¶Éx y‚¶Ñ (hxy : x ‚â§ y) :
  f y - f x ‚â§ C * (y - x) :=
convex_univ.image_sub_le_mul_sub_of_deriv_le hf.continuous.continuous_on hf.differentiable_on
  (Œª x _, le_hf' x) x trivial y trivial hxy
theorem convex.strict_mono_on_of_deriv_pos {D : set ‚Ñù} (hD : convex ‚Ñù D) {f : ‚Ñù ‚Üí ‚Ñù}
  (hf : continuous_on f D) (hf' : ‚àÄ x ‚àà interior D, 0 < deriv f x) :
  strict_mono_on f D :=
begin
  rintro x hx y hy,
  simpa only [zero_mul, sub_pos] using hD.mul_sub_lt_image_sub_of_lt_deriv hf _ hf' x hx y hy,
  exact Œª z hz, (differentiable_at_of_deriv_ne_zero (hf' z hz).ne').differentiable_within_at,
end
theorem strict_mono_of_deriv_pos {f : ‚Ñù ‚Üí ‚Ñù} (hf' : ‚àÄ x, 0 < deriv f x) : strict_mono f :=
strict_mono_on_univ.1 $ convex_univ.strict_mono_on_of_deriv_pos
  (Œª z _, (differentiable_at_of_deriv_ne_zero (hf' z).ne').differentiable_within_at
    .continuous_within_at)
  (Œª x _, hf' x)
theorem convex.monotone_on_of_deriv_nonneg {D : set ‚Ñù} (hD : convex ‚Ñù D) {f : ‚Ñù ‚Üí ‚Ñù}
  (hf : continuous_on f D) (hf' : differentiable_on ‚Ñù f (interior D))
  (hf'_nonneg : ‚àÄ x ‚àà interior D, 0 ‚â§ deriv f x) :
  monotone_on f D :=
Œª x hx y hy hxy, by simpa only [zero_mul, sub_nonneg]
  using hD.mul_sub_le_image_sub_of_le_deriv hf hf' hf'_nonneg x hx y hy hxy
theorem monotone_of_deriv_nonneg {f : ‚Ñù ‚Üí ‚Ñù} (hf : differentiable ‚Ñù f) (hf' : ‚àÄ x, 0 ‚â§ deriv f x) :
  monotone f :=
monotone_on_univ.1 $ convex_univ.monotone_on_of_deriv_nonneg hf.continuous.continuous_on
  hf.differentiable_on (Œª x _, hf' x)
theorem convex.strict_anti_on_of_deriv_neg {D : set ‚Ñù} (hD : convex ‚Ñù D) {f : ‚Ñù ‚Üí ‚Ñù}
  (hf : continuous_on f D) (hf' : ‚àÄ x ‚àà interior D, deriv f x < 0) :
  strict_anti_on f D :=
Œª x hx y, by simpa only [zero_mul, sub_lt_zero]
  using hD.image_sub_lt_mul_sub_of_deriv_lt hf
  (Œª z hz, (differentiable_at_of_deriv_ne_zero (hf' z hz).ne).differentiable_within_at) hf' x hx y
theorem strict_anti_of_deriv_neg {f : ‚Ñù ‚Üí ‚Ñù} (hf' : ‚àÄ x, deriv f x < 0) :
  strict_anti f :=
strict_anti_on_univ.1 $ convex_univ.strict_anti_on_of_deriv_neg
  (Œª z _, (differentiable_at_of_deriv_ne_zero (hf' z).ne).differentiable_within_at
    .continuous_within_at)
  (Œª x _, hf' x)
theorem convex.antitone_on_of_deriv_nonpos {D : set ‚Ñù} (hD : convex ‚Ñù D) {f : ‚Ñù ‚Üí ‚Ñù}
  (hf : continuous_on f D) (hf' : differentiable_on ‚Ñù f (interior D))
  (hf'_nonpos : ‚àÄ x ‚àà interior D, deriv f x ‚â§ 0) :
  antitone_on f D :=
Œª x hx y hy hxy, by simpa only [zero_mul, sub_nonpos]
  using hD.image_sub_le_mul_sub_of_deriv_le hf hf' hf'_nonpos x hx y hy hxy
theorem antitone_of_deriv_nonpos {f : ‚Ñù ‚Üí ‚Ñù} (hf : differentiable ‚Ñù f) (hf' : ‚àÄ x, deriv f x ‚â§ 0) :
  antitone f :=
antitone_on_univ.1 $ convex_univ.antitone_on_of_deriv_nonpos hf.continuous.continuous_on
  hf.differentiable_on (Œª x _, hf' x)
theorem monotone_on.convex_on_of_deriv {D : set ‚Ñù} (hD : convex ‚Ñù D) {f : ‚Ñù ‚Üí ‚Ñù}
  (hf : continuous_on f D) (hf' : differentiable_on ‚Ñù f (interior D))
  (hf'_mono : monotone_on (deriv f) (interior D)) :
  convex_on ‚Ñù D f :=
convex_on_of_slope_mono_adjacent hD
begin
  intros x y z hx hz hxy hyz,
theorem antitone_on.concave_on_of_deriv {D : set ‚Ñù} (hD : convex ‚Ñù D) {f : ‚Ñù ‚Üí ‚Ñù}
  (hf : continuous_on f D) (hf' : differentiable_on ‚Ñù f (interior D))
  (h_anti : antitone_on (deriv f) (interior D)) :
  concave_on ‚Ñù D f :=
begin
  have : monotone_on (deriv (-f)) (interior D),
  { intros x hx y hy hxy,
    convert neg_le_neg (h_anti hx hy hxy);
    convert deriv.neg },
  exact neg_convex_on_iff.mp (this.convex_on_of_deriv hD hf.neg hf'.neg),
end
lemma strict_mono_on.strict_convex_on_of_deriv {D : set ‚Ñù} (hD : convex ‚Ñù D) {f : ‚Ñù ‚Üí ‚Ñù}
  (hf : continuous_on f D) (hf' : differentiable_on ‚Ñù f (interior D))
  (hf'_mono : strict_mono_on (deriv f) (interior D)) :
  strict_convex_on ‚Ñù D f :=
strict_convex_on_of_slope_strict_mono_adjacent hD
begin
  intros x y z hx hz hxy hyz,
lemma strict_anti_on.strict_concave_on_of_deriv {D : set ‚Ñù} (hD : convex ‚Ñù D) {f : ‚Ñù ‚Üí ‚Ñù}
  (hf : continuous_on f D) (hf' : differentiable_on ‚Ñù f (interior D))
  (h_anti : strict_anti_on (deriv f) (interior D)) :
  strict_concave_on ‚Ñù D f :=
begin
  have : strict_mono_on (deriv (-f)) (interior D),
  { intros x hx y hy hxy,
    convert neg_lt_neg (h_anti hx hy hxy);
    convert deriv.neg },
  exact neg_strict_convex_on_iff.mp (this.strict_convex_on_of_deriv hD hf.neg hf'.neg),
end
theorem monotone.convex_on_univ_of_deriv {f : ‚Ñù ‚Üí ‚Ñù} (hf : differentiable ‚Ñù f)
  (hf'_mono : monotone (deriv f)) : convex_on ‚Ñù univ f :=
(hf'_mono.monotone_on _).convex_on_of_deriv convex_univ hf.continuous.continuous_on
  hf.differentiable_on
theorem antitone.concave_on_univ_of_deriv {f : ‚Ñù ‚Üí ‚Ñù} (hf : differentiable ‚Ñù f)
  (hf'_anti : antitone (deriv f)) : concave_on ‚Ñù univ f :=
(hf'_anti.antitone_on _).concave_on_of_deriv convex_univ hf.continuous.continuous_on
  hf.differentiable_on
lemma strict_mono.strict_convex_on_univ_of_deriv {f : ‚Ñù ‚Üí ‚Ñù} (hf : differentiable ‚Ñù f)
  (hf'_mono : strict_mono (deriv f)) :
  strict_convex_on ‚Ñù univ f :=
(hf'_mono.strict_mono_on _).strict_convex_on_of_deriv convex_univ hf.continuous.continuous_on
  hf.differentiable_on
lemma strict_anti.strict_concave_on_univ_of_deriv {f : ‚Ñù ‚Üí ‚Ñù} (hf : differentiable ‚Ñù f)
  (hf'_anti : strict_anti (deriv f)) : strict_concave_on ‚Ñù univ f :=
(hf'_anti.strict_anti_on _).strict_concave_on_of_deriv convex_univ hf.continuous.continuous_on
  hf.differentiable_on
theorem convex_on_of_deriv2_nonneg {D : set ‚Ñù} (hD : convex ‚Ñù D) {f : ‚Ñù ‚Üí ‚Ñù}
  (hf : continuous_on f D) (hf' : differentiable_on ‚Ñù f (interior D))
  (hf'' : differentiable_on ‚Ñù (deriv f) (interior D))
  (hf''_nonneg : ‚àÄ x ‚àà interior D, 0 ‚â§ (deriv^[2] f x)) :
  convex_on ‚Ñù D f :=
(hD.interior.monotone_on_of_deriv_nonneg hf''.continuous_on (by rwa interior_interior)
  $ by rwa interior_interior).convex_on_of_deriv hD hf hf'
theorem concave_on_of_deriv2_nonpos {D : set ‚Ñù} (hD : convex ‚Ñù D) {f : ‚Ñù ‚Üí ‚Ñù}
  (hf : continuous_on f D) (hf' : differentiable_on ‚Ñù f (interior D))
  (hf'' : differentiable_on ‚Ñù (deriv f) (interior D))
  (hf''_nonpos : ‚àÄ x ‚àà interior D, deriv^[2] f x ‚â§ 0) :
  concave_on ‚Ñù D f :=
(hD.interior.antitone_on_of_deriv_nonpos hf''.continuous_on (by rwa interior_interior)
  $ by rwa interior_interior).concave_on_of_deriv hD hf hf'
lemma strict_convex_on_of_deriv2_pos {D : set ‚Ñù} (hD : convex ‚Ñù D) {f : ‚Ñù ‚Üí ‚Ñù}
  (hf : continuous_on f D) (hf' : differentiable_on ‚Ñù f (interior D))
  (hf'' : ‚àÄ x ‚àà interior D, 0 < (deriv^[2] f) x) :
  strict_convex_on ‚Ñù D f :=
(hD.interior.strict_mono_on_of_deriv_pos (Œª z hz,
  (differentiable_at_of_deriv_ne_zero (hf'' z hz).ne').differentiable_within_at
   .continuous_within_at) $ by rwa interior_interior).strict_convex_on_of_deriv hD hf hf'
lemma strict_concave_on_of_deriv2_neg {D : set ‚Ñù} (hD : convex ‚Ñù D) {f : ‚Ñù ‚Üí ‚Ñù}
  (hf : continuous_on f D) (hf' : differentiable_on ‚Ñù f (interior D))
  (hf'' : ‚àÄ x ‚àà interior D, deriv^[2] f x < 0) :
  strict_concave_on ‚Ñù D f :=
(hD.interior.strict_anti_on_of_deriv_neg (Œª z hz,
  (differentiable_at_of_deriv_ne_zero (hf'' z hz).ne).differentiable_within_at
   .continuous_within_at) $ by rwa interior_interior).strict_concave_on_of_deriv hD hf hf'
theorem convex_on_open_of_deriv2_nonneg {D : set ‚Ñù} (hD : convex ‚Ñù D) (hD‚ÇÇ : is_open D) {f : ‚Ñù ‚Üí ‚Ñù}
  (hf' : differentiable_on ‚Ñù f D) (hf'' : differentiable_on ‚Ñù (deriv f) D)
  (hf''_nonneg : ‚àÄ x ‚àà D, 0 ‚â§ (deriv^[2] f) x) : convex_on ‚Ñù D f :=
convex_on_of_deriv2_nonneg hD hf'.continuous_on (by simpa [hD‚ÇÇ.interior_eq] using hf')
  (by simpa [hD‚ÇÇ.interior_eq] using hf'') (by simpa [hD‚ÇÇ.interior_eq] using hf''_nonneg)
theorem concave_on_open_of_deriv2_nonpos {D : set ‚Ñù} (hD : convex ‚Ñù D) (hD‚ÇÇ : is_open D) {f : ‚Ñù ‚Üí ‚Ñù}
  (hf' : differentiable_on ‚Ñù f D) (hf'' : differentiable_on ‚Ñù (deriv f) D)
  (hf''_nonpos : ‚àÄ x ‚àà D, deriv^[2] f x ‚â§ 0) : concave_on ‚Ñù D f :=
concave_on_of_deriv2_nonpos hD hf'.continuous_on (by simpa [hD‚ÇÇ.interior_eq] using hf')
  (by simpa [hD‚ÇÇ.interior_eq] using hf'') (by simpa [hD‚ÇÇ.interior_eq] using hf''_nonpos)
lemma strict_convex_on_open_of_deriv2_pos {D : set ‚Ñù} (hD : convex ‚Ñù D) (hD‚ÇÇ : is_open D)
  {f : ‚Ñù ‚Üí ‚Ñù} (hf' : differentiable_on ‚Ñù f D) (hf'' : ‚àÄ x ‚àà D, 0 < (deriv^[2] f) x) :
  strict_convex_on ‚Ñù D f :=
strict_convex_on_of_deriv2_pos hD hf'.continuous_on (by simpa [hD‚ÇÇ.interior_eq] using hf') $
  by simpa [hD‚ÇÇ.interior_eq] using hf''
lemma strict_concave_on_open_of_deriv2_neg {D : set ‚Ñù} (hD : convex ‚Ñù D) (hD‚ÇÇ : is_open D)
  {f : ‚Ñù ‚Üí ‚Ñù} (hf' : differentiable_on ‚Ñù f D) (hf'' : ‚àÄ x ‚àà D, deriv^[2] f x < 0) :
  strict_concave_on ‚Ñù D f :=
strict_concave_on_of_deriv2_neg hD hf'.continuous_on (by simpa [hD‚ÇÇ.interior_eq] using hf') $
  by simpa [hD‚ÇÇ.interior_eq] using hf''
theorem convex_on_univ_of_deriv2_nonneg {f : ‚Ñù ‚Üí ‚Ñù} (hf' : differentiable ‚Ñù f)
  (hf'' : differentiable ‚Ñù (deriv f)) (hf''_nonneg : ‚àÄ x, 0 ‚â§ (deriv^[2] f) x) :
  convex_on ‚Ñù univ f :=
convex_on_open_of_deriv2_nonneg convex_univ is_open_univ hf'.differentiable_on
  hf''.differentiable_on (Œª x _, hf''_nonneg x)
theorem concave_on_univ_of_deriv2_nonpos {f : ‚Ñù ‚Üí ‚Ñù} (hf' : differentiable ‚Ñù f)
  (hf'' : differentiable ‚Ñù (deriv f)) (hf''_nonpos : ‚àÄ x, deriv^[2] f x ‚â§ 0) :
  concave_on ‚Ñù univ f :=
concave_on_open_of_deriv2_nonpos convex_univ is_open_univ hf'.differentiable_on
  hf''.differentiable_on (Œª x _, hf''_nonpos x)
lemma strict_convex_on_univ_of_deriv2_pos {f : ‚Ñù ‚Üí ‚Ñù} (hf' : differentiable ‚Ñù f)
  (hf'' : ‚àÄ x, 0 < (deriv^[2] f) x) :
  strict_convex_on ‚Ñù univ f :=
strict_convex_on_open_of_deriv2_pos convex_univ is_open_univ hf'.differentiable_on $ Œª x _, hf'' x
lemma strict_concave_on_univ_of_deriv2_neg {f : ‚Ñù ‚Üí ‚Ñù} (hf' : differentiable ‚Ñù f)
  (hf'' : ‚àÄ x, deriv^[2] f x < 0) :
  strict_concave_on ‚Ñù univ f :=
strict_concave_on_open_of_deriv2_neg convex_univ is_open_univ hf'.differentiable_on $ Œª x _, hf'' x
theorem domain_mvt
  {f : E ‚Üí ‚Ñù} {s : set E} {x y : E} {f' : E ‚Üí (E ‚ÜíL[‚Ñù] ‚Ñù)}
  (hf : ‚àÄ x ‚àà s, has_fderiv_within_at f (f' x) s x) (hs : convex ‚Ñù s) (xs : x ‚àà s) (ys : y ‚àà s) :
  ‚àÉ z ‚àà segment ‚Ñù x y, f y - f x = f' z (y - x) :=
begin
  have hIccIoo := @Ioo_subset_Icc_self ‚Ñù _ 0 1,
variables {ùïú : Type*} [is_R_or_C ùïú] {G : Type*} [normed_group G] [normed_space ùïú G]
  {H : Type*} [normed_group H] [normed_space ùïú H] {f : G ‚Üí H} {f' : G ‚Üí G ‚ÜíL[ùïú] H} {x : G}
lemma has_strict_fderiv_at_of_has_fderiv_at_of_continuous_at
  (hder : ‚àÄ·∂† y in ùìù x, has_fderiv_at f (f' y) y) (hcont : continuous_at f' x) :
  has_strict_fderiv_at f (f' x) x :=
begin
lemma has_strict_deriv_at_of_has_deriv_at_of_continuous_at {f f' : ùïú ‚Üí G} {x : ùïú}
  (hder : ‚àÄ·∂† y in ùìù x, has_deriv_at f (f' y) y) (hcont : continuous_at f' x) :
  has_strict_deriv_at f (f' x) x :=
has_strict_fderiv_at_of_has_fderiv_at_of_continuous_at (hder.mono (Œª y hy, hy.has_fderiv_at)) $
  (smul_rightL ùïú ùïú G 1).continuous.continuous_at.comp hcont
end is_R_or_C
