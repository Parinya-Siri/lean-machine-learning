import testing.slim_check.testable
import data.list.sort
namespace tactic.interactive
open tactic slim_check
declare_trace slim_check.instance
declare_trace slim_check.decoration
declare_trace slim_check.discarded
declare_trace slim_check.success
declare_trace slim_check.shrink.steps
declare_trace slim_check.shrink.candidates .
open expr
meta inductive instance_tree
| node : name → expr → list instance_tree → instance_tree
meta def summarize_instance : expr → tactic instance_tree
| (lam n bi d b) := do
   v ← mk_local' n bi d,
   summarize_instance $ b.instantiate_var v
| e@(app f x) := do
   `(testable %%p) ← infer_type e,
   xs ← e.get_app_args.mmap_filter (try_core ∘ summarize_instance),
   pure $ instance_tree.node e.get_app_fn.const_name p xs
| e := do
  failed
meta def instance_tree.to_format : instance_tree → tactic format
| (instance_tree.node n p xs) := do
  xs ← format.join <$> (xs.mmap $ λ t, flip format.indent 2 <$> instance_tree.to_format t),
  ys ← pformat!"testable ({p})",
  pformat!"+ {n} :{format.indent ys 2}\n{xs}"
meta instance instance_tree.has_to_tactic_format : has_to_tactic_format instance_tree :=
⟨ instance_tree.to_format ⟩
meta def slim_check (cfg : slim_check_cfg := {}) : tactic unit := do
{ tgt ← retrieve $ tactic.revert_all >> target,
  let tgt' := tactic.add_decorations tgt,
  let cfg := { cfg with
               trace_discarded         := cfg.trace_discarded
                || is_trace_enabled_for `slim_check.discarded,
               trace_shrink            := cfg.trace_shrink
                || is_trace_enabled_for `slim_check.shrink.steps,
               trace_shrink_candidates := cfg.trace_shrink_candidates
                || is_trace_enabled_for `slim_check.shrink.candidates,
               trace_success           := cfg.trace_success
                || is_trace_enabled_for `slim_check.success },
  inst ← mk_app ``testable [tgt'] >>= mk_instance <|>
    fail!("Failed to create a `testable` instance for `{tgt}`.
What to do:
1. make sure that the types you are using have `slim_check.sampleable` instances
   (you can use `#sample my_type` if you are unsure);
2. make sure that the relations and predicates that your proposition use are decidable;
3. make sure that instances of `slim_check.testable` exist that, when combined,
   apply to your decorated proposition:
```
{tgt'}
```
Use `set_option trace.class_instances true` to understand what instances are missing.
Try this:
set_option trace.class_instances true
#check (by apply_instance : slim_check.testable ({tgt'}))"),
  e ← mk_mapp ``testable.check [tgt, `(cfg), tgt', inst],
  when_tracing `slim_check.decoration trace!"[testable decoration]\n  {tgt'}",
  when_tracing `slim_check.instance   $ do
  { inst ← summarize_instance inst >>= pp,
    trace!"\n[testable instance]{format.indent inst 2}" },
  code ← eval_expr (io punit) e,
  unsafe_run_io code,
  tactic.admit }
end tactic.interactive
