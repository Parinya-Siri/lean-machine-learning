import category_theory.preadditive.projective
import algebra.homology.single
import algebra.homology.homotopy_category
noncomputable theory
open category_theory
open category_theory.limits
universes v u
namespace category_theory
variables {C : Type u} [category.{v} C]
open projective
section
variables [has_zero_object C] [has_zero_morphisms C] [has_equalizers C] [has_images C]
@[nolint has_inhabited_instance]
structure ProjectiveResolution (Z : C) :=
(complex : chain_complex C ‚Ñï)
(œÄ : homological_complex.hom complex ((chain_complex.single‚ÇÄ C).obj Z))
(projective : ‚àÄ n, projective (complex.X n) . tactic.apply_instance)
(exact‚ÇÄ : exact (complex.d 1 0) (œÄ.f 0))
(exact : ‚àÄ n, exact (complex.d (n+2) (n+1)) (complex.d (n+1) n))
(epi : epi (œÄ.f 0) . tactic.apply_instance)
attribute [instance] ProjectiveResolution.projective ProjectiveResolution.epi
class has_projective_resolution (Z : C) : Prop :=
(out [] : nonempty (ProjectiveResolution Z))
section
variables (C)
class has_projective_resolutions : Prop :=
(out : ‚àÄ Z : C, has_projective_resolution Z)
attribute [instance, priority 100] has_projective_resolutions.out
end
namespace ProjectiveResolution
@[simp] lemma œÄ_f_succ {Z : C} (P : ProjectiveResolution Z) (n : ‚Ñï) :
  P.œÄ.f (n+1) = 0 :=
begin
  apply zero_of_target_iso_zero,
  dsimp, refl,
end
@[simp] lemma complex_d_comp_œÄ_f_zero {Z : C} (P : ProjectiveResolution Z) :
  P.complex.d 1 0 ‚â´ P.œÄ.f 0 = 0 :=
P.exact‚ÇÄ.w
@[simp] lemma complex_d_succ_comp {Z : C} (P : ProjectiveResolution Z) (n : ‚Ñï) :
  P.complex.d (n + 2) (n + 1) ‚â´ P.complex.d (n + 1) n = 0 :=
(P.exact _).w
instance {Z : C} (P : ProjectiveResolution Z) (n : ‚Ñï) : category_theory.epi (P.œÄ.f n) :=
by cases n; apply_instance
def self (Z : C) [category_theory.projective Z] : ProjectiveResolution Z :=
{ complex := (chain_complex.single‚ÇÄ C).obj Z,
  œÄ := ùüô ((chain_complex.single‚ÇÄ C).obj Z),
  projective := Œª n, begin
    cases n,
    { dsimp, apply_instance, },
    { dsimp, apply_instance, },
  end,
  exact‚ÇÄ := by { dsimp, exact exact_zero_mono _ },
  exact := Œª n, by { dsimp, exact exact_of_zero _ _ },
  epi := by { dsimp, apply_instance, }, }
def lift_f_zero {Y Z : C} (f : Y ‚ü∂ Z) (P : ProjectiveResolution Y) (Q : ProjectiveResolution Z) :
  P.complex.X 0 ‚ü∂ Q.complex.X 0 :=
factor_thru (P.œÄ.f 0 ‚â´ f) (Q.œÄ.f 0)
def lift_f_one {Y Z : C} (f : Y ‚ü∂ Z) (P : ProjectiveResolution Y) (Q : ProjectiveResolution Z) :
  P.complex.X 1 ‚ü∂ Q.complex.X 1 :=
exact.lift (P.complex.d 1 0 ‚â´ lift_f_zero f P Q) (Q.complex.d 1 0) (Q.œÄ.f 0) Q.exact‚ÇÄ
  (by simp [lift_f_zero, P.exact‚ÇÄ.w_assoc])
@[simp] lemma lift_f_one_zero_comm
  {Y Z : C} (f : Y ‚ü∂ Z) (P : ProjectiveResolution Y) (Q : ProjectiveResolution Z) :
  lift_f_one f P Q ‚â´ Q.complex.d 1 0 = P.complex.d 1 0 ‚â´ lift_f_zero f P Q :=
begin
  dsimp [lift_f_zero, lift_f_one],
  simp,
end
def lift_f_succ {Y Z : C} (P : ProjectiveResolution Y) (Q : ProjectiveResolution Z)
  (n : ‚Ñï) (g : P.complex.X n ‚ü∂ Q.complex.X n) (g' : P.complex.X (n+1) ‚ü∂ Q.complex.X (n+1))
  (w : g' ‚â´ Q.complex.d (n+1) n = P.complex.d (n+1) n ‚â´ g) :
  Œ£' g'' : P.complex.X (n+2) ‚ü∂ Q.complex.X (n+2),
    g'' ‚â´ Q.complex.d (n+2) (n+1) = P.complex.d (n+2) (n+1) ‚â´ g' :=
‚ü®exact.lift
  (P.complex.d (n+2) (n+1) ‚â´ g') ((Q.complex.d (n+2) (n+1))) (Q.complex.d (n+1) n) (Q.exact _)
  (by simp [w]), (by simp)‚ü©
def lift {Y Z : C} (f : Y ‚ü∂ Z) (P : ProjectiveResolution Y) (Q : ProjectiveResolution Z) :
  P.complex ‚ü∂ Q.complex :=
chain_complex.mk_hom _ _ (lift_f_zero f _ _) (lift_f_one f _ _) (lift_f_one_zero_comm f _ _)
  (Œª n ‚ü®g, g', w‚ü©, lift_f_succ P Q n g g' w)
@[simp, reassoc]
lemma lift_commutes
  {Y Z : C} (f : Y ‚ü∂ Z) (P : ProjectiveResolution Y) (Q : ProjectiveResolution Z) :
  lift f P Q ‚â´ Q.œÄ = P.œÄ ‚â´ (chain_complex.single‚ÇÄ C).map f :=
begin
  ext n,
  rcases n with (_|_|n);
  { dsimp [lift, lift_f_zero, lift_f_one], simp, }
end
def lift_homotopy_zero_zero {Y Z : C} {P : ProjectiveResolution Y} {Q : ProjectiveResolution Z}
  (f : P.complex ‚ü∂ Q.complex)
  (comm : f ‚â´ Q.œÄ = 0) : P.complex.X 0 ‚ü∂ Q.complex.X 1 :=
exact.lift (f.f 0) (Q.complex.d 1 0) (Q.œÄ.f 0) Q.exact‚ÇÄ
  (congr_fun (congr_arg homological_complex.hom.f comm) 0)
def lift_homotopy_zero_one {Y Z : C} {P : ProjectiveResolution Y} {Q : ProjectiveResolution Z}
  (f : P.complex ‚ü∂ Q.complex)
  (comm : f ‚â´ Q.œÄ = 0) : P.complex.X 1 ‚ü∂ Q.complex.X 2 :=
exact.lift
  (f.f 1 - P.complex.d 1 0 ‚â´ lift_homotopy_zero_zero f comm) (Q.complex.d 2 1) (Q.complex.d 1 0)
  (Q.exact _) (by simp [lift_homotopy_zero_zero])
def lift_homotopy_zero_succ {Y Z : C} {P : ProjectiveResolution Y} {Q : ProjectiveResolution Z}
  (f : P.complex ‚ü∂ Q.complex) (n : ‚Ñï)
  (g : P.complex.X n ‚ü∂ Q.complex.X (n + 1)) (g' : P.complex.X (n + 1) ‚ü∂ Q.complex.X (n + 2))
  (w : f.f (n + 1) = P.complex.d (n + 1) n ‚â´ g + g' ‚â´ Q.complex.d (n + 2) (n + 1)) :
  P.complex.X (n + 2) ‚ü∂ Q.complex.X (n + 3) :=
exact.lift
  (f.f (n+2) - P.complex.d (n+2) (n+1) ‚â´ g') (Q.complex.d (n+3) (n+2)) (Q.complex.d (n+2) (n+1))
  (Q.exact _) (by simp [w])
def lift_homotopy_zero {Y Z : C} {P : ProjectiveResolution Y} {Q : ProjectiveResolution Z}
  (f : P.complex ‚ü∂ Q.complex)
  (comm : f ‚â´ Q.œÄ = 0) :
  homotopy f 0 :=
homotopy.mk_inductive _ (lift_homotopy_zero_zero f comm) (by simp [lift_homotopy_zero_zero])
  (lift_homotopy_zero_one f comm) (by simp [lift_homotopy_zero_one])
  (Œª n ‚ü®g, g', w‚ü©, ‚ü®lift_homotopy_zero_succ f n g g' w, by simp [lift_homotopy_zero_succ, w]‚ü©)
def lift_homotopy {Y Z : C} (f : Y ‚ü∂ Z) {P : ProjectiveResolution Y} {Q : ProjectiveResolution Z}
  (g h : P.complex ‚ü∂ Q.complex)
  (g_comm : g ‚â´ Q.œÄ = P.œÄ ‚â´ (chain_complex.single‚ÇÄ C).map f)
  (h_comm : h ‚â´ Q.œÄ = P.œÄ ‚â´ (chain_complex.single‚ÇÄ C).map f) :
  homotopy g h :=
homotopy.equiv_sub_zero.inv_fun (lift_homotopy_zero _ (by simp [g_comm, h_comm]))
def lift_id_homotopy (X : C) (P : ProjectiveResolution X) :
  homotopy (lift (ùüô X) P P) (ùüô P.complex) :=
by { apply lift_homotopy (ùüô X); simp, }
def lift_comp_homotopy {X Y Z : C} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z)
  (P : ProjectiveResolution X) (Q : ProjectiveResolution Y) (R : ProjectiveResolution Z) :
  homotopy (lift (f ‚â´ g) P R) (lift f P Q ‚â´ lift g Q R) :=
by { apply lift_homotopy (f ‚â´ g); simp, }
def homotopy_equiv {X : C} (P Q : ProjectiveResolution X) :
  homotopy_equiv P.complex Q.complex :=
{ hom := lift (ùüô X) P Q,
  inv := lift (ùüô X) Q P,
  homotopy_hom_inv_id := begin
    refine (lift_comp_homotopy (ùüô X) (ùüô X) P Q P).symm.trans _,
    simp [category.id_comp],
    apply lift_id_homotopy,
  end,
  homotopy_inv_hom_id := begin
    refine (lift_comp_homotopy (ùüô X) (ùüô X) Q P Q).symm.trans _,
    simp [category.id_comp],
    apply lift_id_homotopy,
  end, }
@[simp, reassoc] lemma homotopy_equiv_hom_œÄ {X : C} (P Q : ProjectiveResolution X) :
  (homotopy_equiv P Q).hom ‚â´ Q.œÄ = P.œÄ :=
by simp [homotopy_equiv]
@[simp, reassoc] lemma homotopy_equiv_inv_œÄ {X : C} (P Q : ProjectiveResolution X) :
  (homotopy_equiv P Q).inv ‚â´ P.œÄ = Q.œÄ :=
by simp [homotopy_equiv]
end ProjectiveResolution
section
variables [has_zero_morphisms C] [has_zero_object C] [has_equalizers C] [has_images C]
abbreviation projective_resolution (Z : C) [has_projective_resolution Z] : chain_complex C ‚Ñï :=
(has_projective_resolution.out Z).some.complex
abbreviation projective_resolution.œÄ (Z : C) [has_projective_resolution Z] :
  projective_resolution Z ‚ü∂ (chain_complex.single‚ÇÄ C).obj Z :=
(has_projective_resolution.out Z).some.œÄ
abbreviation projective_resolution.lift {X Y : C} (f : X ‚ü∂ Y)
  [has_projective_resolution X] [has_projective_resolution Y] :
  projective_resolution X ‚ü∂ projective_resolution Y :=
ProjectiveResolution.lift f _ _
end
variables (C) [preadditive C] [has_zero_object C] [has_equalizers C] [has_images C]
  [has_projective_resolutions C]
def projective_resolutions : C ‚•§ homotopy_category C (complex_shape.down ‚Ñï) :=
{ obj := Œª X, (homotopy_category.quotient _ _).obj (projective_resolution X),
  map := Œª X Y f, (homotopy_category.quotient _ _).map (projective_resolution.lift f),
  map_id' := Œª X, begin
    rw ‚Üê(homotopy_category.quotient _ _).map_id,
    apply homotopy_category.eq_of_homotopy,
    apply ProjectiveResolution.lift_id_homotopy,
  end,
  map_comp' := Œª X Y Z f g, begin
    rw ‚Üê(homotopy_category.quotient _ _).map_comp,
    apply homotopy_category.eq_of_homotopy,
    apply ProjectiveResolution.lift_comp_homotopy,
  end, }
end category_theory
