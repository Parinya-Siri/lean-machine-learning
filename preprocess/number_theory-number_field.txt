import ring_theory.dedekind_domain.integral_closure
import algebra.char_p.algebra
class number_field (K : Type*) [field K] : Prop :=
[to_char_zero : char_zero K]
[to_finite_dimensional : finite_dimensional ℚ K]
open function
open_locale classical big_operators
lemma int.not_is_field : ¬ is_field ℤ :=
λ h, int.not_even_one $ (h.mul_inv_cancel two_ne_zero).imp $ λ a, (by rw ← two_mul; exact eq.symm)
namespace number_field
variables (K L : Type*) [field K] [field L] [nf : number_field K]
include nf
def ring_of_integers := integral_closure ℤ K
localized "notation `𝓞` := number_field.ring_of_integers" in number_field
lemma mem_ring_of_integers (x : K) : x ∈ 𝓞 K ↔ is_integral ℤ x := iff.rfl
def ring_of_integers_algebra [algebra K L] : algebra (𝓞 K) (𝓞 L) := ring_hom.to_algebra
{ to_fun := λ k, ⟨algebra_map K L k, is_integral.algebra_map k.2⟩,
  map_zero' := subtype.ext $ by simp only [subtype.coe_mk, subalgebra.coe_zero, map_zero],
  map_one'  := subtype.ext $ by simp only [subtype.coe_mk, subalgebra.coe_one, map_one],
  map_add' := λ x y, subtype.ext $ by simp only [map_add, subalgebra.coe_add, subtype.coe_mk],
  map_mul' := λ x y, subtype.ext $ by simp only [subalgebra.coe_mul, map_mul, subtype.coe_mk] }
namespace ring_of_integers
variables {K}
instance [number_field K] : is_fraction_ring (𝓞 K) K :=
integral_closure.is_fraction_ring_of_finite_extension ℚ _
instance : is_integral_closure (𝓞 K) ℤ K :=
integral_closure.is_integral_closure _ _
instance [number_field K] : is_integrally_closed (𝓞 K) :=
integral_closure.is_integrally_closed_of_finite_extension ℚ
lemma is_integral_coe (x : 𝓞 K) : is_integral ℤ (x : K) :=
x.2
protected noncomputable def equiv (R : Type*) [comm_ring R] [algebra R K]
  [is_integral_closure R ℤ K] : 𝓞 K ≃+* R :=
(is_integral_closure.equiv ℤ R K _).symm.to_ring_equiv
variables (K)
instance [number_field K] : char_zero (𝓞 K) := char_zero.of_module _ K
lemma not_is_field [number_field K] : ¬ is_field (𝓞 K) :=
begin
  have h_inj : function.injective ⇑(algebra_map ℤ (𝓞 K)),
  { exact ring_hom.injective_int (algebra_map ℤ (𝓞 K)) },
  intro hf,
  exact int.not_is_field
    (((is_integral_closure.is_integral_algebra ℤ K).is_field_iff_is_field h_inj).mpr hf)
end
instance [number_field K] : is_dedekind_domain (𝓞 K) :=
is_integral_closure.is_dedekind_domain ℤ ℚ K _
end ring_of_integers
end number_field
namespace rat
open number_field
local attribute [instance] subsingleton_rat_module
instance rat.number_field : number_field ℚ :=
{ to_char_zero := infer_instance,
  to_finite_dimensional :=
noncomputable def ring_of_integers_equiv : ring_of_integers ℚ ≃+* ℤ :=
ring_of_integers.equiv ℤ
end rat
namespace adjoin_root
section
open_locale polynomial
local attribute [-instance] algebra_rat
local attribute [instance] algebra_rat_subsingleton
instance {f : ℚ[X]} [hf : fact (irreducible f)] : number_field (adjoin_root f) :=
{ to_char_zero := char_zero_of_injective_algebra_map (algebra_map ℚ _).injective,
  to_finite_dimensional := by convert (adjoin_root.power_basis hf.out.ne_zero).finite_dimensional }
end
end adjoin_root
namespace number_field.embeddings
section number_field
open set finite_dimensional polynomial
variables {K L : Type*} [field K] [field L]
variables [number_field K] [number_field L]  (x : K)
variables {A : Type*} [field A] [char_zero A]
noncomputable instance : fintype (K →+* A) := fintype.of_equiv (K →ₐ[ℚ] A)
ring_hom.equiv_rat_alg_hom.symm
variables [is_alg_closed A]
lemma card : fintype.card (K →+* A) = finrank ℚ K :=
by rw [fintype.of_equiv_card ring_hom.equiv_rat_alg_hom.symm, alg_hom.card]
lemma eq_roots : range (λ φ : K →+* A, φ x) = (minpoly ℚ x).root_set A :=
begin
  have hx : is_integral ℚ x := is_separable.is_integral ℚ x,
  ext a, split,
  { rintro ⟨φ, hφ⟩,
    rw [mem_root_set_iff, ←hφ],
    { let ψ := ring_hom.equiv_rat_alg_hom φ,
      show (aeval (ψ x)) (minpoly ℚ x) = 0,
      rw aeval_alg_hom_apply ψ x (minpoly ℚ x),
      simp only [minpoly.aeval, map_zero], },
    exact minpoly.ne_zero hx, },
  { intro ha,
    let Qx := adjoin_root (minpoly ℚ x),
    haveI : fact (irreducible $ minpoly ℚ x) := ⟨minpoly.irreducible hx⟩,
    have hK : (aeval x) (minpoly ℚ x) = 0 := minpoly.aeval _ _,
    have hA : (aeval a) (minpoly ℚ x) = 0,
    { rwa [aeval_def, ←eval_map, ←mem_root_set_iff'],
      exact ((minpoly.monic hx).map $ algebra_map ℚ A).ne_zero, },
    let ψ : Qx →+* A := adjoin_root.lift (algebra_map ℚ A) a hA,
    letI : algebra Qx A := ring_hom.to_algebra ψ,
    letI : algebra Qx K := ring_hom.to_algebra (adjoin_root.lift (algebra_map ℚ K) x hK),
    let φ₀ : K →ₐ[Qx] A := is_alg_closed.lift _,
    swap,
    { refine algebra.is_algebraic_of_larger_base ℚ Qx _,
      exact number_field.is_algebraic _, },
    let φ := φ₀.to_ring_hom,
    use φ,
    rw (_ : x = (algebra_map Qx K) (adjoin_root.root (minpoly ℚ x))),
    { rw (_ : a = ψ (adjoin_root.root (minpoly ℚ x))),
      refine alg_hom.commutes _ _,
      exact (adjoin_root.lift_root hA).symm, },
    exact (adjoin_root.lift_root hK).symm, },
end
end number_field
end number_field.embeddings
