import tactic.core
universes u v
class has_variable_names (α : Sort u) : Type :=
(names : list name)
(names_nonempty : 0 < names.length . tactic.exact_dec_trivial)
namespace tactic
meta def typical_variable_names (t : expr) : tactic (list name) :=
(do
  names ← to_expr ``(has_variable_names.names %%t),
  eval_expr (list name) names)
<|> fail! "typical_variable_names: unable to get typical variable names for type {t}"
end tactic
namespace has_variable_names
def make_listlike_instance (α : Sort u) [has_variable_names α]
  {β : Sort v} : has_variable_names β :=
⟨ (names α).map $ λ n, n.append_suffix "s",
  by simp [names_nonempty] ⟩
def make_inheriting_instance (α : Sort u) [has_variable_names α]
  {β : Sort v} : has_variable_names β :=
⟨names α, names_nonempty⟩
end has_variable_names
open has_variable_names
instance {n α} [has_variable_names α] : has_variable_names (d_array n (λ _, α)) :=
make_listlike_instance α
instance : has_variable_names bool :=
⟨[`b]⟩
instance : has_variable_names char :=
⟨[`c]⟩
instance {n} : has_variable_names (fin n):=
⟨[`n, `m, `o]⟩
instance : has_variable_names ℤ :=
⟨[`n, `m, `o]⟩
instance {α} [has_variable_names α] : has_variable_names (list α) :=
make_listlike_instance α
instance : has_variable_names ℕ :=
⟨[`n, `m, `o]⟩
instance Prop.has_variable_names : has_variable_names Prop :=
⟨[`P, `Q, `R]⟩
instance {α} [has_variable_names α] : has_variable_names (thunk α) :=
make_inheriting_instance α
instance {α β} : has_variable_names (prod α β) :=
⟨[`p]⟩
instance {α β} : has_variable_names (pprod α β) :=
⟨[`p]⟩
instance {α} {β : α → Type*} : has_variable_names (sigma β) :=
⟨[`p]⟩
instance {α} {β : α → Sort*} : has_variable_names (psigma β) :=
⟨[`p]⟩
instance {α} [has_variable_names α] {p : α → Prop} : has_variable_names (subtype p) :=
make_inheriting_instance α
instance {α} [has_variable_names α] : has_variable_names (option α) :=
make_inheriting_instance α
instance {α} : has_variable_names (bin_tree α) :=
⟨[`t]⟩
instance {α} [has_variable_names α] {lt : α → α → Prop} :
  has_variable_names (rbtree α lt) :=
make_listlike_instance α
meta instance {α} [has_variable_names α] : has_variable_names (native.rb_set α) :=
make_listlike_instance α
instance {α} [has_variable_names α] : has_variable_names (set α) :=
make_listlike_instance α
instance : has_variable_names string :=
⟨[`s]⟩
instance : has_variable_names unsigned :=
⟨[`n, `m, `o]⟩
instance {α} {β : α → Sort*} : has_variable_names (Π a : α, β a) :=
⟨[`f, `g, `h]⟩
instance : has_variable_names name :=
⟨[`n]⟩
meta instance {α} : has_variable_names (tactic α) :=
⟨[`t]⟩
meta instance : has_variable_names expr :=
⟨[`e]⟩
meta instance : has_variable_names pexpr :=
⟨[`e]⟩
meta instance : has_variable_names level :=
⟨[`u, `v, `w]⟩
instance : has_variable_names binder_info :=
⟨[`bi]⟩
