import topology.algebra.ring
import topology.algebra.group_with_zero
namespace topological_ring
open topological_space function
variables (R : Type*) [semiring R]
variables  [topological_space R]
def topological_space_units : topological_space RÀ£ := induced (coe : RÀ£ ‚Üí R) ‚Äπ_‚Ä∫
class induced_units [t : topological_space $ RÀ£] : Prop :=
(top_eq : t = induced (coe : RÀ£ ‚Üí R) ‚Äπ_‚Ä∫)
variables [topological_space $ RÀ£]
lemma units_topology_eq [induced_units R] :
  ‚Äπtopological_space RÀ£‚Ä∫ = induced (coe : RÀ£ ‚Üí R) ‚Äπ_‚Ä∫ :=
induced_units.top_eq
lemma induced_units.continuous_coe [induced_units R] : continuous (coe : RÀ£ ‚Üí R) :=
(units_topology_eq R).symm ‚ñ∏ continuous_induced_dom
lemma units_embedding [induced_units R] :
  embedding (coe : RÀ£ ‚Üí R) :=
{ induced := units_topology_eq R,
  inj := Œª x y h, units.ext h }
instance top_monoid_units [topological_semiring R] [induced_units R] :
  has_continuous_mul RÀ£ :=
‚ü®begin
  let mulR := (Œª (p : R √ó R), p.1*p.2),
  let mulRx := (Œª (p : RÀ£ √ó RÀ£), p.1*p.2),
  have key : coe ‚àò mulRx = mulR ‚àò (Œª p, (p.1.val, p.2.val)), from rfl,
  rw [continuous_iff_le_induced, units_topology_eq R, prod_induced_induced,
      induced_compose, key, ‚Üê induced_compose],
  apply induced_mono,
  rw ‚Üê continuous_iff_le_induced,
  exact continuous_mul,
end‚ü©
end topological_ring
variables (K : Type*) [division_ring K] [topological_space K]
class topological_division_ring extends topological_ring K, has_continuous_inv‚ÇÄ K : Prop
namespace topological_division_ring
open filter set
local attribute [instance] topological_ring.topological_space_units
@[priority 100] instance induced_units : topological_ring.induced_units K := ‚ü®rfl‚ü©
variables [topological_division_ring K]
lemma units_top_group : topological_group KÀ£ :=
{ continuous_inv := begin
     have : (coe : KÀ£ ‚Üí K) ‚àò (Œª x, x‚Åª¬π : KÀ£ ‚Üí KÀ£) =
            (Œª x, x‚Åª¬π : K ‚Üí K) ‚àò (coe : KÀ£ ‚Üí K), from funext units.coe_inv,
     rw continuous_iff_continuous_at,
     intros x,
     rw [continuous_at, nhds_induced, nhds_induced, tendsto_iff_comap, comap_comm this],
     apply comap_mono,
     rw [‚Üê tendsto_iff_comap, units.coe_inv],
     exact continuous_at_inv‚ÇÄ x.ne_zero
   end ,
  ..topological_ring.top_monoid_units K}
local attribute [instance] units_top_group
lemma continuous_units_inv : continuous (Œª x : KÀ£, (‚Üë(x‚Åª¬π) : K)) :=
(topological_ring.induced_units.continuous_coe K).comp continuous_inv
end topological_division_ring
section affine_homeomorph
variables {ùïú : Type*} [field ùïú] [topological_space ùïú] [topological_ring ùïú]
@[simps]
def affine_homeomorph (a b : ùïú) (h : a ‚â† 0) : ùïú ‚âÉ‚Çú ùïú :=
{ to_fun := Œª x, a * x + b,
  inv_fun := Œª y, (y - b) / a,
  left_inv := Œª x, by { simp only [add_sub_cancel], exact mul_div_cancel_left x h, },
  right_inv := Œª y, by { simp [mul_div_cancel' _ h], }, }
end affine_homeomorph
