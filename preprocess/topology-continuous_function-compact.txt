import topology.continuous_function.bounded
import topology.uniform_space.compact_separated
import topology.compact_open
import topology.sets.compacts
noncomputable theory
open_locale topological_space classical nnreal bounded_continuous_function big_operators
open set filter metric
open bounded_continuous_function
namespace continuous_map
variables {Œ± Œ≤ E : Type*} [topological_space Œ±] [compact_space Œ±] [metric_space Œ≤] [normed_group E]
section
variables (Œ± Œ≤)
@[simps { fully_applied := ff }]
def equiv_bounded_of_compact : C(Œ±, Œ≤) ‚âÉ (Œ± ‚Üí·µá Œ≤) :=
‚ü®mk_of_compact, bounded_continuous_function.to_continuous_map,
 Œª f, by { ext, refl, }, Œª f, by { ext, refl, }‚ü©
lemma uniform_inducing_equiv_bounded_of_compact :
  uniform_inducing (equiv_bounded_of_compact Œ± Œ≤) :=
uniform_inducing.mk'
begin
  simp only [has_basis_compact_convergence_uniformity.mem_iff, uniformity_basis_dist_le.mem_iff],
  exact Œª s, ‚ü®Œª ‚ü®‚ü®a, b‚ü©, ‚ü®ha, ‚ü®Œµ, hŒµ, hb‚ü©‚ü©, hs‚ü©, ‚ü®{p | ‚àÄ x, (p.1 x, p.2 x) ‚àà b},
    ‚ü®Œµ, hŒµ, Œª _ h x, hb (by exact (dist_le hŒµ.le).mp h x)‚ü©, Œª f g h, hs (by exact Œª x hx, h x)‚ü©,
    Œª ‚ü®t, ‚ü®Œµ, hŒµ, ht‚ü©, hs‚ü©, ‚ü®‚ü®set.univ, {p | dist p.1 p.2 ‚â§ Œµ}‚ü©, ‚ü®compact_univ, ‚ü®Œµ, hŒµ, Œª _ h, h‚ü©‚ü©,
    Œª ‚ü®f, g‚ü© h, hs _ _ (ht (by exact (dist_le hŒµ.le).mpr (Œª x, h x (mem_univ x))))‚ü©‚ü©,
end
lemma uniform_embedding_equiv_bounded_of_compact :
  uniform_embedding (equiv_bounded_of_compact Œ± Œ≤) :=
{ inj := (equiv_bounded_of_compact Œ± Œ≤).injective,
  .. uniform_inducing_equiv_bounded_of_compact Œ± Œ≤ }
@[simps apply symm_apply { fully_applied := ff }]
def add_equiv_bounded_of_compact [add_monoid Œ≤] [has_lipschitz_add Œ≤] :
  C(Œ±, Œ≤) ‚âÉ+ (Œ± ‚Üí·µá Œ≤) :=
({ .. to_continuous_map_add_hom Œ± Œ≤,
   .. (equiv_bounded_of_compact Œ± Œ≤).symm, } : (Œ± ‚Üí·µá Œ≤) ‚âÉ+ C(Œ±, Œ≤)).symm
instance : metric_space C(Œ±, Œ≤) :=
(uniform_embedding_equiv_bounded_of_compact Œ± Œ≤).comap_metric_space _
@[simps to_equiv apply symm_apply { fully_applied := ff }]
def isometric_bounded_of_compact :
  C(Œ±, Œ≤) ‚âÉ·µ¢ (Œ± ‚Üí·µá Œ≤) :=
{ isometry_to_fun := Œª x y, rfl,
  to_equiv := equiv_bounded_of_compact Œ± Œ≤ }
end
@[simp] lemma _root_.bounded_continuous_function.dist_mk_of_compact (f g : C(Œ±, Œ≤)) :
  dist (mk_of_compact f) (mk_of_compact g) = dist f g := rfl
@[simp] lemma _root_.bounded_continuous_function.dist_to_continuous_map (f g : Œ± ‚Üí·µá Œ≤) :
  dist (f.to_continuous_map) (g.to_continuous_map) = dist f g := rfl
open bounded_continuous_function
section
variables {Œ± Œ≤} {f g : C(Œ±, Œ≤)} {C : ‚Ñù}
lemma dist_apply_le_dist (x : Œ±) : dist (f x) (g x) ‚â§ dist f g :=
by simp only [‚Üê dist_mk_of_compact, dist_coe_le_dist, ‚Üê mk_of_compact_apply]
lemma dist_le (C0 : (0 : ‚Ñù) ‚â§ C) : dist f g ‚â§ C ‚Üî ‚àÄx:Œ±, dist (f x) (g x) ‚â§ C :=
by simp only [‚Üê dist_mk_of_compact, dist_le C0, mk_of_compact_apply]
lemma dist_le_iff_of_nonempty [nonempty Œ±] :
  dist f g ‚â§ C ‚Üî ‚àÄ x, dist (f x) (g x) ‚â§ C :=
by simp only [‚Üê dist_mk_of_compact, dist_le_iff_of_nonempty, mk_of_compact_apply]
lemma dist_lt_iff_of_nonempty [nonempty Œ±] :
  dist f g < C ‚Üî ‚àÄx:Œ±, dist (f x) (g x) < C :=
by simp only [‚Üê dist_mk_of_compact, dist_lt_iff_of_nonempty_compact, mk_of_compact_apply]
lemma dist_lt_of_nonempty [nonempty Œ±] (w : ‚àÄx:Œ±, dist (f x) (g x) < C) : dist f g < C :=
(dist_lt_iff_of_nonempty).2 w
lemma dist_lt_iff (C0 : (0 : ‚Ñù) < C) :
  dist f g < C ‚Üî ‚àÄx:Œ±, dist (f x) (g x) < C :=
by simp only [‚Üê dist_mk_of_compact, dist_lt_iff_of_compact C0, mk_of_compact_apply]
end
instance [complete_space Œ≤] : complete_space (C(Œ±, Œ≤)) :=
(isometric_bounded_of_compact Œ± Œ≤).complete_space
@[continuity] lemma continuous_eval : continuous (Œª p : C(Œ±, Œ≤) √ó Œ±, p.1 p.2) :=
continuous_eval.comp ((isometric_bounded_of_compact Œ± Œ≤).continuous.prod_map continuous_id)
@[continuity] lemma continuous_eval_const (x : Œ±) : continuous (Œª f : C(Œ±, Œ≤), f x) :=
continuous_eval.comp (continuous_id.prod_mk continuous_const)
lemma continuous_coe : @continuous (C(Œ±, Œ≤)) (Œ± ‚Üí Œ≤) _ _ coe_fn :=
continuous_pi continuous_eval_const
lemma dist_le_two_norm (x y : Œ±) : dist (f x) (f y) ‚â§ 2 * ‚à•f‚à• :=
(mk_of_compact f).dist_le_two_norm x y
lemma norm_le {C : ‚Ñù} (C0 : (0 : ‚Ñù) ‚â§ C) : ‚à•f‚à• ‚â§ C ‚Üî ‚àÄx:Œ±, ‚à•f x‚à• ‚â§ C :=
@bounded_continuous_function.norm_le _ _ _ _
  (mk_of_compact f) _ C0
lemma norm_le_of_nonempty [nonempty Œ±] {M : ‚Ñù} : ‚à•f‚à• ‚â§ M ‚Üî ‚àÄ x, ‚à•f x‚à• ‚â§ M :=
@bounded_continuous_function.norm_le_of_nonempty _ _ _ _ _ (mk_of_compact f) _
lemma norm_lt_iff {M : ‚Ñù} (M0 : 0 < M) : ‚à•f‚à• < M ‚Üî ‚àÄ x, ‚à•f x‚à• < M :=
@bounded_continuous_function.norm_lt_iff_of_compact _ _ _ _ _ (mk_of_compact f) _ M0
lemma norm_lt_iff_of_nonempty [nonempty Œ±] {M : ‚Ñù} :
  ‚à•f‚à• < M ‚Üî ‚àÄ x, ‚à•f x‚à• < M :=
@bounded_continuous_function.norm_lt_iff_of_nonempty_compact _ _ _ _ _ _ (mk_of_compact f) _
lemma apply_le_norm (f : C(Œ±, ‚Ñù)) (x : Œ±) : f x ‚â§ ‚à•f‚à• :=
le_trans (le_abs.mpr (or.inl (le_refl (f x)))) (f.norm_coe_le_norm x)
lemma neg_norm_le_apply (f : C(Œ±, ‚Ñù)) (x : Œ±) : -‚à•f‚à• ‚â§ f x :=
le_trans (neg_le_neg (f.norm_coe_le_norm x)) (neg_le.mp (neg_le_abs_self (f x)))
lemma norm_eq_supr_norm : ‚à•f‚à• = ‚®Ü x : Œ±, ‚à•f x‚à• :=
(mk_of_compact f).norm_eq_supr_norm
end
section
variables {R : Type*} [normed_ring R]
instance : normed_ring C(Œ±,R) :=
{ norm_mul := Œª f g, norm_mul_le (mk_of_compact f) (mk_of_compact g),
  ..(infer_instance : normed_group C(Œ±,R)),
  .. continuous_map.ring }
end
section
variables {ùïú : Type*} [normed_field ùïú] [normed_space ùïú E]
instance : normed_space ùïú C(Œ±,E) :=
{ norm_smul_le := Œª c f, le_of_eq (norm_smul c (mk_of_compact f)) }
section
variables (Œ± ùïú E)
def linear_isometry_bounded_of_compact :
  C(Œ±, E) ‚âÉ‚Çó·µ¢[ùïú] (Œ± ‚Üí·µá E) :=
{ map_smul' := Œª c f, by { ext, simp, },
  norm_map' := Œª f, rfl,
  .. add_equiv_bounded_of_compact Œ± E }
end
lemma uniform_continuity
  (f : C(Œ±, Œ≤)) (Œµ : ‚Ñù) (h : 0 < Œµ) :
  ‚àÉ Œ¥ > 0, ‚àÄ {x y}, dist x y < Œ¥ ‚Üí dist (f x) (f y) < Œµ :=
metric.uniform_continuous_iff.mp
  (compact_space.uniform_continuous_of_continuous f.continuous) Œµ h
protected def continuous_linear_map.comp_left_continuous_compact (g : Œ≤ ‚ÜíL[ùïú] Œ≥) :
  C(X, Œ≤) ‚ÜíL[ùïú] C(X, Œ≥) :=
(linear_isometry_bounded_of_compact X Œ≥ ùïú).symm.to_linear_isometry.to_continuous_linear_map.comp $
(g.comp_left_continuous_bounded X).comp $
(linear_isometry_bounded_of_compact X Œ≤ ùïú).to_linear_isometry.to_continuous_linear_map
@[simp] lemma continuous_linear_map.to_linear_comp_left_continuous_compact (g : Œ≤ ‚ÜíL[ùïú] Œ≥) :
  (g.comp_left_continuous_compact X : C(X, Œ≤) ‚Üí‚Çó[ùïú] C(X, Œ≥)) = g.comp_left_continuous ùïú X :=
by { ext f, refl }
@[simp] lemma continuous_linear_map.comp_left_continuous_compact_apply (g : Œ≤ ‚ÜíL[ùïú] Œ≥)
  (f : C(X, Œ≤)) (x : X) :
  g.comp_left_continuous_compact X f x = g (f x) :=
rfl
end comp_left
namespace continuous_map
section comp_right
def comp_right_continuous_map {X Y : Type*} (T : Type*)
  [topological_space X] [compact_space X] [topological_space Y] [compact_space Y] [normed_group T]
  (f : C(X, Y)) : C(C(Y, T), C(X, T)) :=
{ to_fun := Œª g, g.comp f,
  continuous_to_fun :=
  begin
    refine metric.continuous_iff.mpr _,
    intros g Œµ Œµ_pos,
    refine ‚ü®Œµ, Œµ_pos, Œª g' h, _‚ü©,
    rw continuous_map.dist_lt_iff Œµ_pos at h ‚ä¢,
    { exact Œª x, h (f x), },
  end }
@[simp] lemma comp_right_continuous_map_apply {X Y : Type*} (T : Type*)
  [topological_space X] [compact_space X] [topological_space Y] [compact_space Y] [normed_group T]
  (f : C(X, Y)) (g : C(Y, T)) :
  (comp_right_continuous_map T f) g = g.comp f :=
rfl
def comp_right_homeomorph {X Y : Type*} (T : Type*)
  [topological_space X] [compact_space X] [topological_space Y] [compact_space Y] [normed_group T]
  (f : X ‚âÉ‚Çú Y) : C(Y, T) ‚âÉ‚Çú C(X, T) :=
{ to_fun := comp_right_continuous_map T f.to_continuous_map,
  inv_fun := comp_right_continuous_map T f.symm.to_continuous_map,
  left_inv := by tidy,
  right_inv := by tidy, }
def comp_right_alg_hom {X Y : Type*} (R : Type*)
  [topological_space X] [topological_space Y] [normed_comm_ring R] (f : C(X, Y)) :
  C(Y, R) ‚Üí‚Çê[R] C(X, R) :=
{ to_fun := Œª g, g.comp f,
  map_zero' := by { ext, simp, },
  map_add' := Œª g‚ÇÅ g‚ÇÇ, by { ext, simp, },
  map_one' := by { ext, simp, },
  map_mul' := Œª g‚ÇÅ g‚ÇÇ, by { ext, simp, },
  commutes' := Œª r, by { ext, simp, }, }
@[simp] lemma comp_right_alg_hom_apply {X Y : Type*} (R : Type*)
  [topological_space X] [topological_space Y] [normed_comm_ring R] (f : C(X, Y)) (g : C(Y, R)) :
  (comp_right_alg_hom R f) g = g.comp f :=
rfl
lemma comp_right_alg_hom_continuous {X Y : Type*} (R : Type*)
  [topological_space X] [compact_space X] [topological_space Y] [compact_space Y]
  [normed_comm_ring R] (f : C(X, Y)) :
  continuous (comp_right_alg_hom R f) :=
begin
  change continuous (comp_right_continuous_map R f),
  continuity,
end
end comp_right
section weierstrass
open topological_space
variables {X : Type*} [topological_space X] [t2_space X] [locally_compact_space X]
variables {E : Type*} [normed_group E] [complete_space E]
lemma summable_of_locally_summable_norm {Œπ : Type*} {F : Œπ ‚Üí C(X, E)}
  (hF : ‚àÄ K : compacts X, summable (Œª i, ‚à•(F i).restrict K‚à•)) :
  summable F :=
begin
  refine (continuous_map.exists_tendsto_compact_open_iff_forall _).2 (Œª K hK, _),
  lift K to compacts X using hK,
  have A : ‚àÄ s : finset Œπ, restrict ‚ÜëK (‚àë i in s, F i) = ‚àë i in s, restrict K (F i),
  { intro s, ext1 x, simp },
  simpa only [has_sum, A] using summable_of_summable_norm (hF K)
end
end weierstrass
section normed_space
variables {Œ± : Type*} {Œ≤ : Type*}
variables [topological_space Œ±] [normed_group Œ≤] [star_add_monoid Œ≤] [normed_star_group Œ≤]
lemma _root_.bounded_continuous_function.mk_of_compact_star [compact_space Œ±] (f : C(Œ±, Œ≤)) :
  mk_of_compact (star f) = star (mk_of_compact f) := rfl
instance [compact_space Œ±] : normed_star_group C(Œ±, Œ≤) :=
{ norm_star := Œª f, by rw [‚Üêbounded_continuous_function.norm_mk_of_compact,
                          bounded_continuous_function.mk_of_compact_star, norm_star,
                          bounded_continuous_function.norm_mk_of_compact] }
end normed_space
section cstar_ring
variables {Œ± : Type*} {Œ≤ : Type*}
variables [topological_space Œ±] [normed_ring Œ≤] [star_ring Œ≤]
instance [compact_space Œ±] [cstar_ring Œ≤] : cstar_ring C(Œ±, Œ≤) :=
{ norm_star_mul_self :=
  begin
    intros f,
    refine le_antisymm _ _,
    { rw [‚Üêsq, continuous_map.norm_le _ (sq_nonneg _)],
      intro x,
      simp only [continuous_map.coe_mul, coe_star, pi.mul_apply, pi.star_apply,
                 cstar_ring.norm_star_mul_self, ‚Üêsq],
      refine sq_le_sq' _ _,
      { linarith [norm_nonneg (f x), norm_nonneg f] },
      { exact continuous_map.norm_coe_le_norm f x }, },
    { rw [‚Üêsq, ‚Üêreal.le_sqrt (norm_nonneg _) (norm_nonneg _),
          continuous_map.norm_le _ (real.sqrt_nonneg _)],
      intro x,
      rw [real.le_sqrt (norm_nonneg _) (norm_nonneg _), sq, ‚Üêcstar_ring.norm_star_mul_self],
      exact continuous_map.norm_coe_le_norm (star f * f) x },
  end }
end cstar_ring
end continuous_map
