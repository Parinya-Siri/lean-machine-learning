import category_theory.limits.shapes.products
import category_theory.limits.shapes.images
import category_theory.isomorphism_classes
import category_theory.limits.shapes.zero_objects
noncomputable theory
universes v u
universes v' u'
open category_theory
open category_theory.category
open_locale classical
namespace category_theory.limits
variables (C : Type u) [category.{v} C]
variables (D : Type u') [category.{v'} D]
class has_zero_morphisms :=
[has_zero : Œ† X Y : C, has_zero (X ‚ü∂ Y)]
(comp_zero' : ‚àÄ {X Y : C} (f : X ‚ü∂ Y) (Z : C), f ‚â´ (0 : Y ‚ü∂ Z) = (0 : X ‚ü∂ Z) . obviously)
(zero_comp' : ‚àÄ (X : C) {Y Z : C} (f : Y ‚ü∂ Z), (0 : X ‚ü∂ Y) ‚â´ f = (0 : X ‚ü∂ Z) . obviously)
attribute [instance] has_zero_morphisms.has_zero
restate_axiom has_zero_morphisms.comp_zero'
restate_axiom has_zero_morphisms.zero_comp'
variables {C}
@[simp] lemma comp_zero [has_zero_morphisms C] {X Y : C} {f : X ‚ü∂ Y} {Z : C} :
  f ‚â´ (0 : Y ‚ü∂ Z) = (0 : X ‚ü∂ Z) := has_zero_morphisms.comp_zero f Z
@[simp] lemma zero_comp [has_zero_morphisms C] {X : C} {Y Z : C} {f : Y ‚ü∂ Z} :
  (0 : X ‚ü∂ Y) ‚â´ f = (0 : X ‚ü∂ Z) := has_zero_morphisms.zero_comp X f
instance has_zero_morphisms_pempty : has_zero_morphisms (discrete pempty) :=
{ has_zero := by tidy }
instance has_zero_morphisms_punit : has_zero_morphisms (discrete punit) :=
{ has_zero := by tidy }
namespace has_zero_morphisms
variables {C}
private lemma ext_aux (I J : has_zero_morphisms C)
  (w : ‚àÄ X Y : C, (@has_zero_morphisms.has_zero _ _ I X Y).zero =
    (@has_zero_morphisms.has_zero _ _ J X Y).zero) : I = J :=
begin
  casesI I, casesI J,
  congr,
  { ext X Y,
    exact w X Y },
  { apply proof_irrel_heq, },
  { apply proof_irrel_heq, }
end
lemma ext (I J : has_zero_morphisms C) : I = J :=
begin
  apply ext_aux,
  intros X Y,
  rw ‚Üê@has_zero_morphisms.comp_zero _ _ I X X (@has_zero_morphisms.has_zero _ _ J X X).zero,
  rw @has_zero_morphisms.zero_comp _ _ J,
end
instance : subsingleton (has_zero_morphisms C) :=
‚ü®ext‚ü©
end has_zero_morphisms
open opposite has_zero_morphisms
instance has_zero_morphisms_opposite [has_zero_morphisms C] :
  has_zero_morphisms C·µí·µñ :=
{ has_zero := Œª X Y, ‚ü®(0 : unop Y ‚ü∂ unop X).op‚ü©,
  comp_zero' := Œª X Y f Z, congr_arg quiver.hom.op (has_zero_morphisms.zero_comp (unop Z) f.unop),
  zero_comp' := Œª X Y Z f, congr_arg quiver.hom.op (has_zero_morphisms.comp_zero f.unop (unop X)), }
section
variables {C} [has_zero_morphisms C]
lemma zero_of_comp_mono {X Y Z : C} {f : X ‚ü∂ Y} (g : Y ‚ü∂ Z) [mono g] (h : f ‚â´ g = 0) : f = 0 :=
by { rw [‚Üêzero_comp, cancel_mono] at h, exact h }
lemma zero_of_epi_comp {X Y Z : C} (f : X ‚ü∂ Y) {g : Y ‚ü∂ Z} [epi f] (h : f ‚â´ g = 0) : g = 0 :=
by { rw [‚Üêcomp_zero, cancel_epi] at h, exact h }
lemma eq_zero_of_image_eq_zero {X Y : C} {f : X ‚ü∂ Y} [has_image f] (w : image.Œπ f = 0) : f = 0 :=
by rw [‚Üêimage.fac f, w, has_zero_morphisms.comp_zero]
lemma nonzero_image_of_nonzero {X Y : C} {f : X ‚ü∂ Y} [has_image f] (w : f ‚â† 0) : image.Œπ f ‚â† 0 :=
Œª h, w (eq_zero_of_image_eq_zero h)
end
section
variables [has_zero_morphisms D]
instance : has_zero_morphisms (C ‚•§ D) :=
{ has_zero := Œª F G, ‚ü®{ app := Œª X, 0, }‚ü© }
@[simp] lemma zero_app (F G : C ‚•§ D) (j : C) : (0 : F ‚ü∂ G).app j = 0 := rfl
end
namespace is_zero
variables [has_zero_morphisms C]
lemma eq_zero_of_src {X Y : C} (o : is_zero X) (f : X ‚ü∂ Y) : f = 0 :=
o.eq_of_src _ _
lemma eq_zero_of_tgt {X Y : C} (o : is_zero Y) (f : X ‚ü∂ Y) : f = 0 :=
o.eq_of_tgt _ _
lemma iff_id_eq_zero (X : C) : is_zero X ‚Üî (ùüô X = 0) :=
‚ü®Œª h, h.eq_of_src _ _,
 Œª h, ‚ü®
  Œª Y, ‚ü®‚ü®‚ü®0‚ü©, Œª f, by { rw [‚Üêid_comp f, ‚Üêid_comp default, h, zero_comp, zero_comp], }‚ü©‚ü©,
  Œª Y, ‚ü®‚ü®‚ü®0‚ü©, Œª f, by { rw [‚Üêcomp_id f, ‚Üêcomp_id default, h, comp_zero, comp_zero], }‚ü©‚ü©‚ü©‚ü©
lemma of_mono_zero (X Y : C) [mono (0 : X ‚ü∂ Y)] : is_zero X :=
(iff_id_eq_zero X).mpr ((cancel_mono (0 : X ‚ü∂ Y)).1 (by simp))
lemma of_epi_zero (X Y : C) [epi (0 : X ‚ü∂ Y)] : is_zero Y :=
(iff_id_eq_zero Y).mpr ((cancel_epi (0 : X ‚ü∂ Y)).1 (by simp))
lemma of_mono_eq_zero {X Y : C} (f : X ‚ü∂ Y) [mono f] (h : f = 0) : is_zero X :=
by { unfreezingI { subst h, }, apply of_mono_zero X Y, }
lemma of_epi_eq_zero {X Y : C} (f : X ‚ü∂ Y) [epi f] (h : f = 0) : is_zero Y :=
by { unfreezingI { subst h, }, apply of_epi_zero X Y, }
lemma iff_split_mono_eq_zero {X Y : C} (f : X ‚ü∂ Y) [split_mono f] : is_zero X ‚Üî f = 0 :=
begin
  rw iff_id_eq_zero,
  split,
  { intro h, rw [‚Üêcategory.id_comp f, h, zero_comp], },
  { intro h, rw [‚Üêsplit_mono.id f], simp [h], },
end
lemma iff_split_epi_eq_zero {X Y : C} (f : X ‚ü∂ Y) [split_epi f] : is_zero Y ‚Üî f = 0 :=
begin
  rw iff_id_eq_zero,
  split,
  { intro h, rw [‚Üêcategory.comp_id f, h, comp_zero], },
  { intro h, rw [‚Üêsplit_epi.id f], simp [h], },
end
lemma of_mono {X Y : C} (f : X ‚ü∂ Y) [mono f] (i : is_zero Y) : is_zero X :=
begin
  unfreezingI { have hf := i.eq_zero_of_tgt f, subst hf, },
  exact is_zero.of_mono_zero X Y,
end
lemma of_epi {X Y : C} (f : X ‚ü∂ Y) [epi f] (i : is_zero X) : is_zero Y :=
begin
  unfreezingI { have hf := i.eq_zero_of_src f, subst hf, },
  exact is_zero.of_epi_zero X Y,
end
end is_zero
def is_zero.has_zero_morphisms {O : C} (hO : is_zero O) : has_zero_morphisms C :=
{ has_zero := Œª X Y,
  { zero := hO.from X ‚â´ hO.to Y },
  zero_comp' := Œª X Y Z f, by { rw category.assoc, congr, apply hO.eq_of_src, },
  comp_zero' := Œª X Y Z f, by { rw ‚Üêcategory.assoc, congr, apply hO.eq_of_tgt, }}
namespace has_zero_object
variables [has_zero_object C]
open_locale zero_object
def zero_morphisms_of_zero_object : has_zero_morphisms C :=
{ has_zero := Œª X Y,
  { zero := (default : X ‚ü∂ 0) ‚â´ default },
  zero_comp' := Œª X Y Z f, by { dunfold has_zero.zero, rw category.assoc, congr, },
  comp_zero' := Œª X Y Z f, by { dunfold has_zero.zero, rw ‚Üêcategory.assoc, congr, }}
section has_zero_morphisms
variables [has_zero_morphisms C]
@[simp] lemma zero_iso_is_initial_hom {X : C} (t : is_initial X) :
  (zero_iso_is_initial t).hom = 0 :=
by ext
@[simp] lemma zero_iso_is_initial_inv {X : C} (t : is_initial X) :
  (zero_iso_is_initial t).inv = 0 :=
by ext
@[simp] lemma zero_iso_is_terminal_hom {X : C} (t : is_terminal X) :
  (zero_iso_is_terminal t).hom = 0 :=
by ext
@[simp] lemma zero_iso_is_terminal_inv {X : C} (t : is_terminal X) :
  (zero_iso_is_terminal t).inv = 0 :=
by ext
@[simp] lemma zero_iso_initial_hom [has_initial C] : zero_iso_initial.hom = (0 : 0 ‚ü∂ ‚ä•_ C) :=
by ext
@[simp] lemma zero_iso_initial_inv [has_initial C] : zero_iso_initial.inv = (0 : ‚ä•_ C ‚ü∂ 0) :=
by ext
@[simp] lemma zero_iso_terminal_hom [has_terminal C] : zero_iso_terminal.hom = (0 : 0 ‚ü∂ ‚ä§_ C) :=
by ext
@[simp] lemma zero_iso_terminal_inv [has_terminal C] : zero_iso_terminal.inv = (0 : ‚ä§_ C ‚ü∂ 0) :=
by ext
end has_zero_morphisms
open_locale zero_object
instance {B : Type*} [category B] : has_zero_object (B ‚•§ C) :=
(((category_theory.functor.const B).obj (0 : C)).is_zero $ Œª X, is_zero_zero _).has_zero_object
end has_zero_object
open_locale zero_object
variables {D}
@[simp] lemma is_zero.map [has_zero_object D] [has_zero_morphisms D] {F : C ‚•§ D} (hF : is_zero F)
  {X Y : C} (f : X ‚ü∂ Y) : F.map f = 0 :=
(hF.obj _).eq_of_src _ _
@[simp] lemma _root_.category_theory.functor.zero_obj [has_zero_object D]
  (X : C) : is_zero ((0 : C ‚•§ D).obj X) :=
(is_zero_zero _).obj _
@[simp] lemma _root_.category_theory.zero_map [has_zero_object D] [has_zero_morphisms D]
  {X Y : C} (f : X ‚ü∂ Y) : (0 : C ‚•§ D).map f = 0 :=
(is_zero_zero _).map _
section
variables [has_zero_object C] [has_zero_morphisms C]
open_locale zero_object
@[simp]
lemma id_zero : ùüô (0 : C) = (0 : 0 ‚ü∂ 0) :=
by ext
lemma zero_of_from_zero {X : C} (f : 0 ‚ü∂ X) : f = 0 :=
by ext
lemma zero_of_source_iso_zero {X Y : C} (f : X ‚ü∂ Y) (i : X ‚âÖ 0) : f = 0 :=
begin
  have h : f = i.hom ‚â´ ùüô 0 ‚â´ i.inv ‚â´ f := by simp only [iso.hom_inv_id_assoc, id_comp, comp_id],
  simpa using h,
end
lemma zero_of_source_iso_zero' {X Y : C} (f : X ‚ü∂ Y) (i : is_isomorphic X 0) : f = 0 :=
zero_of_source_iso_zero f (nonempty.some i)
lemma zero_of_target_iso_zero' {X Y : C} (f : X ‚ü∂ Y) (i : is_isomorphic Y 0) : f = 0 :=
zero_of_target_iso_zero f (nonempty.some i)
lemma mono_of_source_iso_zero {X Y : C} (f : X ‚ü∂ Y) (i : X ‚âÖ 0) : mono f :=
‚ü®Œª Z g h w, by rw [zero_of_target_iso_zero g i, zero_of_target_iso_zero h i]‚ü©
lemma epi_of_target_iso_zero {X Y : C} (f : X ‚ü∂ Y) (i : Y ‚âÖ 0) : epi f :=
‚ü®Œª Z g h w, by rw [zero_of_source_iso_zero g i, zero_of_source_iso_zero h i]‚ü©
def id_zero_equiv_iso_zero (X : C) : (ùüô X = 0) ‚âÉ (X ‚âÖ 0) :=
{ to_fun    := Œª h, { hom := 0, inv := 0, },
  inv_fun   := Œª i, zero_of_target_iso_zero (ùüô X) i,
  left_inv  := by tidy,
  right_inv := by tidy, }
@[simp]
lemma id_zero_equiv_iso_zero_apply_hom (X : C) (h : ùüô X = 0) :
  ((id_zero_equiv_iso_zero X) h).hom = 0 := rfl
@[simp]
lemma id_zero_equiv_iso_zero_apply_inv (X : C) (h : ùüô X = 0) :
  ((id_zero_equiv_iso_zero X) h).inv = 0 := rfl
@[simps]
def iso_zero_of_mono_zero {X Y : C} (h : mono (0 : X ‚ü∂ Y)) : X ‚âÖ 0 :=
{ hom := 0,
  inv := 0,
  hom_inv_id' := (cancel_mono (0 : X ‚ü∂ Y)).mp (by simp) }
@[simps]
def iso_zero_of_epi_zero {X Y : C} (h : epi (0 : X ‚ü∂ Y)) : Y ‚âÖ 0 :=
{ hom := 0,
  inv := 0,
  hom_inv_id' := (cancel_epi (0 : X ‚ü∂ Y)).mp (by simp) }
def iso_zero_of_mono_eq_zero {X Y : C} {f : X ‚ü∂ Y} [mono f] (h : f = 0) : X ‚âÖ 0 :=
by { unfreezingI { subst h, }, apply iso_zero_of_mono_zero ‚Äπ_‚Ä∫, }
def iso_zero_of_epi_eq_zero {X Y : C} {f : X ‚ü∂ Y} [epi f] (h : f = 0) : Y ‚âÖ 0 :=
by { unfreezingI { subst h, }, apply iso_zero_of_epi_zero ‚Äπ_‚Ä∫, }
def iso_of_is_isomorphic_zero {X : C} (P : is_isomorphic X 0) : X ‚âÖ 0 :=
{ hom := 0,
  inv := 0,
  hom_inv_id' :=
  begin
    casesI P,
    rw ‚ÜêP.hom_inv_id,
    rw ‚Üêcategory.id_comp P.inv,
    simp,
  end,
  inv_hom_id' := by simp, }
end
section is_iso
variables [has_zero_morphisms C]
@[simps]
def is_iso_zero_equiv (X Y : C) : is_iso (0 : X ‚ü∂ Y) ‚âÉ (ùüô X = 0 ‚àß ùüô Y = 0) :=
{ to_fun := by { introsI i, rw ‚Üêis_iso.hom_inv_id (0 : X ‚ü∂ Y),
    rw ‚Üêis_iso.inv_hom_id (0 : X ‚ü∂ Y), simp },
  inv_fun := Œª h, ‚ü®‚ü®(0 : Y ‚ü∂ X), by tidy‚ü©‚ü©,
  left_inv := by tidy,
  right_inv := by tidy, }
def is_iso_zero_self_equiv (X : C) : is_iso (0 : X ‚ü∂ X) ‚âÉ (ùüô X = 0) :=
by simpa using is_iso_zero_equiv X X
variables [has_zero_object C]
open_locale zero_object
def is_iso_zero_equiv_iso_zero (X Y : C) : is_iso (0 : X ‚ü∂ Y) ‚âÉ (X ‚âÖ 0) √ó (Y ‚âÖ 0) :=
begin
def is_iso_zero_self_equiv_iso_zero (X : C) : is_iso (0 : X ‚ü∂ X) ‚âÉ (X ‚âÖ 0) :=
(is_iso_zero_equiv_iso_zero X X).trans subsingleton_prod_self_equiv
end is_iso
lemma has_zero_object_of_has_initial_object
  [has_zero_morphisms C] [has_initial C] : has_zero_object C :=
begin
  refine ‚ü®‚ü®‚ä•_ C, Œª X, ‚ü®‚ü®‚ü®0‚ü©, by tidy‚ü©‚ü©, Œª X, ‚ü®‚ü®‚ü®0‚ü©, Œª f, _‚ü©‚ü©‚ü©‚ü©,
  calc
    f = f ‚â´ ùüô _ : (category.comp_id _).symm
    ... = f ‚â´ 0 : by congr
    ... = 0     : has_zero_morphisms.comp_zero _ _
end
lemma has_zero_object_of_has_terminal_object
  [has_zero_morphisms C] [has_terminal C] : has_zero_object C :=
begin
  refine ‚ü®‚ü®‚ä§_ C, Œª X, ‚ü®‚ü®‚ü®0‚ü©, Œª f, _‚ü©‚ü©, Œª X, ‚ü®‚ü®‚ü®0‚ü©, by tidy‚ü©‚ü©‚ü©‚ü©,
  calc
    f = ùüô _ ‚â´ f : (category.id_comp _).symm
    ... = 0 ‚â´ f : by congr
    ... = 0     : zero_comp
end
section image
variable [has_zero_morphisms C]
lemma image_Œπ_comp_eq_zero {X Y Z : C} {f : X ‚ü∂ Y} {g : Y ‚ü∂ Z} [has_image f]
  [epi (factor_thru_image f)] (h : f ‚â´ g = 0) : image.Œπ f ‚â´ g = 0 :=
zero_of_epi_comp (factor_thru_image f) $ by simp [h]
lemma comp_factor_thru_image_eq_zero {X Y Z : C} {f : X ‚ü∂ Y} {g : Y ‚ü∂ Z} [has_image g]
  (h : f ‚â´ g = 0) : f ‚â´ factor_thru_image g = 0 :=
zero_of_comp_mono (image.Œπ g) $ by simp [h]
variables [has_zero_object C]
open_locale zero_object
@[simps]
def mono_factorisation_zero (X Y : C) : mono_factorisation (0 : X ‚ü∂ Y) :=
{ I := 0, m := 0, e := 0, }
def image_factorisation_zero (X Y : C) : image_factorisation (0 : X ‚ü∂ Y) :=
{ F := mono_factorisation_zero X Y,
  is_image := { lift := Œª F', 0 } }
instance has_image_zero {X Y : C} : has_image (0 : X ‚ü∂ Y) :=
has_image.mk $ image_factorisation_zero _ _
def image_zero {X Y : C} : image (0 : X ‚ü∂ Y) ‚âÖ 0 :=
is_image.iso_ext (image.is_image (0 : X ‚ü∂ Y)) (image_factorisation_zero X Y).is_image
def image_zero' {X Y : C} {f : X ‚ü∂ Y} (h : f = 0) [has_image f] : image f ‚âÖ 0 :=
image.eq_to_iso h ‚â™‚â´ image_zero
@[simp]
lemma image.Œπ_zero {X Y : C} [has_image (0 : X ‚ü∂ Y)] : image.Œπ (0 : X ‚ü∂ Y) = 0 :=
begin
  rw ‚Üêimage.lift_fac (mono_factorisation_zero X Y),
  simp,
end
@[simp]
lemma image.Œπ_zero' [has_equalizers C] {X Y : C} {f : X ‚ü∂ Y} (h : f = 0) [has_image f] :
  image.Œπ f = 0 :=
by { rw image.eq_fac h, simp }
end image
instance split_mono_sigma_Œπ
  {Œ≤ : Type u'} [has_zero_morphisms C]
  (f : Œ≤ ‚Üí C) [has_colimit (discrete.functor f)] (b : Œ≤) : split_mono (sigma.Œπ f b) :=
{ retraction := sigma.desc (Œª b', if h : b' = b then eq_to_hom (congr_arg f h) else 0), }
instance split_epi_pi_œÄ
  {Œ≤ : Type u'} [has_zero_morphisms C]
  (f : Œ≤ ‚Üí C) [has_limit (discrete.functor f)] (b : Œ≤) : split_epi (pi.œÄ f b) :=
{ section_ := pi.lift (Œª b', if h : b = b' then eq_to_hom (congr_arg f h) else 0), }
instance split_mono_coprod_inl
  [has_zero_morphisms C] {X Y : C} [has_colimit (pair X Y)] :
  split_mono (coprod.inl : X ‚ü∂ X ‚®ø Y) :=
{ retraction := coprod.desc (ùüô X) 0, }
instance split_mono_coprod_inr
  [has_zero_morphisms C] {X Y : C} [has_colimit (pair X Y)] :
  split_mono (coprod.inr : Y ‚ü∂ X ‚®ø Y) :=
{ retraction := coprod.desc 0 (ùüô Y), }
instance split_epi_prod_fst
  [has_zero_morphisms C] {X Y : C} [has_limit (pair X Y)] :
  split_epi (prod.fst : X ‚®Ø Y ‚ü∂ X) :=
{ section_ := prod.lift (ùüô X) 0, }
instance split_epi_prod_snd
  [has_zero_morphisms C] {X Y : C} [has_limit (pair X Y)] :
  split_epi (prod.snd : X ‚®Ø Y ‚ü∂ Y) :=
{ section_ := prod.lift 0 (ùüô Y), }
end category_theory.limits
