import tactic.linarith.datatypes
open native linarith.ineq tactic
namespace linarith
@[reducible] meta def monom : Type := rb_map ℕ ℕ
meta def monom.one : monom := rb_map.mk _ _
@[reducible] meta def monom.lt : monom → monom → Prop :=
λ a b, (a.keys < b.keys) || ((a.keys = b.keys) && (a.values < b.values))
meta instance : has_lt monom := ⟨monom.lt⟩
@[reducible] meta def sum : Type := rb_map monom ℤ
meta def sum.one : sum := rb_map.of_list [(monom.one, 1)]
meta def sum.scale_by_monom (s : sum) (m : monom) : sum :=
s.fold mk_rb_map $ λ m' coeff sm, sm.insert (m.add m') coeff
meta def sum.mul (s1 s2 : sum) : sum :=
s1.fold mk_rb_map $ λ mn coeff sm, sm.add $ (s2.scale_by_monom mn).scale coeff
meta def sum.pow (s : sum) : ℕ → sum
| 0 := sum.one
| (k+1) := s.mul (sum.pow k)
meta def sum_of_monom (m : monom) : sum :=
mk_rb_map.insert m 1
meta def one : monom := mk_rb_map
meta def scalar (z : ℤ) : sum :=
mk_rb_map.insert one z
meta def var (n : ℕ) : sum :=
mk_rb_map.insert (mk_rb_map.insert n 1) 1
local notation `exmap` := list (expr × ℕ)
meta def linear_form_of_atom (red : transparency) (m : exmap) (e : expr) : tactic (exmap × sum) :=
(do (_, k) ← m.find_defeq red e, return (m, var k)) <|>
(let n := m.length + 1 in return ((e, n)::m, var n))
meta def linear_form_of_expr (red : transparency) : exmap → expr → tactic (exmap × sum)
| m e@`(%%e1 * %%e2) :=
   do (m', comp1) ← linear_form_of_expr m e1,
      (m', comp2) ← linear_form_of_expr m' e2,
      return (m', comp1.mul comp2)
| m `(%%e1 + %%e2) :=
   do (m', comp1) ← linear_form_of_expr m e1,
      (m', comp2) ← linear_form_of_expr m' e2,
      return (m', comp1.add comp2)
| m `(%%e1 - %%e2) :=
   do (m', comp1) ← linear_form_of_expr m e1,
      (m', comp2) ← linear_form_of_expr m' e2,
      return (m', comp1.add (comp2.scale (-1)))
| m `(-%%e) := do (m', comp) ← linear_form_of_expr m e, return (m', comp.scale (-1))
| m p@`(@has_pow.pow _ ℕ _ %%e %%n) :=
  match n.to_nat with
  | some k :=
    do (m', comp) ← linear_form_of_expr m e,
    return (m', comp.pow k)
  | none := linear_form_of_atom red m p
  end
| m e :=
  match e.to_int with
  | some 0 := return ⟨m, mk_rb_map⟩
  | some z := return ⟨m, scalar z⟩
  | none := linear_form_of_atom red m e
  end
meta def sum_to_lf (s : sum) (m : rb_map monom ℕ) : rb_map monom ℕ × rb_map ℕ ℤ :=
s.fold (m, mk_rb_map) $ λ mn coeff ⟨map, out⟩,
  match map.find mn with
  | some n := ⟨map, out.insert n coeff⟩
  | none := let n := map.size in ⟨map.insert mn n, out.insert n coeff⟩
  end
meta def to_comp (red : transparency) (e : expr) (e_map : exmap) (monom_map : rb_map monom ℕ) :
  tactic (comp × exmap × rb_map monom ℕ) :=
do (iq, e) ← parse_into_comp_and_expr e,
   (m', comp') ← linear_form_of_expr red e_map e,
   let ⟨nm, mm'⟩ := sum_to_lf comp' monom_map,
   return ⟨⟨iq, mm'.to_list⟩, m', nm⟩
meta def to_comp_fold (red : transparency) : exmap → list expr → rb_map monom ℕ →
      tactic (list comp × exmap × rb_map monom ℕ)
| m [] mm := return ([], m, mm)
| m (h::t) mm :=
  do (c, m', mm') ← to_comp red h m mm,
      (l, mp, mm') ← to_comp_fold m' t mm',
      return (c::l, mp, mm')
meta def linear_forms_and_max_var (red : transparency) (pfs : list expr) :
  tactic (list comp × ℕ) :=
do pftps ← pfs.mmap infer_type,
   (l, _, map) ← to_comp_fold red [] pftps mk_rb_map,
   return (l, map.size - 1)
end linarith
