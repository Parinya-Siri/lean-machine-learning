import topology.uniform_space.basic
noncomputable theory
open_locale topological_space classical uniformity filter
open set filter
universes u v w
variables {Œ± Œ≤ Œ≥ Œπ : Type*} [uniform_space Œ≤]
variables {F : Œπ ‚Üí Œ± ‚Üí Œ≤} {f : Œ± ‚Üí Œ≤} {s s' : set Œ±} {x : Œ±} {p : filter Œπ} {g : Œπ ‚Üí Œ±}
def tendsto_uniformly_on (F : Œπ ‚Üí Œ± ‚Üí Œ≤) (f : Œ± ‚Üí Œ≤) (p : filter Œπ) (s : set Œ±) :=
‚àÄ u ‚àà ùì§ Œ≤, ‚àÄ·∂† n in p, ‚àÄ x ‚àà s, (f x, F n x) ‚àà u
lemma tendsto_uniformly_on_iff_tendsto {F : Œπ ‚Üí Œ± ‚Üí Œ≤} {f : Œ± ‚Üí Œ≤} {p : filter Œπ} {s : set Œ±} :
  tendsto_uniformly_on F f p s ‚Üî tendsto (Œª q : Œπ √ó Œ±, (f q.2, F q.1 q.2)) (p √ó·∂† ùìü s) (ùì§ Œ≤) :=
forall‚ÇÇ_congr $ Œª u u_in, by simp [mem_map, filter.eventually, mem_prod_principal]
def tendsto_uniformly (F : Œπ ‚Üí Œ± ‚Üí Œ≤) (f : Œ± ‚Üí Œ≤) (p : filter Œπ) :=
‚àÄ u ‚àà ùì§ Œ≤, ‚àÄ·∂† n in p, ‚àÄ x, (f x, F n x) ‚àà u
lemma tendsto_uniformly_on_iff_tendsto_uniformly_comp_coe :
  tendsto_uniformly_on F f p s ‚Üî tendsto_uniformly (Œª i (x : s), F i x) (f ‚àò coe) p :=
forall‚ÇÇ_congr $ Œª V hV, by simp
lemma tendsto_uniformly_iff_tendsto {F : Œπ ‚Üí Œ± ‚Üí Œ≤} {f : Œ± ‚Üí Œ≤} {p : filter Œπ} :
  tendsto_uniformly F f p ‚Üî tendsto (Œª q : Œπ √ó Œ±, (f q.2, F q.1 q.2)) (p √ó·∂† ‚ä§) (ùì§ Œ≤) :=
forall‚ÇÇ_congr $ Œª u u_in, by simp [mem_map, filter.eventually, mem_prod_top]
lemma tendsto_uniformly.tendsto_at (h : tendsto_uniformly F f p) (x : Œ±) :
  tendsto (Œª n, F n x) p $ ùìù (f x) :=
uniform.tendsto_nhds_right.mpr $ Œª u hu, mem_map.mpr $ by { filter_upwards [h u hu], tauto, }
lemma tendsto_uniformly_on_univ :
  tendsto_uniformly_on F f p univ ‚Üî tendsto_uniformly F f p :=
by simp [tendsto_uniformly_on, tendsto_uniformly]
lemma tendsto_uniformly_on.mono {s' : set Œ±}
  (h : tendsto_uniformly_on F f p s) (h' : s' ‚äÜ s) : tendsto_uniformly_on F f p s' :=
Œª u hu, (h u hu).mono (Œª n hn x hx, hn x (h' hx))
lemma tendsto_uniformly_on.congr {F' : Œπ ‚Üí Œ± ‚Üí Œ≤}
  (hf : tendsto_uniformly_on F f p s) (hff' : ‚àÄ·∂† n in p, set.eq_on (F n) (F' n) s) :
  tendsto_uniformly_on F' f p s :=
begin
  refine (Œª u hu, ((hf u hu).and hff').mono (Œª n h x hx, _)),
  rw ‚Üê h.right hx,
  exact h.left x hx,
end
protected lemma tendsto_uniformly.tendsto_uniformly_on
  (h : tendsto_uniformly F f p) : tendsto_uniformly_on F f p s :=
(tendsto_uniformly_on_univ.2 h).mono (subset_univ s)
lemma tendsto_uniformly_on.comp (h : tendsto_uniformly_on F f p s) (g : Œ≥ ‚Üí Œ±) :
  tendsto_uniformly_on (Œª n, F n ‚àò g) (f ‚àò g) p (g ‚Åª¬π' s) :=
Œª u hu, (h u hu).mono (Œª i hi, Œª a, hi (g a))
lemma tendsto_uniformly.comp (h : tendsto_uniformly F f p) (g : Œ≥ ‚Üí Œ±) :
  tendsto_uniformly (Œª n, F n ‚àò g) (f ‚àò g) p :=
Œª u hu, (h u hu).mono (Œª i hi, Œª a, hi (g a))
lemma uniform_continuous.comp_tendsto_uniformly_on [uniform_space Œ≥] {g : Œ≤ ‚Üí Œ≥}
  (hg : uniform_continuous g) (h : tendsto_uniformly_on F f p s) :
  tendsto_uniformly_on (Œª i, g ‚àò (F i)) (g ‚àò f) p s :=
Œª u hu, h _ (hg hu)
lemma uniform_continuous.comp_tendsto_uniformly [uniform_space Œ≥] {g : Œ≤ ‚Üí Œ≥}
  (hg : uniform_continuous g) (h : tendsto_uniformly F f p) :
  tendsto_uniformly (Œª i, g ‚àò (F i)) (g ‚àò f) p :=
Œª u hu, h _ (hg hu)
lemma tendsto_uniformly_on.prod_map {Œπ' Œ±' Œ≤' : Type*} [uniform_space Œ≤']
  {F' : Œπ' ‚Üí Œ±' ‚Üí Œ≤'} {f' : Œ±' ‚Üí Œ≤'} {p' : filter Œπ'} {s' : set Œ±'}
  (h : tendsto_uniformly_on F f p s) (h' : tendsto_uniformly_on F' f' p' s') :
  tendsto_uniformly_on (Œª (i : Œπ √ó Œπ'), prod.map (F i.1) (F' i.2))
    (prod.map f f') (p.prod p') (s √óÀ¢ s') :=
begin
  intros u hu,
  rw [uniformity_prod_eq_prod, mem_map, mem_prod_iff] at hu,
  obtain ‚ü®v, hv, w, hw, hvw‚ü© := hu,
  exact mem_prod_iff.mpr ‚ü®_, h v hv, _, h' w hw,
    Œª i hi a ha, hvw (show (_, _) ‚àà v √óÀ¢ w, from ‚ü®hi.1 a.1 ha.1, hi.2 a.2 ha.2‚ü©)‚ü©,
end
lemma tendsto_uniformly.prod_map {Œπ' Œ±' Œ≤' : Type*} [uniform_space Œ≤'] {F' : Œπ' ‚Üí Œ±' ‚Üí Œ≤'}
  {f' : Œ±' ‚Üí Œ≤'} {p' : filter Œπ'} (h : tendsto_uniformly F f p) (h' : tendsto_uniformly F' f' p') :
  tendsto_uniformly (Œª (i : Œπ √ó Œπ'), prod.map (F i.1) (F' i.2)) (prod.map f f') (p.prod p') :=
begin
  rw [‚Üêtendsto_uniformly_on_univ, ‚Üêuniv_prod_univ] at *,
  exact h.prod_map h',
end
lemma tendsto_uniformly_on.prod {Œπ' Œ≤' : Type*} [uniform_space Œ≤'] {F' : Œπ' ‚Üí Œ± ‚Üí Œ≤'} {f' : Œ± ‚Üí Œ≤'}
  {p' : filter Œπ'} (h : tendsto_uniformly_on F f p s) (h' : tendsto_uniformly_on F' f' p' s) :
  tendsto_uniformly_on (Œª (i : Œπ √ó Œπ') a, (F i.1 a, F' i.2 a)) (Œª a, (f a, f' a)) (p.prod p') s :=
(congr_arg _ s.inter_self).mp ((h.prod_map h').comp (Œª a, (a, a)))
lemma tendsto_uniformly.prod {Œπ' Œ≤' : Type*} [uniform_space Œ≤'] {F' : Œπ' ‚Üí Œ± ‚Üí Œ≤'} {f' : Œ± ‚Üí Œ≤'}
  {p' : filter Œπ'} (h : tendsto_uniformly F f p) (h' : tendsto_uniformly F' f' p') :
  tendsto_uniformly (Œª (i : Œπ √ó Œπ') a, (F i.1 a, F' i.2 a)) (Œª a, (f a, f' a)) (p.prod p') :=
(h.prod_map h').comp (Œª a, (a, a))
lemma tendsto_prod_principal_iff {c : Œ≤} :
  tendsto ‚ÜøF (p √ó·∂† ùìü s) (ùìù c) ‚Üî tendsto_uniformly_on F (Œª _, c) p s :=
begin
  unfold tendsto,
  simp_rw [nhds_eq_comap_uniformity, map_le_iff_le_comap.symm, map_map, le_def, mem_map,
    mem_prod_principal],
  simpa,
end
lemma tendsto_prod_top_iff {c : Œ≤} : tendsto ‚ÜøF (p √ó·∂† ‚ä§) (ùìù c) ‚Üî tendsto_uniformly F (Œª _, c) p :=
by rw [‚Üêprincipal_univ, ‚Üêtendsto_uniformly_on_univ, ‚Üêtendsto_prod_principal_iff]
lemma tendsto_uniformly_on_empty :
  tendsto_uniformly_on F f p ‚àÖ :=
Œª u hu, by simp
lemma tendsto_uniformly_on_singleton_iff_tendsto :
  tendsto_uniformly_on F f p {x} ‚Üî tendsto (Œª n : Œπ, F n x) p (ùìù (f x)) :=
by simp_rw [uniform.tendsto_nhds_right, tendsto_uniformly_on, mem_singleton_iff, forall_eq,
  tendsto_def, preimage, filter.eventually]
lemma filter.tendsto.tendsto_uniformly_on_const
  {g : Œπ ‚Üí Œ≤} {b : Œ≤} (hg : tendsto g p (ùìù b)) (s : set Œ±) :
  tendsto_uniformly_on (Œª n : Œπ, Œª a : Œ±, g n) (Œª a : Œ±, b) p s :=
Œª u hu, hg.eventually
  (eventually_of_mem (mem_nhds_left b hu) (Œª x hx y hy, hx) : ‚àÄ·∂† x in ùìù b, ‚àÄ y ‚àà s, (b, x) ‚àà u)
lemma uniform_continuous_on.tendsto_uniformly [uniform_space Œ±] [uniform_space Œ≥]
  {x : Œ±} {U : set Œ±} (hU : U ‚àà ùìù x)
  {F : Œ± ‚Üí Œ≤ ‚Üí Œ≥} (hF : uniform_continuous_on ‚ÜøF (U √óÀ¢ (univ : set Œ≤))) :
  tendsto_uniformly F (F x) (ùìù x) :=
begin
  let œÜ := (Œª q : Œ± √ó Œ≤, ((x, q.2), q)),
  rw [tendsto_uniformly_iff_tendsto,
      show (Œª q : Œ± √ó Œ≤, (F x q.2, F q.1 q.2)) = prod.map ‚ÜøF ‚ÜøF ‚àò œÜ, by { ext ; simpa }],
  apply hF.comp (tendsto_inf.mpr ‚ü®_, _‚ü©),
  { rw [uniformity_prod, tendsto_inf, tendsto_comap_iff, tendsto_comap_iff,
      show (Œªp : (Œ± √ó Œ≤) √ó Œ± √ó Œ≤, (p.1.1, p.2.1)) ‚àò œÜ = (Œªa, (x, a)) ‚àò prod.fst, by { ext, simp },
      show (Œªp : (Œ± √ó Œ≤) √ó Œ± √ó Œ≤, (p.1.2, p.2.2)) ‚àò œÜ = (Œªb, (b, b)) ‚àò prod.snd, by { ext, simp }],
    exact ‚ü®tendsto_left_nhds_uniformity.comp tendsto_fst,
           (tendsto_diag_uniformity id ‚ä§).comp tendsto_top‚ü© },
  { rw tendsto_principal,
    apply mem_of_superset (prod_mem_prod hU (mem_top.mpr rfl)) (Œª q h, _),
    simp [h.1, mem_of_mem_nhds hU] }
end
lemma uniform_continuous‚ÇÇ.tendsto_uniformly [uniform_space Œ±] [uniform_space Œ≥]
  {f : Œ± ‚Üí Œ≤ ‚Üí Œ≥} (h : uniform_continuous‚ÇÇ f) {x : Œ±} : tendsto_uniformly f (f x) (ùìù x) :=
uniform_continuous_on.tendsto_uniformly univ_mem $
  by rwa [univ_prod_univ, uniform_continuous_on_univ]
def uniform_cauchy_seq_on
  (F : Œπ ‚Üí Œ± ‚Üí Œ≤) (p : filter Œπ) (s : set Œ±) : Prop :=
  ‚àÄ u : set (Œ≤ √ó Œ≤), u ‚àà ùì§ Œ≤ ‚Üí ‚àÄ·∂† (m : Œπ √ó Œπ) in (p √ó·∂† p),
    ‚àÄ (x : Œ±), x ‚àà s ‚Üí (F m.fst x, F m.snd x) ‚àà u
lemma tendsto_uniformly_on.uniform_cauchy_seq_on (hF : tendsto_uniformly_on F f p s) :
  uniform_cauchy_seq_on F p s :=
begin
  intros u hu,
  rcases comp_symm_of_uniformity hu with ‚ü®t, ht, htsymm, htmem‚ü©,
  apply ((hF t ht).prod_mk (hF t ht)).mono,
  intros n h x hx,
  cases h with hl hr,
  specialize hl x hx,
  specialize hr x hx,
  exact set.mem_of_mem_of_subset (prod_mk_mem_comp_rel (htsymm hl) hr) htmem,
end
lemma uniform_cauchy_seq_on.tendsto_uniformly_on_of_tendsto [ne_bot p]
  (hF : uniform_cauchy_seq_on F p s) (hF' : ‚àÄ x : Œ±, x ‚àà s ‚Üí tendsto (Œª n, F n x) p (nhds (f x))) :
  tendsto_uniformly_on F f p s :=
begin
lemma uniform_cauchy_seq_on.comp {Œ≥ : Type*} (hf : uniform_cauchy_seq_on F p s) (g : Œ≥ ‚Üí Œ±) :
  uniform_cauchy_seq_on (Œª n, F n ‚àò g) p (g ‚Åª¬π' s) :=
Œª u hu, (hf u hu).mono (Œª x hx y hy, hx (g y) hy)
lemma uniform_continuous.comp_uniform_cauchy_seq_on [uniform_space Œ≥] {g : Œ≤ ‚Üí Œ≥}
  (hg : uniform_continuous g) (hf : uniform_cauchy_seq_on F p s) :
  uniform_cauchy_seq_on (Œª n, g ‚àò (F n)) p s :=
Œª u hu, hf _ (hg hu)
lemma uniform_cauchy_seq_on.prod_map {Œπ' Œ±' Œ≤' : Type*} [uniform_space Œ≤']
  {F' : Œπ' ‚Üí Œ±' ‚Üí Œ≤'} {p' : filter Œπ'} {s' : set Œ±'}
  (h : uniform_cauchy_seq_on F p s) (h' : uniform_cauchy_seq_on F' p' s') :
  uniform_cauchy_seq_on (Œª (i : Œπ √ó Œπ'), prod.map (F i.1) (F' i.2))
    (p.prod p') (s √óÀ¢ s') :=
begin
  intros u hu,
  rw [uniformity_prod_eq_prod, mem_map, mem_prod_iff] at hu,
  obtain ‚ü®v, hv, w, hw, hvw‚ü© := hu,
  simp_rw [mem_prod, prod_map, and_imp, prod.forall],
  rw [‚Üê set.image_subset_iff] at hvw,
  apply (tendsto_swap4_prod.eventually ((h v hv).prod_mk (h' w hw))).mono,
  intros x hx a b ha hb,
  refine hvw ‚ü®_, mk_mem_prod (hx.1 a ha) (hx.2 b hb), rfl‚ü©,
end
lemma uniform_cauchy_seq_on.prod {Œπ' Œ≤' : Type*} [uniform_space Œ≤'] {F' : Œπ' ‚Üí Œ± ‚Üí Œ≤'}
  {p' : filter Œπ'}
  (h : uniform_cauchy_seq_on F p s) (h' : uniform_cauchy_seq_on F' p' s) :
  uniform_cauchy_seq_on (Œª (i : Œπ √ó Œπ') a, (F i.fst a, F' i.snd a)) (p √ó·∂† p') s :=
(congr_arg _ s.inter_self).mp ((h.prod_map h').comp (Œª a, (a, a)))
lemma uniform_cauchy_seq_on.prod' {Œ≤' : Type*} [uniform_space Œ≤'] {F' : Œπ ‚Üí Œ± ‚Üí Œ≤'}
  (h : uniform_cauchy_seq_on F p s) (h' : uniform_cauchy_seq_on F' p s) :
  uniform_cauchy_seq_on (Œª (i : Œπ) a, (F i a, F' i a)) p s :=
begin
  intros u hu,
  have hh : tendsto (Œª x : Œπ, (x, x)) p (p √ó·∂† p), { exact tendsto_diag, },
  exact (hh.prod_map hh).eventually ((h.prod h') u hu),
end
section seq_tendsto
lemma tendsto_uniformly_on_of_seq_tendsto_uniformly_on {l : filter Œπ} [l.is_countably_generated]
  (h : ‚àÄ u : ‚Ñï ‚Üí Œπ, tendsto u at_top l ‚Üí tendsto_uniformly_on (Œª n, F (u n)) f at_top s) :
  tendsto_uniformly_on F f l s :=
begin
  rw [tendsto_uniformly_on_iff_tendsto, tendsto_iff_seq_tendsto],
  intros u hu,
  rw tendsto_prod_iff' at hu,
  specialize h (Œª n, (u n).fst) hu.1,
  rw tendsto_uniformly_on_iff_tendsto at h,
  have : ((Œª (q : Œπ √ó Œ±), (f q.snd, F q.fst q.snd)) ‚àò u)
    = (Œª (q : ‚Ñï √ó Œ±), (f q.snd, F ((Œª (n : ‚Ñï), (u n).fst) q.fst) q.snd)) ‚àò (Œª n, (n, (u n).snd)),
  { ext1 n, simp, },
  rw this,
  refine tendsto.comp h _,
  rw tendsto_prod_iff',
  exact ‚ü®tendsto_id, hu.2‚ü©,
end
lemma tendsto_uniformly_on.seq_tendsto_uniformly_on {l : filter Œπ}
  (h : tendsto_uniformly_on F f l s) (u : ‚Ñï ‚Üí Œπ) (hu : tendsto u at_top l) :
  tendsto_uniformly_on (Œª n, F (u n)) f at_top s :=
begin
  rw tendsto_uniformly_on_iff_tendsto at h ‚ä¢,
  have : (Œª (q : ‚Ñï √ó Œ±), (f q.snd, F (u q.fst) q.snd))
    = (Œª (q : Œπ √ó Œ±), (f q.snd, F q.fst q.snd)) ‚àò (Œª p : ‚Ñï √ó Œ±, (u p.fst, p.snd)),
  { ext1 x, simp, },
  rw this,
  refine h.comp _,
  rw tendsto_prod_iff',
  exact ‚ü®hu.comp tendsto_fst, tendsto_snd‚ü©,
end
lemma tendsto_uniformly_on_iff_seq_tendsto_uniformly_on {l : filter Œπ} [l.is_countably_generated] :
  tendsto_uniformly_on F f l s
    ‚Üî ‚àÄ u : ‚Ñï ‚Üí Œπ, tendsto u at_top l ‚Üí tendsto_uniformly_on (Œª n, F (u n)) f at_top s :=
‚ü®tendsto_uniformly_on.seq_tendsto_uniformly_on, tendsto_uniformly_on_of_seq_tendsto_uniformly_on‚ü©
lemma tendsto_uniformly_iff_seq_tendsto_uniformly {l : filter Œπ} [l.is_countably_generated] :
  tendsto_uniformly F f l
    ‚Üî ‚àÄ u : ‚Ñï ‚Üí Œπ, tendsto u at_top l ‚Üí tendsto_uniformly (Œª n, F (u n)) f at_top :=
begin
  simp_rw ‚Üê tendsto_uniformly_on_univ,
  exact tendsto_uniformly_on_iff_seq_tendsto_uniformly_on,
end
end seq_tendsto
variable [topological_space Œ±]
def tendsto_locally_uniformly_on (F : Œπ ‚Üí Œ± ‚Üí Œ≤) (f : Œ± ‚Üí Œ≤) (p : filter Œπ) (s : set Œ±) :=
  ‚àÄ u ‚àà ùì§ Œ≤, ‚àÄ x ‚àà s, ‚àÉ t ‚àà ùìù[s] x, ‚àÄ·∂† n in p, ‚àÄ y ‚àà t, (f y, F n y) ‚àà u
def tendsto_locally_uniformly (F : Œπ ‚Üí Œ± ‚Üí Œ≤) (f : Œ± ‚Üí Œ≤) (p : filter Œπ) :=
  ‚àÄ u ‚àà ùì§ Œ≤, ‚àÄ (x : Œ±), ‚àÉ t ‚àà ùìù x, ‚àÄ·∂† n in p, ‚àÄ y ‚àà t, (f y, F n y) ‚àà u
lemma tendsto_locally_uniformly_on_iff_tendsto_locally_uniformly_comp_coe :
  tendsto_locally_uniformly_on F f p s ‚Üî
  tendsto_locally_uniformly (Œª i (x : s), F i x) (f ‚àò coe) p :=
begin
  refine forall‚ÇÇ_congr (Œª V hV, _),
  simp only [exists_prop, function.comp_app, set_coe.forall, subtype.coe_mk],
  refine forall‚ÇÇ_congr (Œª x hx, ‚ü®_, _‚ü©),
  { rintro ‚ü®t, ht‚ÇÅ, ht‚ÇÇ‚ü©,
    obtain ‚ü®u, hu‚ÇÅ, hu‚ÇÇ‚ü© := mem_nhds_within_iff_exists_mem_nhds_inter.mp ht‚ÇÅ,
    exact ‚ü®coe‚Åª¬π' u,
           (mem_nhds_subtype _ _ _).mpr ‚ü®u, hu‚ÇÅ, rfl.subset‚ü©,
           ht‚ÇÇ.mono (Œª i hi y hy‚ÇÅ hy‚ÇÇ, hi y (hu‚ÇÇ ‚ü®hy‚ÇÇ, hy‚ÇÅ‚ü©))‚ü©, },
  { rintro ‚ü®t, ht‚ÇÅ, ht‚ÇÇ‚ü©,
    obtain ‚ü®u, hu‚ÇÅ, hu‚ÇÇ‚ü© := (mem_nhds_subtype _ _ _).mp ht‚ÇÅ,
    exact ‚ü®u ‚à© s,
           mem_nhds_within_iff_exists_mem_nhds_inter.mpr ‚ü®u, hu‚ÇÅ, rfl.subset‚ü©,
           ht‚ÇÇ.mono (Œª i hi y hy, hi y hy.2 (hu‚ÇÇ (by simp [hy.1])))‚ü©, },
end
lemma tendsto_locally_uniformly_iff_forall_tendsto :
  tendsto_locally_uniformly F f p ‚Üî
  ‚àÄ x, tendsto (Œª (y : Œπ √ó Œ±), (f y.2, F y.1 y.2)) (p √ó·∂† (ùìù x)) (ùì§ Œ≤) :=
begin
  simp only [tendsto_locally_uniformly, filter.forall_in_swap, tendsto_def, mem_prod_iff,
    set.prod_subset_iff],
  refine forall‚ÇÉ_congr (Œª x u hu, ‚ü®_, _‚ü©),
  { rintros ‚ü®n, hn, hp‚ü©,
    exact ‚ü®_, hp, n, hn, Œª i hi a ha, hi a ha‚ü©, },
  { rintros ‚ü®I, hI, n, hn, hu‚ü©,
    exact ‚ü®n, hn, by filter_upwards [hI] using hu‚ü©, },
end
protected lemma tendsto_uniformly_on.tendsto_locally_uniformly_on
  (h : tendsto_uniformly_on F f p s) : tendsto_locally_uniformly_on F f p s :=
Œª u hu x hx, ‚ü®s, self_mem_nhds_within, h u hu‚ü©
protected lemma tendsto_uniformly.tendsto_locally_uniformly
  (h : tendsto_uniformly F f p) : tendsto_locally_uniformly F f p :=
Œª u hu x, ‚ü®univ, univ_mem, by simpa using h u hu‚ü©
lemma tendsto_locally_uniformly_on.mono (h : tendsto_locally_uniformly_on F f p s) (h' : s' ‚äÜ s) :
  tendsto_locally_uniformly_on F f p s' :=
begin
  assume u hu x hx,
  rcases h u hu x (h' hx) with ‚ü®t, ht, H‚ü©,
  exact ‚ü®t, nhds_within_mono x h' ht, H.mono (Œª n, id)‚ü©
end
lemma tendsto_locally_uniformly_on_univ :
  tendsto_locally_uniformly_on F f p univ ‚Üî tendsto_locally_uniformly F f p :=
by simp [tendsto_locally_uniformly_on, tendsto_locally_uniformly, nhds_within_univ]
protected lemma tendsto_locally_uniformly.tendsto_locally_uniformly_on
  (h : tendsto_locally_uniformly F f p) : tendsto_locally_uniformly_on F f p s :=
(tendsto_locally_uniformly_on_univ.mpr h).mono (subset_univ _)
lemma tendsto_locally_uniformly_iff_tendsto_uniformly_of_compact_space [compact_space Œ±] :
  tendsto_locally_uniformly F f p ‚Üî tendsto_uniformly F f p :=
begin
  refine ‚ü®Œª h V hV, _, tendsto_uniformly.tendsto_locally_uniformly‚ü©,
  choose U hU using h V hV,
  obtain ‚ü®t, ht‚ü© := compact_univ.elim_nhds_subcover' (Œª k hk, U k) (Œª k hk, (hU k).1),
  replace hU := Œª (x : t), (hU x).2,
  rw ‚Üê eventually_all at hU,
  refine hU.mono (Œª i hi x, _),
  specialize ht (mem_univ x),
  simp only [exists_prop, mem_Union, set_coe.exists, exists_and_distrib_right,subtype.coe_mk] at ht,
  obtain ‚ü®y, ‚ü®hy‚ÇÅ, hy‚ÇÇ‚ü©, hy‚ÇÉ‚ü© := ht,
  exact hi ‚ü®‚ü®y, hy‚ÇÅ‚ü©, hy‚ÇÇ‚ü© x hy‚ÇÉ,
end
lemma tendsto_locally_uniformly_on_iff_tendsto_uniformly_on_of_compact (hs : is_compact s) :
  tendsto_locally_uniformly_on F f p s ‚Üî tendsto_uniformly_on F f p s :=
begin
  haveI : compact_space s := is_compact_iff_compact_space.mp hs,
  refine ‚ü®Œª h, _, tendsto_uniformly_on.tendsto_locally_uniformly_on‚ü©,
  rwa [tendsto_locally_uniformly_on_iff_tendsto_locally_uniformly_comp_coe,
    tendsto_locally_uniformly_iff_tendsto_uniformly_of_compact_space,
    ‚Üê tendsto_uniformly_on_iff_tendsto_uniformly_comp_coe] at h,
end
lemma tendsto_locally_uniformly_on.comp [topological_space Œ≥] {t : set Œ≥}
  (h : tendsto_locally_uniformly_on F f p s)
  (g : Œ≥ ‚Üí Œ±) (hg : maps_to g t s) (cg : continuous_on g t) :
  tendsto_locally_uniformly_on (Œª n, (F n) ‚àò g) (f ‚àò g) p t :=
begin
  assume u hu x hx,
  rcases h u hu (g x) (hg hx) with ‚ü®a, ha, H‚ü©,
  have : g‚Åª¬π' a ‚àà ùìù[t] x :=
    ((cg x hx).preimage_mem_nhds_within' (nhds_within_mono (g x) hg.image_subset ha)),
  exact ‚ü®g ‚Åª¬π' a, this, H.mono (Œª n hn y hy, hn _ hy)‚ü©
end
lemma tendsto_locally_uniformly.comp [topological_space Œ≥]
  (h : tendsto_locally_uniformly F f p) (g : Œ≥ ‚Üí Œ±) (cg : continuous g) :
  tendsto_locally_uniformly (Œª n, (F n) ‚àò g) (f ‚àò g) p :=
begin
  rw ‚Üê tendsto_locally_uniformly_on_univ at h ‚ä¢,
  rw continuous_iff_continuous_on_univ at cg,
  exact h.comp _ (maps_to_univ _ _) cg
end
lemma continuous_within_at_of_locally_uniform_approx_of_continuous_within_at
  (hx : x ‚àà s) (L : ‚àÄ u ‚àà ùì§ Œ≤, ‚àÉ (t ‚àà ùìù[s] x) (F : Œ± ‚Üí Œ≤), continuous_within_at F s x ‚àß
    ‚àÄ y ‚àà t, (f y, F y) ‚àà u) : continuous_within_at f s x :=
begin
  apply uniform.continuous_within_at_iff'_left.2 (Œª u‚ÇÄ hu‚ÇÄ, _),
  obtain ‚ü®u‚ÇÅ, h‚ÇÅ, u‚ÇÅ‚ÇÄ‚ü© : ‚àÉ (u : set (Œ≤ √ó Œ≤)) (H : u ‚àà ùì§ Œ≤), comp_rel u u ‚äÜ u‚ÇÄ :=
    comp_mem_uniformity_sets hu‚ÇÄ,
  obtain ‚ü®u‚ÇÇ, h‚ÇÇ, hsymm, u‚ÇÇ‚ÇÅ‚ü© : ‚àÉ (u : set (Œ≤ √ó Œ≤)) (H : u ‚àà ùì§ Œ≤),
    (‚àÄ{a b}, (a, b) ‚àà u ‚Üí (b, a) ‚àà u) ‚àß comp_rel u u ‚äÜ u‚ÇÅ := comp_symm_of_uniformity h‚ÇÅ,
  rcases L u‚ÇÇ h‚ÇÇ with ‚ü®t, tx, F, hFc, hF‚ü©,
  have A : ‚àÄ·∂† y in ùìù[s] x, (f y, F y) ‚àà u‚ÇÇ := eventually.mono tx hF,
  have B : ‚àÄ·∂† y in ùìù[s] x, (F y, F x) ‚àà u‚ÇÇ :=
    uniform.continuous_within_at_iff'_left.1 hFc h‚ÇÇ,
  have C : ‚àÄ·∂† y in ùìù[s] x, (f y, F x) ‚àà u‚ÇÅ :=
    (A.and B).mono (Œª y hy, u‚ÇÇ‚ÇÅ (prod_mk_mem_comp_rel hy.1 hy.2)),
  have : (F x, f x) ‚àà u‚ÇÅ :=
    u‚ÇÇ‚ÇÅ (prod_mk_mem_comp_rel (refl_mem_uniformity h‚ÇÇ) (hsymm (A.self_of_nhds_within hx))),
  exact C.mono (Œª y hy, u‚ÇÅ‚ÇÄ (prod_mk_mem_comp_rel hy this))
end
lemma continuous_at_of_locally_uniform_approx_of_continuous_at
  (L : ‚àÄ u ‚àà ùì§ Œ≤, ‚àÉ (t ‚àà ùìù x) F, continuous_at F x ‚àß ‚àÄ y ‚àà t, (f y, F y) ‚àà u) :
  continuous_at f x :=
begin
  rw ‚Üê continuous_within_at_univ,
  apply continuous_within_at_of_locally_uniform_approx_of_continuous_within_at (mem_univ _) _,
  simpa only [exists_prop, nhds_within_univ, continuous_within_at_univ] using L
end
lemma continuous_on_of_locally_uniform_approx_of_continuous_within_at
  (L : ‚àÄ (x ‚àà s) (u ‚àà ùì§ Œ≤), ‚àÉ (t ‚àà ùìù[s] x) F,
    continuous_within_at F s x ‚àß ‚àÄ y ‚àà t, (f y, F y) ‚àà u) : continuous_on f s :=
Œª x hx, continuous_within_at_of_locally_uniform_approx_of_continuous_within_at hx (L x hx)
lemma continuous_on_of_uniform_approx_of_continuous_on
  (L : ‚àÄ u ‚àà ùì§ Œ≤, ‚àÉ F, continuous_on F s ‚àß ‚àÄ y ‚àà s, (f y, F y) ‚àà u) : continuous_on f s :=
continuous_on_of_locally_uniform_approx_of_continuous_within_at $
  Œª x hx u hu, ‚ü®s, self_mem_nhds_within, (L u hu).imp $
    Œª F hF, ‚ü®hF.1.continuous_within_at hx, hF.2‚ü©‚ü©
lemma continuous_of_locally_uniform_approx_of_continuous_at
  (L : ‚àÄ (x : Œ±), ‚àÄ u ‚àà ùì§ Œ≤, ‚àÉ t ‚àà ùìù x, ‚àÉ F, continuous_at F x ‚àß ‚àÄ y ‚àà t, (f y, F y) ‚àà u) :
  continuous f :=
continuous_iff_continuous_at.2 $ Œª x, continuous_at_of_locally_uniform_approx_of_continuous_at (L x)
lemma continuous_of_uniform_approx_of_continuous
  (L : ‚àÄ u ‚àà ùì§ Œ≤, ‚àÉ F, continuous F ‚àß ‚àÄ y, (f y, F y) ‚àà u) : continuous f :=
continuous_iff_continuous_on_univ.mpr $ continuous_on_of_uniform_approx_of_continuous_on $
  by simpa [continuous_iff_continuous_on_univ] using L
protected lemma tendsto_locally_uniformly_on.continuous_on
  (h : tendsto_locally_uniformly_on F f p s) (hc : ‚àÄ·∂† n in p, continuous_on (F n) s) [ne_bot p] :
  continuous_on f s :=
begin
  apply continuous_on_of_locally_uniform_approx_of_continuous_within_at (Œª x hx u hu, _),
  rcases h u hu x hx with ‚ü®t, ht, H‚ü©,
  rcases (hc.and H).exists with ‚ü®n, hFc, hF‚ü©,
  exact ‚ü®t, ht, ‚ü®F n, hFc.continuous_within_at hx, hF‚ü©‚ü©
end
protected lemma tendsto_uniformly_on.continuous_on (h : tendsto_uniformly_on F f p s)
  (hc : ‚àÄ·∂† n in p, continuous_on (F n) s) [ne_bot p] : continuous_on f s :=
h.tendsto_locally_uniformly_on.continuous_on hc
protected lemma tendsto_locally_uniformly.continuous (h : tendsto_locally_uniformly F f p)
  (hc : ‚àÄ·∂† n in p, continuous (F n)) [ne_bot p] : continuous f :=
continuous_iff_continuous_on_univ.mpr $ h.tendsto_locally_uniformly_on.continuous_on $
  hc.mono $ Œª n hn, hn.continuous_on
protected lemma tendsto_uniformly.continuous (h : tendsto_uniformly F f p)
  (hc : ‚àÄ·∂† n in p, continuous (F n)) [ne_bot p] : continuous f :=
h.tendsto_locally_uniformly.continuous hc
lemma tendsto_comp_of_locally_uniform_limit_within
  (h : continuous_within_at f s x) (hg : tendsto g p (ùìù[s] x))
  (hunif : ‚àÄ u ‚àà ùì§ Œ≤, ‚àÉ t ‚àà ùìù[s] x, ‚àÄ·∂† n in p, ‚àÄ y ‚àà t, (f y, F n y) ‚àà u) :
  tendsto (Œª n, F n (g n)) p (ùìù (f x)) :=
begin
  apply uniform.tendsto_nhds_right.2 (Œª u‚ÇÄ hu‚ÇÄ, _),
  obtain ‚ü®u‚ÇÅ, h‚ÇÅ, u‚ÇÅ‚ÇÄ‚ü© : ‚àÉ (u : set (Œ≤ √ó Œ≤)) (H : u ‚àà ùì§ Œ≤), comp_rel u u ‚äÜ u‚ÇÄ :=
    comp_mem_uniformity_sets hu‚ÇÄ,
  rcases hunif u‚ÇÅ h‚ÇÅ with ‚ü®s, sx, hs‚ü©,
  have A : ‚àÄ·∂† n in p, g n ‚àà s := hg sx,
  have B : ‚àÄ·∂† n in p, (f x, f (g n)) ‚àà u‚ÇÅ := hg (uniform.continuous_within_at_iff'_right.1 h h‚ÇÅ),
  refine ((hs.and A).and B).mono (Œª y hy, _),
  rcases hy with ‚ü®‚ü®H1, H2‚ü©, H3‚ü©,
  exact u‚ÇÅ‚ÇÄ (prod_mk_mem_comp_rel H3 (H1 _ H2))
end
lemma tendsto_comp_of_locally_uniform_limit (h : continuous_at f x) (hg : tendsto g p (ùìù x))
  (hunif : ‚àÄ u ‚àà ùì§ Œ≤, ‚àÉ t ‚àà ùìù x, ‚àÄ·∂† n in p, ‚àÄ y ‚àà t, (f y, F n y) ‚àà u) :
  tendsto (Œª n, F n (g n)) p (ùìù (f x)) :=
begin
  rw ‚Üê continuous_within_at_univ at h,
  rw ‚Üê nhds_within_univ at hunif hg,
  exact tendsto_comp_of_locally_uniform_limit_within h hg hunif
end
lemma tendsto_locally_uniformly_on.tendsto_comp (h : tendsto_locally_uniformly_on F f p s)
  (hf : continuous_within_at f s x) (hx : x ‚àà s) (hg : tendsto g p (ùìù[s] x)) :
  tendsto (Œª n, F n (g n)) p (ùìù (f x)) :=
tendsto_comp_of_locally_uniform_limit_within hf hg (Œª u hu, h u hu x hx)
lemma tendsto_uniformly_on.tendsto_comp (h : tendsto_uniformly_on F f p s)
  (hf : continuous_within_at f s x) (hg : tendsto g p (ùìù[s] x)) :
  tendsto (Œª n, F n (g n)) p (ùìù (f x)) :=
tendsto_comp_of_locally_uniform_limit_within hf hg (Œª u hu, ‚ü®s, self_mem_nhds_within, h u hu‚ü©)
lemma tendsto_locally_uniformly.tendsto_comp (h : tendsto_locally_uniformly F f p)
  (hf : continuous_at f x) (hg : tendsto g p (ùìù x)) : tendsto (Œª n, F n (g n)) p (ùìù (f x)) :=
tendsto_comp_of_locally_uniform_limit hf hg (Œª u hu, h u hu x)
lemma tendsto_uniformly.tendsto_comp (h : tendsto_uniformly F f p)
  (hf : continuous_at f x) (hg : tendsto g p (ùìù x)) : tendsto (Œª n, F n (g n)) p (ùìù (f x)) :=
h.tendsto_locally_uniformly.tendsto_comp hf hg
