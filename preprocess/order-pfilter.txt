import order.ideal
namespace order
variables {P : Type*}
structure pfilter (P) [preorder P] :=
(dual : ideal Pᵒᵈ)
def is_pfilter [preorder P] (F : set P) : Prop :=
@is_ideal Pᵒᵈ _ F
lemma is_pfilter.of_def [preorder P] {F : set P} (nonempty : F.nonempty)
  (directed : directed_on (≥) F) (mem_of_le : ∀ {x y : P}, x ≤ y → x ∈ F → y ∈ F) : is_pfilter F :=
⟨λ _ _ _ _, mem_of_le ‹_› ‹_›,  nonempty, directed⟩
def is_pfilter.to_pfilter [preorder P] {F : set P} (h : is_pfilter F) : pfilter P :=
⟨h.to_ideal⟩
namespace pfilter
section preorder
variables [preorder P] {x y : P} (F s t : pfilter P)
instance [inhabited P] : inhabited (pfilter P) := ⟨⟨default⟩⟩
instance : has_coe (pfilter P) (set P) := ⟨λ F, F.dual.carrier⟩
instance : has_mem P (pfilter P) := ⟨λ x F, x ∈ (F : set P)⟩
@[simp] lemma mem_coe : x ∈ (F : set P) ↔ x ∈ F := iff_of_eq rfl
lemma is_pfilter : is_pfilter (F : set P) :=
F.dual.is_ideal
lemma nonempty : (F : set P).nonempty := F.dual.nonempty
lemma directed : directed_on (≥) (F : set P) := F.dual.directed
lemma mem_of_le {F : pfilter P} : x ≤ y → x ∈ F → y ∈ F := λ h, F.dual.lower h
@[ext] lemma ext (h : (s : set P) = t) : s = t :=
by { cases s, cases t, exact congr_arg _ (ideal.ext h) }
instance : partial_order (pfilter P) := partial_order.lift coe ext
@[trans] lemma mem_of_mem_of_le {F G : pfilter P} : x ∈ F → F ≤ G → x ∈ G :=
ideal.mem_of_mem_of_le
def principal (p : P) : pfilter P := ⟨ideal.principal p⟩
@[simp] lemma mem_def (x : P) (I : ideal Pᵒᵈ) :
  x ∈ (⟨I⟩ : pfilter P) ↔ order_dual.to_dual x ∈ I :=
iff.rfl
@[simp] lemma principal_le_iff {F : pfilter P} : principal x ≤ F ↔ x ∈ F :=
ideal.principal_le_iff
@[simp] lemma mem_principal : x ∈ principal y ↔ y ≤ x :=
@[simp] lemma top_mem : ⊤ ∈ F := ideal.bot_mem _
instance : order_bot (pfilter P) :=
{ bot := ⟨⊥⟩,
  bot_le := λ F, (bot_le : ⊥ ≤ F.dual) }
end order_top
instance {P} [preorder P] [order_bot P] : order_top (pfilter P) :=
{ top := ⟨⊤⟩,
  le_top := λ F, (le_top : F.dual ≤ ⊤) }
section semilattice_inf
variables [semilattice_inf P] {x y : P} {F : pfilter P}
lemma inf_mem (hx : x ∈ F) (hy : y ∈ F) : x ⊓ y ∈ F := ideal.sup_mem hx hy
@[simp] lemma inf_mem_iff : x ⊓ y ∈ F ↔ x ∈ F ∧ y ∈ F :=
ideal.sup_mem_iff
end semilattice_inf
section complete_semilattice_Inf
variables [complete_semilattice_Inf P] {F : pfilter P}
lemma Inf_gc : galois_connection (λ x, order_dual.to_dual (principal x))
  (λ F, Inf (order_dual.of_dual F : pfilter P)) :=
λ x F, by { simp, refl }
def Inf_gi : galois_coinsertion (λ x, order_dual.to_dual (principal x))
  (λ F, Inf (order_dual.of_dual F : pfilter P)) :=
{ choice := λ F _, Inf (id F : pfilter P),
  gc := Inf_gc,
  u_l_le := λ s, Inf_le $ mem_principal.2 $ le_refl s,
  choice_eq := λ _ _, rfl }
end complete_semilattice_Inf
end pfilter
end order
