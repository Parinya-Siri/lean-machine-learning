import category_theory.limits.shapes.terminal
import category_theory.punit
import category_theory.structured_arrow
noncomputable theory
namespace category_theory
open limits
universes v v‚ÇÅ v‚ÇÇ v‚ÇÉ u‚ÇÅ u‚ÇÇ u‚ÇÉ
variables {S : Type u‚ÇÅ} {L : Type u‚ÇÇ} {D : Type u‚ÇÉ}
variables [category.{v‚ÇÅ} S] [category.{v‚ÇÇ} L] [category.{v‚ÇÉ} D]
variables (Œπ : S ‚•§ L)
namespace Ran
local attribute [simp] structured_arrow.proj
abbreviation diagram (F : S ‚•§ D) (x : L) : structured_arrow x Œπ ‚•§ D :=
  structured_arrow.proj x Œπ ‚ãô F
variable {Œπ}
@[simp]
def cone {F : S ‚•§ D} {G : L ‚•§ D} (x : L) (f : Œπ ‚ãô G ‚ü∂ F) :
  cone (diagram Œπ F x) :=
{ X := G.obj x,
  œÄ :=
  { app := Œª i, G.map i.hom ‚â´ f.app i.right,
    naturality' := begin
      rintro ‚ü®‚ü®il‚ü©, ir, i‚ü© ‚ü®‚ü®jl‚ü©, jr, j‚ü© ‚ü®‚ü®‚ü®fl‚ü©‚ü©, fr, ff‚ü©,
      dsimp at *,
      simp only [category.id_comp, category.assoc] at *,
      rw [ff],
      have := f.naturality,
      tidy,
    end } }
variable (Œπ)
@[simps]
def loc (F : S ‚•§ D) [‚àÄ x, has_limit (diagram Œπ F x)] : L ‚•§ D :=
{ obj := Œª x, limit (diagram Œπ F x),
  map := Œª x y f, limit.pre (diagram _ _ _) (structured_arrow.map f : structured_arrow _ Œπ ‚•§ _),
  map_id' := begin
    intro l,
    ext j,
    simp only [category.id_comp, limit.pre_œÄ],
    congr' 1,
    simp,
  end,
  map_comp' := begin
    intros x y z f g,
    ext j,
    erw [limit.pre_pre, limit.pre_œÄ, limit.pre_œÄ],
    congr' 1,
    tidy,
  end }
@[simps]
def equiv (F : S ‚•§ D) [‚àÄ x, has_limit (diagram Œπ F x)] (G : L ‚•§ D) :
  (G ‚ü∂ loc Œπ F) ‚âÉ (((whiskering_left _ _ _).obj Œπ).obj G ‚ü∂ F) :=
{ to_fun := Œª f,
  { app := Œª x, f.app _ ‚â´ limit.œÄ (diagram Œπ F (Œπ.obj x)) (structured_arrow.mk (ùüô _)),
  naturality' := begin
    intros x y ff,
    dsimp only [whiskering_left],
    simp only [functor.comp_map, nat_trans.naturality_assoc, loc_map, category.assoc],
    congr' 1,
    erw limit.pre_œÄ,
    change _ = _ ‚â´ (diagram Œπ F (Œπ.obj x)).map (structured_arrow.hom_mk _ _),
    rw limit.w,
    tidy,
  end },
  inv_fun := Œª f,
  { app := Œª x, limit.lift (diagram Œπ F x) (cone _ f),
    naturality' := begin
      intros x y ff,
      ext j,
      erw [limit.lift_pre, limit.lift_œÄ, category.assoc, limit.lift_œÄ (cone _ f) j],
      tidy,
    end },
  left_inv := begin
    intro x,
    ext k j,
    dsimp only [cone],
    rw limit.lift_œÄ,
    simp only [nat_trans.naturality_assoc, loc_map],
    erw limit.pre_œÄ,
    congr,
    rcases j with ‚ü®‚ü®‚ü©, _, _‚ü©,
    tidy,
  end,
  right_inv := by tidy }
end Ran
@[simps]
def Ran [‚àÄ X, has_limits_of_shape (structured_arrow X Œπ) D] : (S ‚•§ D) ‚•§ L ‚•§ D :=
adjunction.right_adjoint_of_equiv (Œª F G, (Ran.equiv Œπ G F).symm) (by tidy)
namespace Ran
variable (D)
def adjunction [‚àÄ X, has_limits_of_shape (structured_arrow X Œπ) D] :
  (whiskering_left _ _ D).obj Œπ ‚ä£ Ran Œπ :=
adjunction.adjunction_of_equiv_right _ _
lemma reflective [full Œπ] [faithful Œπ] [‚àÄ X, has_limits_of_shape (structured_arrow X Œπ) D] :
  is_iso (adjunction D Œπ).counit :=
begin
  apply nat_iso.is_iso_of_is_iso_app _,
  intros F,
  apply nat_iso.is_iso_of_is_iso_app _,
  intros X,
  dsimp [adjunction],
  simp only [category.id_comp],
  exact is_iso.of_iso ((limit.is_limit _).cone_point_unique_up_to_iso
    (limit_of_diagram_initial structured_arrow.mk_id_initial _)),
end
end Ran
namespace Lan
local attribute [simp] costructured_arrow.proj
abbreviation diagram (F : S ‚•§ D) (x : L) : costructured_arrow Œπ x ‚•§ D :=
  costructured_arrow.proj Œπ x ‚ãô F
variable {Œπ}
@[simp]
def cocone {F : S ‚•§ D} {G : L ‚•§ D} (x : L) (f : F ‚ü∂ Œπ ‚ãô G) :
  cocone (diagram Œπ F x) :=
{ X := G.obj x,
  Œπ :=
  { app := Œª i, f.app i.left ‚â´ G.map i.hom,
    naturality' := begin
      rintro ‚ü®ir, ‚ü®il‚ü©, i‚ü© ‚ü®jl, ‚ü®jr‚ü©, j‚ü© ‚ü®fl, ‚ü®‚ü®fl‚ü©‚ü©, ff‚ü©,
      dsimp at *,
      simp only [functor.comp_map, category.comp_id, nat_trans.naturality_assoc],
      rw [‚Üê G.map_comp, ff],
      tidy,
    end } }
variable (Œπ)
@[simps]
def loc (F : S ‚•§ D) [I : ‚àÄ x, has_colimit (diagram Œπ F x)] : L ‚•§ D :=
{ obj := Œª x, colimit (diagram Œπ F x),
  map := Œª x y f,
    colimit.pre (diagram _ _ _) (costructured_arrow.map f : costructured_arrow Œπ _ ‚•§ _),
  map_id' := begin
    intro l,
    ext j,
    erw [colimit.Œπ_pre, category.comp_id],
    congr' 1,
    simp,
  end,
  map_comp' := begin
    intros x y z f g,
    ext j,
    let ff : costructured_arrow Œπ _ ‚•§ _ := costructured_arrow.map f,
    let gg : costructured_arrow Œπ _ ‚•§ _ := costructured_arrow.map g,
    let dd := diagram Œπ F z,
@[simps]
def equiv (F : S ‚•§ D) [I : ‚àÄ x, has_colimit (diagram Œπ F x)] (G : L ‚•§ D) :
  (loc Œπ F ‚ü∂ G) ‚âÉ (F ‚ü∂ ((whiskering_left _ _ _).obj Œπ).obj G) :=
{ to_fun := Œª f,
  { app := Œª x,
@[simps]
def Lan [‚àÄ X, has_colimits_of_shape (costructured_arrow Œπ X) D] : (S ‚•§ D) ‚•§ L ‚•§ D :=
adjunction.left_adjoint_of_equiv (Œª F G, Lan.equiv Œπ F G) (by tidy)
namespace Lan
variable (D)
def adjunction [‚àÄ X, has_colimits_of_shape (costructured_arrow Œπ X) D] :
  Lan Œπ ‚ä£ (whiskering_left _ _ D).obj Œπ :=
adjunction.adjunction_of_equiv_left _ _
lemma coreflective [full Œπ] [faithful Œπ] [‚àÄ X, has_colimits_of_shape (costructured_arrow Œπ X) D] :
  is_iso (adjunction D Œπ).unit :=
begin
  apply nat_iso.is_iso_of_is_iso_app _,
  intros F,
  apply nat_iso.is_iso_of_is_iso_app _,
  intros X,
  dsimp [adjunction],
  simp only [category.comp_id],
  exact is_iso.of_iso ((colimit.is_colimit _).cocone_point_unique_up_to_iso
    (colimit_of_diagram_terminal costructured_arrow.mk_id_terminal _)).symm,
end
end Lan
end category_theory
