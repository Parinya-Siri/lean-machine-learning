import category_theory.limits.shapes.products
import set_theory.cardinal.basic
namespace category_theory
open category limits
open_locale cardinal
universe u
variables {C : Type u} [small_category C] [has_products.{u} C]
instance {X Y : C} : subsingleton (X ⟶ Y) :=
⟨λ r s,
begin
  classical,
  by_contra r_ne_s,
  have z : (2 : cardinal) ≤ #(X ⟶ Y),
  { rw cardinal.two_le_iff,
    exact ⟨_, _, r_ne_s⟩ },
  let md := Σ (Z W : C), Z ⟶ W,
  let α := #md,
  apply not_le_of_lt (cardinal.cantor α),
  let yp : C := ∏ (λ (f : md), Y),
  transitivity (#(X ⟶ yp)),
  { apply le_trans (cardinal.power_le_power_right z),
    rw cardinal.power_def,
    apply le_of_eq,
    rw cardinal.eq,
    refine ⟨⟨pi.lift, λ f k, f ≫ pi.π _ k, _, _⟩⟩,
    { intros f,
      ext k,
      simp },
    { intros f,
      ext ⟨j⟩,
      simp } },
  { apply cardinal.mk_le_of_injective _,
    { intro f,
      exact ⟨_, _, f⟩ },
    { rintro f g k,
      cases k,
      refl } },
end⟩
end category_theory
