namespace widget_override
open widget
open tagged_format
open widget.html widget.attr
namespace interactive_expression
meta instance : has_mem expr.coord expr.address := list.has_mem
meta inductive sf : Type
| tag_expr : expr.address ‚Üí expr ‚Üí sf ‚Üí sf
| compose : sf ‚Üí  sf ‚Üí  sf
| of_string : string ‚Üí  sf
| highlight : format.color ‚Üí sf ‚Üí sf
| block : ‚Ñï ‚Üí sf ‚Üí sf
meta def sf.repr : sf ‚Üí format
| (sf.tag_expr addr e a) := format.group $ format.nest 2 $
  "(tag_expr " ++ to_fmt addr ++ format.line ++
    "`(" ++ to_fmt e ++ ")" ++ format.line ++ a.repr ++ ")"
| (sf.compose a b) := a.repr ++ format.line ++ b.repr
| (sf.of_string s) := repr s
| (sf.block i a) := "(block " ++ to_fmt i ++ format.line ++ a.repr ++ ")"
| (sf.highlight c a) := "(highlight " ++ c.to_string ++ a.repr ++ ")"
meta instance : has_to_format sf := ‚ü®sf.repr‚ü©
meta instance : has_to_string sf := ‚ü®Œª s, s.repr.to_string‚ü©
meta instance : has_repr sf := ‚ü®Œª s, s.repr.to_string‚ü©
meta def sf.of_eformat : eformat ‚Üí sf
| (tag ‚ü®ea,e‚ü© m) := sf.tag_expr ea e $ sf.of_eformat m
| (group m) := sf.block 0 $ sf.of_eformat m
| (nest i m) := sf.block i $ sf.of_eformat m
| (highlight c m) := sf.highlight c $ sf.of_eformat m
| (of_format f) := sf.of_string $ format.to_string f
| (compose x y) := sf.compose (sf.of_eformat x) (sf.of_eformat y)
meta def sf.flatten : sf ‚Üí sf
| (sf.tag_expr ea e m) := (sf.tag_expr ea e $ sf.flatten m)
| (sf.compose x y) :=
  match (sf.flatten x), (sf.flatten y) with
  | (sf.of_string sx), (sf.of_string sy) := sf.of_string (sx ++ sy)
  | (sf.of_string sx), (sf.compose (sf.of_string sy) z) := sf.compose (sf.of_string (sx ++ sy)) z
  | (sf.compose x (sf.of_string sy)), (sf.of_string sz) := sf.compose x (sf.of_string (sy ++ sz))
  | (sf.compose x (sf.of_string sy1)), (sf.compose (sf.of_string sy2) z) :=
    sf.compose x (sf.compose (sf.of_string (sy1 ++ sy2)) z)
  | x, y := sf.compose x y
  end
meta def sf.elim_part_apps (s : sf) : sf :=
elim_part_apps s []
meta inductive action (Œ≥ : Type)
| on_mouse_enter : subexpr ‚Üí action
| on_mouse_leave_all : action
| on_click : subexpr ‚Üí action
| on_tooltip_action : Œ≥ ‚Üí action
| on_close_tooltip : action
| effect : widget.effect ‚Üí action
meta def goto_def_button {Œ≥} : expr ‚Üí tactic (list (html (action Œ≥)))
| e := (do
    (expr.const n _) ‚Üê pure $ expr.get_app_fn e,
    env ‚Üê tactic.get_env,
    let file := environment.decl_olean env n,
    pos ‚Üê environment.decl_pos env n,
    pure $ [h "button" [
      cn "pointer ba br3 mr1",
      on_click (Œª _, action.effect $ widget.effect.reveal_position file pos),
      attr.val "title" "go to definition"] ["‚Ü™"]]
  ) <|> pure []
meta def get_block_attrs {Œ≥}: sf ‚Üí tactic (sf √ó list (attr Œ≥))
| (sf.block i a) := do
  let s : attr (Œ≥) := style [
    ("display", "inline-block"),
    ("padding-left", "1ch"),
    ("text-indent", "-1ch"),
    ("white-space", "pre-wrap"),
    ("vertical-align", "top")
  ],
  (a,rest) ‚Üê get_block_attrs a,
  pure (a, s :: rest)
| (sf.highlight c a) := do
  (a, rest) ‚Üê get_block_attrs a,
  pure (a, (cn c.to_string) :: rest)
| a := pure (a,[])
meta def view {Œ≥} (tooltip_component : tc subexpr (action Œ≥)) (click_address : option expr.address)
  (select_address : option expr.address) :
  subexpr ‚Üí sf ‚Üí tactic (list (html (action Œ≥)))
| ‚ü®ce, current_address‚ü© (sf.tag_expr ea e m) := do
  let new_address := current_address ++ ea,
  let select_attrs : list (attr (action Œ≥)) :=
    if some new_address = select_address then [className "highlight"] else [],
  click_attrs  : list (attr (action Œ≥)) ‚Üê
    if some new_address = click_address then do
      content ‚Üê tc.to_html tooltip_component (e, new_address),
      efmt : string ‚Üê format.to_string <$> tactic.pp e,
      gd_btn ‚Üê goto_def_button e,
      pure [tooltip $ h "div" [] [
          h "div" [cn "fr"] (gd_btn ++ [
            h "button" [cn "pointer ba br3 mr1", on_click (Œª _, action.effect $
              widget.effect.copy_text efmt), attr.val "title" "copy expression to clipboard"] ["üìã"],
            h "button" [cn "pointer ba br3", on_click (Œª _, action.on_close_tooltip),
              attr.val "title" "close"] ["√ó"]
          ]),
          content
      ]]
    else pure [],
  (m, block_attrs) ‚Üê get_block_attrs m,
  let as := [className "expr-boundary", key (ea)] ++ select_attrs ++ click_attrs ++ block_attrs,
  inner ‚Üê view (e,new_address) m,
  pure [h "span" as inner]
| ca (sf.compose x y) := pure (++) <*> view ca x <*> view ca y
| ca (sf.of_string s) := pure
  [h "span" [
    on_mouse_enter (Œª _, action.on_mouse_enter ca),
    on_click (Œª _, action.on_click ca),
    key s
  ] [html.of_string s]]
| ca b@(sf.block _ _) := do
  (a, attrs) ‚Üê get_block_attrs b,
  inner ‚Üê view ca a,
  pure [h "span" attrs inner]
| ca b@(sf.highlight _ _) := do
  (a, attrs) ‚Üê get_block_attrs b,
  inner ‚Üê view ca a,
  pure [h "span" attrs inner]
meta def mk {Œ≥} (tooltip : tc subexpr Œ≥) : tc expr Œ≥ :=
let tooltip_comp :=
   component.with_should_update (Œª (x y : tactic_state √ó expr √ó expr.address), x.2.2 ‚â† y.2.2)
   $ component.map_action (action.on_tooltip_action) tooltip in
component.filter_map_action
  (Œª _ (a : Œ≥ ‚äï widget.effect), sum.cases_on a some (Œª _, none))
$ component.with_effects (Œª _ (a : Œ≥ ‚äï widget.effect),
  match a with
  | (sum.inl g) := []
  | (sum.inr s) := [s]
  end
)
$ tc.mk_simple
  (action Œ≥)
  (option subexpr √ó option subexpr)
  (Œª e, pure $ (none, none))
  (Œª e ‚ü®ca, sa‚ü© act, pure $
    match act with
    | (action.on_mouse_enter ‚ü®e, ea‚ü©) := ((ca, some (e, ea)), none)
    | (action.on_mouse_leave_all)     := ((ca, none), none)
    | (action.on_click ‚ü®e, ea‚ü©)       :=
      if some (e,ea) = ca then ((none, sa), none) else ((some (e, ea), sa), none)
    | (action.on_tooltip_action g)    := ((none, sa), some $ sum.inl g)
    | (action.on_close_tooltip)       := ((none, sa), none)
    | (action.effect e)               := ((ca,sa), some $ sum.inr $ e)
    end
  )
  (Œª e ‚ü®ca, sa‚ü©, do
    m ‚Üê sf.of_eformat <$> tactic.pp_tagged e,
    let m := m.elim_part_apps,
    let m := m.flatten,
meta def implicit_arg_list (tooltip : tc subexpr empty) (e : expr) : tactic $ html empty := do
  fn ‚Üê (mk tooltip) $ expr.get_app_fn e,
  args ‚Üê list.mmap (mk tooltip) $ expr.get_app_args e,
  pure $ h "div" [style [("display", "flex"), ("flexWrap", "wrap"), ("alignItems", "baseline")]]
    ( (h "span" [className "bg-blue br3 ma1 ph2 white"] [fn]) ::
      list.map (Œª a, h "span" [className "bg-gray br3 ma1 ph2 white"] [a]) args
    )
meta def type_tooltip : tc subexpr empty :=
tc.stateless (Œª ‚ü®e,ea‚ü©, do
    y ‚Üê tactic.infer_type e,
    y_comp ‚Üê mk type_tooltip y,
    implicit_args ‚Üê implicit_arg_list type_tooltip e,
    pure [
        h "div" [style [
            ("minWidth", "8rem"),
@[derive decidable_eq]
meta inductive filter_type
| none
| no_instances
| only_props
meta def filter_local : filter_type ‚Üí expr ‚Üí tactic bool
| (filter_type.none) e := pure tt
| (filter_type.no_instances) e := do
  t ‚Üê tactic.infer_type e,
  bnot <$> tactic.is_class t
| (filter_type.only_props) e := do
  t ‚Üê tactic.infer_type e,
  tactic.is_prop t
meta def filter_component : component filter_type filter_type :=
component.stateless (Œª lf,
  [ h "label" [] ["filter: "],
    select [
      ‚ü®filter_type.none, "0", ["no filter"]‚ü©,
      ‚ü®filter_type.no_instances, "1", ["no instances"]‚ü©,
      ‚ü®filter_type.only_props, "2", ["only props"]‚ü©
    ] lf
  ]
)
meta def html.of_name {Œ± : Type} : name ‚Üí html Œ±
| n := html.of_string $ name.to_string n
open tactic
meta def show_type_component : tc expr empty :=
tc.stateless (Œª x, do
  y ‚Üê infer_type x,
  y_comp ‚Üê interactive_expression.mk interactive_expression.type_tooltip $ y,
  pure y_comp
)
@[derive decidable_eq]
meta structure local_collection :=
(key : string)
(locals : list expr)
(type : expr)
(value : option expr)
meta def to_local_collection (l : expr) : tactic local_collection :=
tactic.unsafe.type_context.run $ do
lctx ‚Üê tactic.unsafe.type_context.get_local_context,
some ldecl ‚Üê pure $ lctx.get_local_decl l.local_uniq_name,
pure
{ key := l.local_uniq_name.repr,
  locals := [l],
  type := ldecl.type,
  value := ldecl.value }
meta def group_local_collection : list local_collection ‚Üí list local_collection
| (a :: b :: rest) :=
  if a.type = b.type ‚àß a.value = b.value then
    group_local_collection $
      { locals := a.locals ++ b.locals, ..a } :: rest
  else
    a :: group_local_collection (b :: rest)
| ls := ls
meta def tactic_view_goal {Œ≥} (local_c : tc local_collection Œ≥) (target_c : tc expr Œ≥) :
  tc filter_type Œ≥ :=
tc.stateless $ Œª ft, do
  g@(expr.mvar u_n pp_n y) ‚Üê main_goal,
  t ‚Üê get_tag g,
  let case_tag : list (html Œ≥) :=
    match interactive.case_tag.parse t with
    | some t :=
      [h "li" [key "_case"] $ [h "span" [cn "goal-case b"] ["case"]] ++
        (t.case_names.bind $ Œª n, [" ", n])]
    | none := []
    end,
  lcs ‚Üê local_context,
  lcs ‚Üê list.mfilter (filter_local ft) lcs,
  lcs ‚Üê lcs.mmap $ to_local_collection,
  let lcs := group_local_collection lcs,
  lchs ‚Üê lcs.mmap (Œª lc, do
    lh ‚Üê local_c lc,
    let ns : list (html Œ≥) := lc.locals.map $ Œª n,
      h "span" [cn "goal-hyp b pr2", key n.local_uniq_name] [html.of_name n.local_pp_name],
    pure $ h "li" [key lc.key] (ns ++ [": ", h "span" [cn "goal-hyp-type", key "type"] [lh]])),
  t_comp ‚Üê target_c g,
  pure $ h "ul" [key g.hash, className "list pl0 font-code"] $ case_tag ++ lchs ++ [
    h "li" [key u_n] [
      h "span" [cn "goal-vdash b"] ["‚ä¢ "],
      t_comp
  ]]
meta inductive tactic_view_action (Œ≥ : Type)
| out (a:Œ≥): tactic_view_action
| filter (f: filter_type): tactic_view_action
meta def goals_accomplished_message {Œ±} : html Œ± :=
h "div" [cn "f5"] ["goals accomplished üéâ"]
meta def tactic_view_component {Œ≥} (local_c : tc local_collection Œ≥) (target_c : tc expr Œ≥) :
  tc unit Œ≥ :=
tc.mk_simple
  (tactic_view_action Œ≥)
  (filter_type)
  (Œª _, pure $ filter_type.none)
  (Œª ‚ü®‚ü© ft a, match a with
              | (tactic_view_action.out a) := pure (ft, some a)
              | (tactic_view_action.filter ft) := pure (ft, none)
              end)
  (Œª ‚ü®‚ü© ft, do
    gs ‚Üê get_goals,
    hs ‚Üê gs.mmap (Œª g, do set_goals [g], flip tc.to_html ft $ tactic_view_goal local_c target_c),
    set_goals gs,
    let goal_message : html Œ≥ :=
      if gs.length = 0 then
        goals_accomplished_message
      else if gs.length = 1 then
        "1 goal"
      else
        html.of_string $ to_string gs.length ++ " goals",
    let goal_message : html Œ≥ := h "strong" [cn "goal-goals"] [goal_message],
    let goals : html Œ≥ := h "ul" [className "list pl0"]
        $ list.map_with_index (Œª i x,
          h "li" [className $ "lh-copy mt2", key i] [x])
        $ (goal_message :: hs),
    pure [
      h "div" [className "fr"]
        [html.of_component ft $ component.map_action tactic_view_action.filter filter_component],
      html.map_action tactic_view_action.out goals
    ])
meta def tactic_view_term_goal {Œ≥} (local_c : tc local_collection Œ≥) (target_c : tc expr Œ≥) :
  tc unit Œ≥ :=
tc.stateless $ Œª _, do
  goal ‚Üê flip tc.to_html (filter_type.none) $ tactic_view_goal local_c target_c,
  pure [h "ul" [className "list pl0"] [
    h "li" [className "lh-copy"] [h "strong" [cn "goal-goals"] ["expected type:"]],
    h "li" [className "lh-copy"] [goal]]]
meta def show_local_collection_component : tc local_collection empty :=
tc.stateless (Œª lc, do
  (l::_) ‚Üê pure lc.locals,
  c ‚Üê show_type_component l,
  match lc.value with
  | some v := do
    v ‚Üê interactive_expression.mk interactive_expression.type_tooltip v,
    pure [c, " := ", v]
  | none := pure [c]
  end)
meta def tactic_render : tc unit empty :=
component.ignore_action $ tactic_view_component show_local_collection_component show_type_component
meta def tactic_state_widget : component tactic_state empty :=
tc.to_component tactic_render
meta def term_goal_widget : component tactic_state empty :=
(tactic_view_term_goal show_local_collection_component show_type_component).to_component
end widget_override
attribute [vm_override widget_override.term_goal_widget] widget.term_goal_widget
attribute [vm_override widget_override.tactic_state_widget] widget.tactic_state_widget
