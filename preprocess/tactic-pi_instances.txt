import order.basic
namespace tactic
open tactic.interactive
meta def pi_instance_derive_field : tactic unit :=
do b ← target >>= is_prop,
   field ← get_current_field,
   if b then do
     vs ← introv [] <|> pure [],
     hs ← intros <|> pure [],
     reset_instance_cache,
     xn ← get_unused_name,
     try (() <$ ext1 [rcases_patt.one xn] <|> () <$ intro xn),
     xv ← option.iget <$> try_core (get_local xn),
     applyc field,
     hs.mmap (λ h, try $
       () <$ (to_expr ``(congr_fun %%h %%xv) >>= apply) <|>
       () <$ apply (h xv) <|>
       () <$ (to_expr ``(set.mem_image_of_mem _ %%h) >>= apply) <|>
       () <$ solve_by_elim),
     return ()
   else focus1 $ do
     expl_arity ← mk_const field >>= get_expl_arity,
     xs ← (list.iota expl_arity).mmap $ λ _, intro1,
     x ← intro1,
     applyc field,
     xs.mmap' (λ h, try $
      () <$ (apply (h x) <|> apply h) <|>
      refine ``(set.image ($ %%x) %%h)) <|> fail "args",
     return ()
meta def pi_instance : tactic unit :=
refine_struct ``( { ..pi.partial_order, .. } );
  propagate_tags (try $ pi_instance_derive_field >> done)
run_cmd add_interactive [`pi_instance]
add_tactic_doc
{ name                     := "pi_instance",
  category                 := doc_category.tactic,
  decl_names               := [`tactic.interactive.pi_instance],
  tags                     := ["type class"] }
end tactic
