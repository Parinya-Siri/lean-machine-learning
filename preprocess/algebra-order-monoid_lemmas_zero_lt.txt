import algebra.covariant_and_contravariant
import algebra.group_with_zero.defs
universe u
variable {α : Type u}
local notation `α>0` := {x : α // 0 < x}
namespace zero_lt
section abbreviations_strict_mono
variables (X : Type u) [has_mul X] [has_zero X] [has_lt X]
abbreviation pos_mul_strict_mono : Prop :=
covariant_class {x : X // 0 < x} X (λ x y, x * y) (<)
abbreviation mul_pos_strict_mono : Prop :=
covariant_class {x : X // 0 < x} X (λ x y, y * x) (<)
abbreviation pos_mul_reflect_lt : Prop :=
contravariant_class {x : X // 0 < x} X (λ x y, x * y) (<)
abbreviation mul_pos_reflect_lt : Prop :=
contravariant_class {x : X // 0 < x} X (λ x y, y * x) (<)
end abbreviations_strict_mono
section abbreviations_mono
variables (X : Type*) [has_mul X] [has_zero X] [has_lt X] [has_le X]
abbreviation pos_mul_mono : Prop :=
covariant_class {x : X // 0 < x} X (λ x y, x * y) (≤)
abbreviation mul_pos_mono : Prop :=
covariant_class {x : X // 0 < x} X (λ x y, y * x) (≤)
abbreviation pos_mul_mono_rev : Prop :=
contravariant_class {x : X // 0 < x} X (λ x y, x * y) (≤)
abbreviation mul_pos_mono_rev : Prop :=
contravariant_class {x : X // 0 < x} X (λ x y, y * x) (≤)
end abbreviations_mono
variables {a b c d : α}
section has_mul_zero
variables [has_mul α] [has_zero α]
section has_lt
variables [has_lt α]
lemma mul_lt_mul_left' [pos_mul_strict_mono α]
  (bc : b < c) (a0 : 0 < a) :
  a * b < a * c :=
@covariant_class.elim α>0 α (λ x y, x * y) (<) _ ⟨a, a0⟩ _ _ bc
lemma mul_lt_mul_right' [mul_pos_strict_mono α]
  (bc : b < c) (a0 : 0 < a) :
  b * a < c * a :=
@covariant_class.elim α>0 α (λ x y, y * x) (<) _ ⟨a, a0⟩ _ _ bc
lemma left.mul_pos [pos_mul_strict_mono α]
  (ha : 0 < a) (hb : 0 < b) :
  0 < a * b :=
have h : a * 0 < a * b, from mul_lt_mul_left' hb ha,
by rwa [mul_zero] at h
lemma mul_neg_of_pos_of_neg [pos_mul_strict_mono α]
  (ha : 0 < a) (hb : b < 0) :
  a * b < 0 :=
have h : a * b < a * 0, from mul_lt_mul_left' hb ha,
by rwa [mul_zero] at h
lemma right.mul_pos [mul_pos_strict_mono α]
  (ha : 0 < a) (hb : 0 < b) :
  0 < a * b :=
have h : 0 * b < a * b, from mul_lt_mul_right' ha hb,
by rwa [zero_mul] at h
lemma mul_neg_of_neg_of_pos [mul_pos_strict_mono α]
  (ha : a < 0) (hb : 0 < b) :
  a * b < 0 :=
have h : a * b < 0 * b, from mul_lt_mul_right' ha hb,
by rwa [zero_mul] at h
end preorder
section partial_order
variables [partial_order α]
lemma mul_le_mul_left [pos_mul_mono α]
  (bc : b ≤ c) (a0 : 0 ≤ a) :
  a * b ≤ a * c :=
a0.lt_or_eq.elim (mul_le_mul_left' bc) (λ h, by simp only [← h, zero_mul])
lemma mul_le_mul_right [mul_pos_mono α]
  (bc : b ≤ c) (a0 : 0 ≤ a) :
  b * a ≤ c * a :=
a0.lt_or_eq.elim (mul_le_mul_right' bc) (λ h, by simp only [← h, mul_zero])
lemma left.mul_nonneg [pos_mul_mono α]
  (ha : 0 ≤ a) (hb : 0 ≤ b) :
  0 ≤ a * b :=
have h : a * 0 ≤ a * b, from mul_le_mul_left hb ha,
by rwa [mul_zero] at h
lemma mul_nonpos_of_nonneg_of_nonpos [pos_mul_mono α]
  (ha : 0 ≤ a) (hb : b ≤ 0) :
  a * b ≤ 0 :=
have h : a * b ≤ a * 0, from mul_le_mul_left hb ha,
by rwa [mul_zero] at h
lemma right.mul_nonneg [mul_pos_mono α]
  (ha : 0 ≤ a) (hb : 0 ≤ b) :
  0 ≤ a * b :=
have h : 0 * b ≤ a * b, from mul_le_mul_right ha hb,
by rwa [zero_mul] at h
lemma mul_nonpos_of_nonpos_of_nonneg [mul_pos_mono α]
  (ha : a ≤ 0) (hb : 0 ≤ b) :
  a * b ≤ 0 :=
have h : a * b ≤ 0 * b, from mul_le_mul_right ha hb,
by rwa [zero_mul] at h
lemma lt_of_mul_lt_mul_left [pos_mul_reflect_lt α]
  (bc : a * b < a * c) (a0 : 0 ≤ a) :
  b < c :=
begin
  by_cases a₀ : a = 0,
  { exact (lt_irrefl (0 : α) (by simpa only [a₀, zero_mul] using bc)).elim },
  { exact lt_of_mul_lt_mul_left' bc ((ne.symm a₀).le_iff_lt.mp a0) }
end
lemma pos_of_mul_pos_left [pos_mul_reflect_lt α] (h : 0 < a * b) (ha : 0 ≤ a) :
  0 < b :=
lt_of_mul_lt_mul_left ((mul_zero a).symm ▸ h : a * 0 < a * b) ha
lemma lt_of_mul_lt_mul_right [mul_pos_reflect_lt α]
  (bc : b * a < c * a) (a0 : 0 ≤ a) :
  b < c :=
begin
  by_cases a₀ : a = 0,
  { exact (lt_irrefl (0 : α) (by simpa only [a₀, mul_zero] using bc)).elim },
  { exact lt_of_mul_lt_mul_right' bc ((ne.symm a₀).le_iff_lt.mp a0) }
end
lemma pos_of_mul_pos_right [mul_pos_reflect_lt α] (h : 0 < a * b) (hb : 0 ≤ b) :
  0 < a :=
lt_of_mul_lt_mul_right ((zero_mul b).symm ▸ h : 0 * b < a * b) hb
lemma pos_iff_pos_of_mul_pos [pos_mul_reflect_lt α] [mul_pos_reflect_lt α] (hab : 0 < a * b) :
  0 < a ↔ 0 < b :=
⟨pos_of_mul_pos_left hab ∘ le_of_lt, pos_of_mul_pos_right hab ∘ le_of_lt⟩
lemma mul_le_mul_of_le_of_le [pos_mul_mono α] [mul_pos_mono α]
  (h₁ : a ≤ b) (h₂ : c ≤ d) (a0 : 0 ≤ a) (d0 : 0 ≤ d) : a * c ≤ b * d :=
(mul_le_mul_left h₂ a0).trans $ mul_le_mul_right h₁ d0
lemma mul_le_mul_of_le_of_le' [pos_mul_mono α] [mul_pos_mono α]
  (h₁ : a ≤ b) (h₂ : c ≤ d) (b0 : 0 ≤ b) (c0 : 0 ≤ c) : a * c ≤ b * d :=
(mul_le_mul_right h₁ c0).trans $ mul_le_mul_left h₂ b0
lemma mul_le_of_mul_le_left [pos_mul_mono α]
  (h : a * b ≤ c) (hle : d ≤ b) (a0 : 0 ≤ a) :
  a * d ≤ c :=
(mul_le_mul_left hle a0).trans h
lemma le_mul_of_le_mul_left [pos_mul_mono α]
  (h : a ≤ b * c) (hle : c ≤ d) (b0 : 0 ≤ b) :
  a ≤ b * d :=
h.trans (mul_le_mul_left hle b0)
lemma mul_le_of_mul_le_right [mul_pos_mono α]
  (h : a * b ≤ c) (hle : d ≤ a) (b0 : 0 ≤ b) :
  d * b ≤ c :=
(mul_le_mul_right hle b0).trans h
lemma le_mul_of_le_mul_right [mul_pos_mono α]
  (h : a ≤ b * c) (hle : b ≤ d) (c0 : 0 ≤ c) :
  a ≤ d * c :=
h.trans (mul_le_mul_right hle c0)
lemma mul_left_cancel_iff [pos_mul_mono_rev α]
  (a0 : 0 < a) :
  a * b = a * c ↔ b = c :=
⟨λ h, (le_of_mul_le_mul_left' h.le a0).antisymm (le_of_mul_le_mul_left' h.ge a0), congr_arg _⟩
lemma mul_right_cancel_iff [mul_pos_mono_rev α]
  (b0 : 0 < b) :
  a * b = c * b ↔ a = c :=
⟨λ h, (le_of_mul_le_mul_right' h.le b0).antisymm (le_of_mul_le_mul_right' h.ge b0), congr_arg _⟩
lemma mul_eq_mul_iff_eq_and_eq [pos_mul_strict_mono α] [mul_pos_strict_mono α]
  [pos_mul_mono_rev α] [mul_pos_mono_rev α]
  (hac : a ≤ b) (hbd : c ≤ d) (a0 : 0 < a) (d0 : 0 < d) :
  a * c = b * d ↔ a = b ∧ c = d :=
begin
  refine ⟨λ h, _, λ h, congr_arg2 (*) h.1 h.2⟩,
  rcases hac.eq_or_lt with rfl | hac,
  { exact ⟨rfl, (mul_left_cancel_iff a0).mp h⟩ },
  rcases eq_or_lt_of_le hbd with rfl | hbd,
  { exact ⟨(mul_right_cancel_iff d0).mp h, rfl⟩ },
  exact ((mul_lt_mul_of_lt_of_lt hac hbd a0 d0).ne h).elim,
end
lemma mul_eq_mul_iff_eq_and_eq' [pos_mul_strict_mono α] [mul_pos_strict_mono α]
  [pos_mul_mono_rev α] [mul_pos_mono_rev α]
  (hac : a ≤ b) (hbd : c ≤ d) (b0 : 0 < b) (c0 : 0 < c) :
  a * c = b * d ↔ a = b ∧ c = d :=
begin
  refine ⟨λ h, _, λ h, congr_arg2 (*) h.1 h.2⟩,
  rcases hac.eq_or_lt with rfl | hac,
  { exact ⟨rfl, (mul_left_cancel_iff b0).mp h⟩ },
  rcases eq_or_lt_of_le hbd with rfl | hbd,
  { exact ⟨(mul_right_cancel_iff c0).mp h, rfl⟩ },
  exact ((mul_lt_mul_of_lt_of_lt' hac hbd b0 c0).ne h).elim,
end
end partial_order
section linear_order
variables [linear_order α]
lemma pos_and_pos_or_neg_and_neg_of_mul_pos [pos_mul_mono α] [mul_pos_mono α]
  (hab : 0 < a * b) :
  (0 < a ∧ 0 < b) ∨ (a < 0 ∧ b < 0) :=
begin
  rcases lt_trichotomy 0 a with ha | rfl | ha,
  { refine or.inl ⟨ha, lt_imp_lt_of_le_imp_le (λ hb, _) hab⟩,
    exact mul_nonpos_of_nonneg_of_nonpos ha.le hb },
  { rw [zero_mul] at hab, exact hab.false.elim },
  { refine or.inr ⟨ha, lt_imp_lt_of_le_imp_le (λ hb, _) hab⟩,
    exact mul_nonpos_of_nonpos_of_nonneg ha.le hb }
end
lemma neg_of_mul_pos_left [pos_mul_mono α] [mul_pos_mono α]
  (h : 0 < a * b) (ha : a ≤ 0) :
  b < 0 :=
((pos_and_pos_or_neg_and_neg_of_mul_pos h).resolve_left $ λ h, h.1.not_le ha).2
lemma neg_of_mul_pos_right [pos_mul_mono α] [mul_pos_mono α]
  (h : 0 < a * b) (ha : b ≤ 0) :
  a < 0 :=
((pos_and_pos_or_neg_and_neg_of_mul_pos h).resolve_left $ λ h, h.2.not_le ha).1
lemma neg_iff_neg_of_mul_pos [pos_mul_mono α] [mul_pos_mono α]
  (hab : 0 < a * b) :
  a < 0 ↔ b < 0 :=
⟨neg_of_mul_pos_left hab ∘ le_of_lt, neg_of_mul_pos_right hab ∘ le_of_lt⟩
lemma left.neg_of_mul_neg_left [pos_mul_mono α]
  (h : a * b < 0) (h1 : 0 ≤ a) :
  b < 0 :=
lt_of_not_ge (assume h2 : b ≥ 0, (left.mul_nonneg h1 h2).not_lt h)
lemma right.neg_of_mul_neg_left [mul_pos_mono α]
  (h : a * b < 0) (h1 : 0 ≤ a) :
  b < 0 :=
lt_of_not_ge (assume h2 : b ≥ 0, (right.mul_nonneg h1 h2).not_lt h)
lemma left.neg_of_mul_neg_right [pos_mul_mono α]
  (h : a * b < 0) (h1 : 0 ≤ b) : a < 0 :=
lt_of_not_ge (assume h2 : a ≥ 0, (left.mul_nonneg h2 h1).not_lt h)
lemma right.neg_of_mul_neg_right [mul_pos_mono α]
  (h : a * b < 0) (h1 : 0 ≤ b) : a < 0 :=
lt_of_not_ge (assume h2 : a ≥ 0, (right.mul_nonneg h2 h1).not_lt h)
end linear_order
end mul_zero_class
section mul_one_class
variables [mul_one_class α] [has_zero α]
section preorder
variables [preorder α]
@[simp]
lemma le_mul_iff_one_le_right
  [pos_mul_mono α] [pos_mul_mono_rev α]
  (a0 : 0 < a) :
  a ≤ a * b ↔ 1 ≤ b :=
iff.trans (by rw [mul_one]) (mul_le_mul_iff_left a0)
@[simp]
lemma lt_mul_iff_one_lt_right
  [pos_mul_strict_mono α] [pos_mul_reflect_lt α]
  (a0 : 0 < a) :
  a < a * b ↔ 1 < b :=
iff.trans (by rw [mul_one]) (mul_lt_mul_iff_left a0)
@[simp]
lemma mul_le_iff_le_one_right
  [pos_mul_mono α] [pos_mul_mono_rev α]
  (a0 : 0 < a) :
  a * b ≤ a ↔ b ≤ 1 :=
iff.trans (by rw [mul_one]) (mul_le_mul_iff_left a0)
@[simp]
lemma mul_lt_iff_lt_one_right
  [pos_mul_strict_mono α] [pos_mul_reflect_lt α]
  (a0 : 0 < a) :
  a * b < a ↔ b < 1 :=
iff.trans (by rw [mul_one]) (mul_lt_mul_iff_left a0)
@[simp]
lemma le_mul_iff_one_le_left
  [mul_pos_mono α] [mul_pos_mono_rev α]
  (a0 : 0 < a) :
  a ≤ b * a ↔ 1 ≤ b :=
iff.trans (by rw [one_mul]) (mul_le_mul_iff_right a0)
@[simp]
lemma lt_mul_iff_one_lt_left
  [mul_pos_strict_mono α] [mul_pos_reflect_lt α]
  (a0 : 0 < a) :
  a < b * a ↔ 1 < b :=
iff.trans (by rw [one_mul]) (mul_lt_mul_iff_right a0)
@[simp]
lemma mul_le_iff_le_one_left
  [mul_pos_mono α] [mul_pos_mono_rev α]
  (b0 : 0 < b) :
  a * b ≤ b ↔ a ≤ 1 :=
iff.trans (by rw [one_mul]) (mul_le_mul_iff_right b0)
@[simp]
lemma mul_lt_iff_lt_one_left
  [mul_pos_strict_mono α] [mul_pos_reflect_lt α]
  (b0 : 0 < b) :
  a * b < b ↔ a < 1 :=
iff.trans (by rw [one_mul]) (mul_lt_mul_iff_right b0)
lemma preorder.left.mul_le_one_of_le_of_le' [pos_mul_mono α]
  (ha : a ≤ 1) (hb : b ≤ 1) (a0 : 0 < a) : a * b ≤ 1 :=
preorder.mul_le_of_le_of_le_one ha hb a0
lemma left.mul_lt_one_of_le_of_lt [pos_mul_strict_mono α]
  (ha : a ≤ 1) (hb : b < 1) (a0 : 0 < a) : a * b < 1 :=
mul_lt_of_le_of_lt_one ha hb a0
lemma left.mul_lt_one_of_lt_of_le [pos_mul_mono α]
  (ha : a < 1) (hb : b ≤ 1) (a0 : 0 < a) : a * b < 1 :=
mul_lt_of_lt_of_le_one ha hb a0
lemma left.mul_lt_one_of_lt_of_lt [pos_mul_strict_mono α]
  (ha : a < 1) (hb : b < 1) (a0 : 0 < a) : a * b < 1 :=
mul_lt_of_lt_of_lt_one ha hb a0
lemma preorder.left.one_le_mul_of_le_of_le [pos_mul_mono α]
  (ha : 1 ≤ a) (hb : 1 ≤ b) (a0 : 0 < a) : 1 ≤ a * b :=
preorder.le_mul_of_le_of_one_le ha hb a0
lemma left.one_lt_mul_of_le_of_lt [pos_mul_strict_mono α]
  (ha : 1 ≤ a) (hb : 1 < b) (a0 : 0 < a) : 1 < a * b :=
lt_mul_of_le_of_one_lt ha hb a0
lemma left.one_lt_mul_of_lt_of_le [pos_mul_mono α]
  (ha : 1 < a) (hb : 1 ≤ b) (a0 : 0 < a) : 1 < a * b :=
lt_mul_of_lt_of_one_le ha hb a0
lemma left.one_lt_mul_of_lt_of_lt [pos_mul_strict_mono α]
  (ha : 1 < a) (hb : 1 < b) (a0 : 0 < a) : 1 < a * b :=
lt_mul_of_lt_of_one_lt ha hb a0
lemma preorder.right.mul_le_one_of_le_of_le [mul_pos_mono α]
  (ha : a ≤ 1) (hb : b ≤ 1) (b0 : 0 < b) : a * b ≤ 1 :=
preorder.mul_le_of_le_one_of_le ha hb b0
lemma right.mul_lt_one_of_lt_of_le [mul_pos_strict_mono α]
  (ha : a < 1) (hb : b ≤ 1) (b0 : 0 < b) : a * b < 1 :=
mul_lt_of_lt_one_of_le ha hb b0
lemma right.mul_lt_one_of_le_of_lt [mul_pos_mono α]
  (ha : a ≤ 1) (hb : b < 1) (b0 : 0 < b) : a * b < 1 :=
mul_lt_of_le_one_of_lt ha hb b0
lemma right.mul_lt_one_of_lt_of_lt [mul_pos_strict_mono α]
  (ha : a < 1) (hb : b < 1) (b0 : 0 < b) : a * b < 1 :=
mul_lt_of_lt_one_of_lt ha hb b0
lemma preorder.right.one_le_mul_of_le_of_le [mul_pos_mono α]
  (ha : 1 ≤ a) (hb : 1 ≤ b) (b0 : 0 < b) : 1 ≤ a * b :=
preorder.le_mul_of_one_le_of_le ha hb b0
lemma right.one_lt_mul_of_lt_of_le [mul_pos_strict_mono α]
  (ha : 1 < a) (hb : 1 ≤ b) (b0 : 0 < b) : 1 < a * b :=
lt_mul_of_one_lt_of_le ha hb b0
lemma right.one_lt_mul_of_le_of_lt [mul_pos_mono α]
  (ha : 1 ≤ a) (hb : 1 < b) (b0 : 0 < b) : 1 < a * b :=
lt_mul_of_one_le_of_lt ha hb b0
lemma right.one_lt_mul_of_lt_of_lt [mul_pos_strict_mono α]
  (ha : 1 < a) (hb : 1 < b) (b0 : 0 < b) : 1 < a * b :=
lt_mul_of_one_lt_of_lt ha hb b0
lemma left.mul_le_one_of_le_of_le [pos_mul_mono α]
  (ha : a ≤ 1) (hb : b ≤ 1) (a0 : 0 ≤ a) : a * b ≤ 1 :=
mul_le_of_le_of_le_one ha hb a0
lemma le_mul_of_le_of_one_le [pos_mul_mono α]
  (bc : b ≤ c) (ha : 1 ≤ a) (c0 : 0 ≤ c) : b ≤ c * a :=
c0.lt_or_eq.elim (preorder.le_mul_of_le_of_one_le bc ha)
  (λ h, by rw [← h, zero_mul] at *; exact bc)
lemma left.one_le_mul_of_le_of_le [pos_mul_mono α]
  (ha : 1 ≤ a) (hb : 1 ≤ b) (a0 : 0 ≤ a) : 1 ≤ a * b :=
le_mul_of_le_of_one_le ha hb a0
lemma mul_le_of_le_one_of_le [mul_pos_mono α]
  (ha : a ≤ 1) (bc : b ≤ c) (b0 : 0 ≤ b) : a * b ≤ c :=
b0.lt_or_eq.elim (preorder.mul_le_of_le_one_of_le ha bc)
  (λ h, by rw [← h, mul_zero] at *; exact bc)
lemma right.mul_le_one_of_le_of_le [mul_pos_mono α]
  (ha : a ≤ 1) (hb : b ≤ 1) (b0 : 0 < b) : a * b ≤ 1 :=
preorder.mul_le_of_le_one_of_le ha hb b0
lemma le_mul_of_one_le_of_le [mul_pos_mono α]
  (ha : 1 ≤ a) (bc : b ≤ c) (c0 : 0 ≤ c) : b ≤ a * c :=
c0.lt_or_eq.elim (preorder.le_mul_of_one_le_of_le ha bc)
  (λ h, by rw [← h, mul_zero] at *; exact bc)
lemma right.one_le_mul_of_le_of_le [mul_pos_mono α]
  (ha : 1 ≤ a) (hb : 1 ≤ b) (b0 : 0 ≤ b) : 1 ≤ a * b :=
le_mul_of_one_le_of_le ha hb b0
lemma mul_le_of_le_one_right [pos_mul_mono α] (h : b ≤ 1) (a0 : 0 ≤ a) :
  a * b ≤ a :=
mul_le_of_le_of_le_one le_rfl h a0
lemma le_mul_of_one_le_right [pos_mul_mono α] (h : 1 ≤ b) (a0 : 0 ≤ a) :
  a ≤ a * b :=
le_mul_of_le_of_one_le le_rfl h a0
lemma mul_le_of_le_one_left [mul_pos_mono α] (h : a ≤ 1) (b0 : 0 ≤ b) :
  a * b ≤ b :=
mul_le_of_le_one_of_le h le_rfl b0
lemma le_mul_of_one_le_left [mul_pos_mono α] (h : 1 ≤ a) (b0 : 0 ≤ b) :
  b ≤ a * b :=
le_mul_of_one_le_of_le h le_rfl b0
lemma le_of_mul_le_of_one_le_left [pos_mul_mono α]
  (h : a * b ≤ c) (hle : 1 ≤ b) (a0 : 0 ≤ a) :
  a ≤ c :=
a0.lt_or_eq.elim (preorder.le_of_mul_le_of_one_le_left h hle)
  (λ ha, by simpa only [← ha, zero_mul] using h)
lemma le_of_le_mul_of_le_one_left [pos_mul_mono α]
  (h : a ≤ b * c) (hle : c ≤ 1) (b0 : 0 ≤ b) :
  a ≤ b :=
b0.lt_or_eq.elim (preorder.le_of_le_mul_of_le_one_left h hle)
  (λ hb, by simpa only [← hb, zero_mul] using h)
lemma le_of_mul_le_of_one_le_right [mul_pos_mono α]
  (h : a * b ≤ c) (hle : 1 ≤ a) (b0 : 0 ≤ b) :
  b ≤ c :=
b0.lt_or_eq.elim (preorder.le_of_mul_le_of_one_le_right h hle)
  (λ ha, by simpa only [← ha, mul_zero] using h)
lemma le_of_le_mul_of_le_one_right [mul_pos_mono α]
  (h : a ≤ b * c) (hle : b ≤ 1) (c0 : 0 ≤ c) :
  a ≤ c :=
c0.lt_or_eq.elim (le_of_le_mul_of_le_one_right' h hle)
  (λ ha, by simpa only [← ha, mul_zero] using h)
end partial_order
section linear_order
variables [linear_order α]
lemma exists_square_le [pos_mul_strict_mono α]
  (a0 : 0 ≤ a) : ∃ (b : α), b * b ≤ a :=
a0.lt_or_eq.elim exists_square_le' (λ h, by rw [← h]; exact ⟨0, by simp⟩)
end linear_order
end mul_zero_one_class
end zero_lt
