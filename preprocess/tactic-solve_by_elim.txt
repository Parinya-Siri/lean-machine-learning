import tactic.core
namespace tactic
namespace solve_by_elim
meta def mk_assumption_set (no_dflt : bool) (hs : list simp_arg_type) (attr : list name) :
  tactic (list (tactic expr) × tactic (list expr)) :=
meta structure basic_opt extends apply_any_opt :=
(accept : list expr → tactic unit := λ _, skip)
(pre_apply : tactic unit := skip)
(discharger : tactic unit := failed)
(max_depth : ℕ := 3)
meta def solve_by_elim_trace (n : ℕ) (f : format) : tactic unit :=
trace_if_enabled `solve_by_elim
  (format!"[solve_by_elim {(list.repeat '.' (n+1)).as_string} " ++ f ++ "]")
meta def on_success (g : format) (n : ℕ) (e : expr) : tactic unit :=
do
  pp ← pp e,
  solve_by_elim_trace n (format!"✅ `{pp}` solves `⊢ {g}`")
meta def on_failure (g : format) (n : ℕ) : tactic unit :=
solve_by_elim_trace n (format!"❌ failed to solve `⊢ {g}`")
meta def trace_hooks (n : ℕ) : tactic ((expr → tactic unit) × tactic unit) :=
if is_trace_enabled_for `solve_by_elim then
  do
    g ← target >>= pp,
    return (on_success g n, on_failure g n)
else
  return (λ _, skip, skip)
meta def solve_by_elim_aux (opt : basic_opt) (original_goals : list expr)
  (lemmas : list (tactic expr)) (ctx : tactic (list expr)) :
  ℕ → tactic unit
| n := do
meta structure opt extends basic_opt :=
(backtrack_all_goals : bool := ff)
(lemmas : option (list expr) := none)
(lemma_thunks : option (list (tactic expr)) := lemmas.map (λ l, l.map return))
(ctx_thunk : tactic (list expr) := local_context)
meta def opt.get_lemma_thunks (opt : opt) : tactic (list (tactic expr) × tactic (list expr)) :=
match opt.lemma_thunks with
| none := mk_assumption_set ff [] []
| some lemma_thunks := return (lemma_thunks, opt.ctx_thunk)
end
end solve_by_elim
open solve_by_elim
meta def solve_by_elim (opt : opt := { }) : tactic unit :=
do
  tactic.fail_if_no_goals,
  (lemmas, ctx_lemmas) ← opt.get_lemma_thunks,
  (if opt.backtrack_all_goals then id else focus1) $ (do
    gs ← get_goals,
    solve_by_elim_aux opt.to_basic_opt gs lemmas ctx_lemmas opt.max_depth <|>
    fail ("`solve_by_elim` failed.\n" ++
      "Try `solve_by_elim { max_depth := N }` for `N > " ++ (to_string opt.max_depth) ++ "`\n" ++
      "or use `set_option trace.solve_by_elim true` to view the search."))
setup_tactic_parser
namespace interactive
meta def apply_assumption
  (lemmas : option (list expr) := none)
  (opt : apply_any_opt := {})
  (tac : tactic unit := skip) : tactic unit :=
do
  lemmas ← match lemmas with
  | none := local_context
  | some lemmas := return lemmas
  end,
  tactic.apply_any lemmas opt tac
add_tactic_doc
{ name        := "apply_assumption",
  category    := doc_category.tactic,
  decl_names  := [`tactic.interactive.apply_assumption],
  tags        := ["context management", "lemma application"] }
meta def solve_by_elim (all_goals : parse $ (tk "*")?) (no_dflt : parse only_flag)
  (hs : parse simp_arg_list) (attr_names : parse with_ident_list) (opt : solve_by_elim.opt := { }) :
  tactic unit :=
do (lemma_thunks, ctx_thunk) ← mk_assumption_set no_dflt hs attr_names,
   tactic.solve_by_elim
   { backtrack_all_goals := all_goals.is_some ∨ opt.backtrack_all_goals,
     lemma_thunks := some lemma_thunks,
     ctx_thunk := ctx_thunk,
     ..opt }
add_tactic_doc
{ name        := "solve_by_elim",
  category    := doc_category.tactic,
  decl_names  := [`tactic.interactive.solve_by_elim],
  tags        := ["search"] }
end interactive
end tactic
