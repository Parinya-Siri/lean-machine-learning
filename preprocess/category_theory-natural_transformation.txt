import category_theory.functor
namespace category_theory
@[ext]
structure nat_trans (F G : C ⥤ D) : Type (max u₁ v₂) :=
(app : Π X : C, F.obj X ⟶ G.obj X)
(naturality' : ∀ ⦃X Y : C⦄ (f : X ⟶ Y), F.map f ≫ app Y = app X ≫ G.map f . obviously)
restate_axiom nat_trans.naturality'
protected def id (F : C ⥤ D) : nat_trans F F :=
{ app := λ X, 𝟙 (F.obj X) }
@[simp] lemma id_app' (F : C ⥤ D) (X : C) : (nat_trans.id F).app X = 𝟙 (F.obj X) := rfl
instance (F : C ⥤ D) : inhabited (nat_trans F F) := ⟨nat_trans.id F⟩
open category
open category_theory.functor
section
variables {F G H I : C ⥤ D}
def vcomp (α : nat_trans F G) (β : nat_trans G H) : nat_trans F H :=
{ app := λ X, (α.app X) ≫ (β.app X) }
example {F G : C ⥤ D} (α : nat_trans F G) {X Y U V : C} (f : X ⟶ Y) (g : Y ⟶ U) (h : U ⟶ V) :
  α.app X ≫ G.map f ≫ G.map g ≫ G.map h =
    F.map f ≫ F.map g ≫ F.map h ≫ α.app V :=
by simp
end nat_trans
end category_theory
