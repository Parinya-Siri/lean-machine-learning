import topology.continuous_function.weierstrass
import analysis.complex.basic
noncomputable theory
namespace continuous_map
variables {X : Type*} [topological_space X] [compact_space X]
def attach_bound (f : C(X, ‚Ñù)) : C(X, set.Icc (-‚à•f‚à•) (‚à•f‚à•)) :=
{ to_fun := Œª x, ‚ü®f x, ‚ü®neg_norm_le_apply f x, apply_le_norm f x‚ü©‚ü© }
@[simp] lemma attach_bound_apply_coe (f : C(X, ‚Ñù)) (x : X) : ((attach_bound f) x : ‚Ñù) = f x := rfl
lemma polynomial_comp_attach_bound (A : subalgebra ‚Ñù C(X, ‚Ñù)) (f : A) (g : polynomial ‚Ñù) :
  (g.to_continuous_map_on (set.Icc (-‚à•f‚à•) ‚à•f‚à•)).comp (f : C(X, ‚Ñù)).attach_bound =
    polynomial.aeval f g :=
begin
  ext,
  simp only [continuous_map.coe_comp, function.comp_app,
    continuous_map.attach_bound_apply_coe,
    polynomial.to_continuous_map_on_to_fun,
    polynomial.aeval_subalgebra_coe,
    polynomial.aeval_continuous_map_apply,
    polynomial.to_continuous_map_to_fun],
end
lemma polynomial_comp_attach_bound_mem (A : subalgebra ‚Ñù C(X, ‚Ñù)) (f : A) (g : polynomial ‚Ñù) :
  (g.to_continuous_map_on (set.Icc (-‚à•f‚à•) ‚à•f‚à•)).comp (f : C(X, ‚Ñù)).attach_bound ‚àà A :=
begin
  rw polynomial_comp_attach_bound,
  apply set_like.coe_mem,
end
theorem comp_attach_bound_mem_closure
  (A : subalgebra ‚Ñù C(X, ‚Ñù)) (f : A) (p : C(set.Icc (-‚à•f‚à•) (‚à•f‚à•), ‚Ñù)) :
  p.comp (attach_bound f) ‚àà A.topological_closure :=
begin
  dsimp [set.separates_points_strongly] at sep,
  let g : X ‚Üí X ‚Üí L := Œª x y, (sep f x y).some,
  have w‚ÇÅ : ‚àÄ x y, g x y x = f x := Œª x y, (sep f x y).some_spec.1,
  have w‚ÇÇ : ‚àÄ x y, g x y y = f y := Œª x y, (sep f x y).some_spec.2,
theorem subalgebra_topological_closure_eq_top_of_separates_points
  (A : subalgebra ‚Ñù C(X, ‚Ñù)) (w : A.separates_points) :
  A.topological_closure = ‚ä§ :=
begin
theorem continuous_map_mem_subalgebra_closure_of_separates_points
  (A : subalgebra ‚Ñù C(X, ‚Ñù)) (w : A.separates_points)
  (f : C(X, ‚Ñù)) :
  f ‚àà A.topological_closure :=
begin
  rw subalgebra_topological_closure_eq_top_of_separates_points A w,
  simp,
end
theorem exists_mem_subalgebra_near_continuous_map_of_separates_points
  (A : subalgebra ‚Ñù C(X, ‚Ñù)) (w : A.separates_points)
  (f : C(X, ‚Ñù)) (Œµ : ‚Ñù) (pos : 0 < Œµ) :
  ‚àÉ (g : A), ‚à•(g : C(X, ‚Ñù)) - f‚à• < Œµ :=
begin
  have w := mem_closure_iff_frequently.mp
    (continuous_map_mem_subalgebra_closure_of_separates_points A w f),
  rw metric.nhds_basis_ball.frequently_iff at w,
  obtain ‚ü®g, H, m‚ü© := w Œµ pos,
  rw [metric.mem_ball, dist_eq_norm] at H,
  exact ‚ü®‚ü®g, m‚ü©, H‚ü©,
end
theorem exists_mem_subalgebra_near_continuous_of_separates_points
  (A : subalgebra ‚Ñù C(X, ‚Ñù)) (w : A.separates_points)
  (f : X ‚Üí ‚Ñù) (c : continuous f) (Œµ : ‚Ñù) (pos : 0 < Œµ) :
  ‚àÉ (g : A), ‚àÄ x, ‚à•g x - f x‚à• < Œµ :=
begin
  obtain ‚ü®g, b‚ü© := exists_mem_subalgebra_near_continuous_map_of_separates_points A w ‚ü®f, c‚ü© Œµ pos,
  use g,
  rwa norm_lt_iff _ pos at b,
end
end continuous_map
section is_R_or_C
open is_R_or_C
def conj_invariant_subalgebra (A : subalgebra ‚Ñù C(X, ùïú)) : Prop :=
A.map (conj_ae.to_alg_hom.comp_left_continuous ‚Ñù conj_cle.continuous) ‚â§ A
lemma mem_conj_invariant_subalgebra {A : subalgebra ‚Ñù C(X, ùïú)} (hA : conj_invariant_subalgebra A)
  {f : C(X, ùïú)} (hf : f ‚àà A) :
  (conj_ae.to_alg_hom.comp_left_continuous ‚Ñù conj_cle.continuous) f ‚àà A :=
hA ‚ü®f, hf, rfl‚ü©
end continuous_map
open continuous_map
lemma subalgebra.separates_points.is_R_or_C_to_real {A : subalgebra ùïú C(X, ùïú)}
  (hA : A.separates_points) (hA' : conj_invariant_subalgebra (A.restrict_scalars ‚Ñù)) :
  ((A.restrict_scalars ‚Ñù).comap'
    (of_real_am.comp_left_continuous ‚Ñù continuous_of_real)).separates_points :=
begin
  intros x‚ÇÅ x‚ÇÇ hx,
theorem continuous_map.subalgebra_is_R_or_C_topological_closure_eq_top_of_separates_points
  (A : subalgebra ùïú C(X, ùïú)) (hA : A.separates_points)
  (hA' : conj_invariant_subalgebra (A.restrict_scalars ‚Ñù)) :
  A.topological_closure = ‚ä§ :=
begin
  rw algebra.eq_top_iff,
