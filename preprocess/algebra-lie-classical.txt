import algebra.invertible
import data.matrix.basis
import data.matrix.dmatrix
import algebra.lie.abelian
import linear_algebra.matrix.trace
import algebra.lie.skew_adjoint
universes u₁ u₂
namespace lie_algebra
open matrix
open_locale matrix
variables (n p q l : Type*) (R : Type u₂)
variables [decidable_eq n] [decidable_eq p] [decidable_eq q] [decidable_eq l]
variables [comm_ring R]
@[simp] lemma matrix_trace_commutator_zero [fintype n] (X Y : matrix n n R) :
  matrix.trace ⁅X, Y⁆ = 0 :=
calc _ = matrix.trace (X ⬝ Y) - matrix.trace (Y ⬝ X) : trace_sub _ _
   ... = matrix.trace (X ⬝ Y) - matrix.trace (X ⬝ Y) :
     congr_arg (λ x, _ - x) (matrix.trace_mul_comm Y X)
   ... = 0 : sub_self _
namespace special_linear
def sl [fintype n] : lie_subalgebra R (matrix n n R) :=
{ lie_mem' := λ X Y _ _, linear_map.mem_ker.2 $ matrix_trace_commutator_zero _ _ _ _,
  ..linear_map.ker (matrix.trace_linear_map n R R) }
lemma sl_bracket [fintype n] (A B : sl n R) : ⁅A, B⁆.val = A.val ⬝ B.val - B.val ⬝ A.val := rfl
section elementary_basis
variables {n} [fintype n] (i j : n)
def Eb (h : j ≠ i) : sl n R :=
⟨matrix.std_basis_matrix i j (1 : R),
  show matrix.std_basis_matrix i j (1 : R) ∈ linear_map.ker (matrix.trace_linear_map n R R),
  from matrix.std_basis_matrix.trace_zero i j (1 : R) h⟩
@[simp] lemma Eb_val (h : j ≠ i) : (Eb R i j h).val = matrix.std_basis_matrix i j 1 := rfl
end elementary_basis
lemma sl_non_abelian [fintype n] [nontrivial R] (h : 1 < fintype.card n) :
  ¬is_lie_abelian ↥(sl n R) :=
begin
  rcases fintype.exists_pair_of_one_lt_card h with ⟨j, i, hij⟩,
  let A := Eb R i j hij,
  let B := Eb R j i hij.symm,
  intros c,
  have c' : A.val ⬝ B.val = B.val ⬝ A.val, by { rw [← sub_eq_zero, ← sl_bracket, c.trivial], refl },
  simpa [std_basis_matrix, matrix.mul_apply, hij] using   congr_fun (congr_fun c' i) i,
end
end special_linear
namespace symplectic
def J : matrix (l ⊕ l) (l ⊕ l) R := matrix.from_blocks 0 (-1) 1 0
def sp [fintype l] : lie_subalgebra R (matrix (l ⊕ l) (l ⊕ l) R) :=
  skew_adjoint_matrices_lie_subalgebra (J l R)
end symplectic
namespace orthogonal
def so [fintype n] : lie_subalgebra R (matrix n n R) :=
  skew_adjoint_matrices_lie_subalgebra (1 : matrix n n R)
@[simp] lemma mem_so [fintype n] (A : matrix n n R) : A ∈ so n R ↔ Aᵀ = -A :=
begin
  erw mem_skew_adjoint_matrices_submodule,
  simp only [matrix.is_skew_adjoint, matrix.is_adjoint_pair, matrix.mul_one, matrix.one_mul],
end
def indefinite_diagonal : matrix (p ⊕ q) (p ⊕ q) R :=
  matrix.diagonal $ sum.elim (λ _, 1) (λ _, -1)
def so' [fintype p] [fintype q] : lie_subalgebra R (matrix (p ⊕ q) (p ⊕ q) R) :=
  skew_adjoint_matrices_lie_subalgebra $ indefinite_diagonal p q R
def Pso (i : R) : matrix (p ⊕ q) (p ⊕ q) R :=
  matrix.diagonal $ sum.elim (λ _, 1) (λ _, i)
variables [fintype p] [fintype q]
lemma Pso_inv {i : R} (hi : i*i = -1) : (Pso p q R i) * (Pso p q R (-i)) = 1 :=
begin
  ext x y, rcases x; rcases y,
def invertible_Pso {i : R} (hi : i*i = -1) : invertible (Pso p q R i) :=
invertible_of_right_inverse _ _ (Pso_inv p q R hi)
lemma indefinite_diagonal_transform {i : R} (hi : i*i = -1) :
  (Pso p q R i)ᵀ ⬝ (indefinite_diagonal p q R) ⬝ (Pso p q R i) = 1 :=
begin
  ext x y, rcases x; rcases y,
def so_indefinite_equiv {i : R} (hi : i*i = -1) : so' p q R ≃ₗ⁅R⁆ so (p ⊕ q) R :=
begin
  apply (skew_adjoint_matrices_lie_subalgebra_equiv
    (indefinite_diagonal p q R) (Pso p q R i) (invertible_Pso p q R hi)).trans,
  apply lie_equiv.of_eq,
  ext A, rw indefinite_diagonal_transform p q R hi, refl,
end
lemma so_indefinite_equiv_apply {i : R} (hi : i*i = -1) (A : so' p q R) :
  (so_indefinite_equiv p q R hi A : matrix (p ⊕ q) (p ⊕ q) R) =
    (Pso p q R i)⁻¹ ⬝ (A : matrix (p ⊕ q) (p ⊕ q) R) ⬝ (Pso p q R i) :=
by erw [lie_equiv.trans_apply, lie_equiv.of_eq_apply,
        skew_adjoint_matrices_lie_subalgebra_equiv_apply]
def JD : matrix (l ⊕ l) (l ⊕ l) R := matrix.from_blocks 0 1 1 0
def type_D [fintype l] := skew_adjoint_matrices_lie_subalgebra (JD l R)
def PD : matrix (l ⊕ l) (l ⊕ l) R := matrix.from_blocks 1 (-1) 1 1
def S := indefinite_diagonal l l R
lemma S_as_blocks : S l R = matrix.from_blocks 1 0 0 (-1) :=
begin
  rw [← matrix.diagonal_one, matrix.diagonal_neg, matrix.from_blocks_diagonal],
  refl,
end
lemma JD_transform [fintype l] : (PD l R)ᵀ ⬝ (JD l R) ⬝ (PD l R) = (2 : R) • (S l R) :=
begin
  have h : (PD l R)ᵀ ⬝ (JD l R) = matrix.from_blocks 1 1 1 (-1) := by
  { simp [PD, JD, matrix.from_blocks_transpose, matrix.from_blocks_multiply], },
  erw [h, S_as_blocks, matrix.from_blocks_multiply, matrix.from_blocks_smul],
  congr; simp [two_smul],
end
lemma PD_inv [fintype l] [invertible (2 : R)] : (PD l R) * (⅟(2 : R) • (PD l R)ᵀ) = 1 :=
begin
  have h : ⅟(2 : R) • (1 : matrix l l R) + ⅟(2 : R) • 1 = 1 := by
    rw [← smul_add, ← (two_smul R _), smul_smul, inv_of_mul_self, one_smul],
  erw [matrix.from_blocks_transpose, matrix.from_blocks_smul, matrix.mul_eq_mul,
    matrix.from_blocks_multiply],
  simp [h],
end
instance invertible_PD [fintype l] [invertible (2 : R)] : invertible (PD l R) :=
invertible_of_right_inverse _ _ (PD_inv l R)
def type_D_equiv_so' [fintype l] [invertible (2 : R)] :
  type_D l R ≃ₗ⁅R⁆ so' l l R :=
begin
  apply (skew_adjoint_matrices_lie_subalgebra_equiv (JD l R) (PD l R) (by apply_instance)).trans,
  apply lie_equiv.of_eq,
  ext A,
  rw [JD_transform, ← coe_unit_of_invertible (2 : R), ←units.smul_def, lie_subalgebra.mem_coe,
      mem_skew_adjoint_matrices_lie_subalgebra_unit_smul],
  refl,
end
def JB := matrix.from_blocks ((2 : R) • 1 : matrix unit unit R) 0 0 (JD l R)
def type_B  [fintype l] := skew_adjoint_matrices_lie_subalgebra(JB l R)
def PB := matrix.from_blocks (1 : matrix unit unit R) 0 0 (PD l R)
variable [fintype l]
lemma PB_inv [invertible (2 : R)] : PB l R * matrix.from_blocks 1 0 0 (⅟(PD l R)) = 1 :=
begin
  rw [PB, matrix.mul_eq_mul, matrix.from_blocks_multiply, matrix.mul_inv_of_self],
  simp only [matrix.mul_zero, matrix.mul_one, matrix.zero_mul, zero_add, add_zero,
    matrix.from_blocks_one]
end
instance invertible_PB [invertible (2 : R)] : invertible (PB l R) :=
invertible_of_right_inverse _ _ (PB_inv l R)
lemma JB_transform : (PB l R)ᵀ ⬝ (JB l R) ⬝ (PB l R) = (2 : R) • matrix.from_blocks 1 0 0 (S l R) :=
by simp [PB, JB, JD_transform, matrix.from_blocks_transpose, matrix.from_blocks_multiply,
         matrix.from_blocks_smul]
lemma indefinite_diagonal_assoc :
  indefinite_diagonal (unit ⊕ l) l R =
  matrix.reindex_lie_equiv (equiv.sum_assoc unit l l).symm
    (matrix.from_blocks 1 0 0 (indefinite_diagonal l l R)) :=
begin
  ext i j,
  rcases i with ⟨⟨i₁ | i₂⟩ | i₃⟩;
  rcases j with ⟨⟨j₁ | j₂⟩ | j₃⟩;
  simp only [indefinite_diagonal, matrix.diagonal, equiv.sum_assoc_apply_inl_inl,
    matrix.reindex_lie_equiv_apply, matrix.minor_apply, equiv.symm_symm, matrix.reindex_apply,
    sum.elim_inl, if_true, eq_self_iff_true, matrix.one_apply_eq, matrix.from_blocks_apply₁₁,
    dmatrix.zero_apply, equiv.sum_assoc_apply_inl_inr, if_false, matrix.from_blocks_apply₁₂,
    matrix.from_blocks_apply₂₁, matrix.from_blocks_apply₂₂, equiv.sum_assoc_apply_inr,
    sum.elim_inr];
  congr,
end
def type_B_equiv_so' [invertible (2 : R)] :
  type_B l R ≃ₗ⁅R⁆ so' (unit ⊕ l) l R :=
begin
  apply (skew_adjoint_matrices_lie_subalgebra_equiv (JB l R) (PB l R) (by apply_instance)).trans,
  symmetry,
  apply (skew_adjoint_matrices_lie_subalgebra_equiv_transpose
    (indefinite_diagonal (unit ⊕ l) l R)
    (matrix.reindex_alg_equiv _ (equiv.sum_assoc punit l l)) (matrix.transpose_reindex _ _)).trans,
  apply lie_equiv.of_eq,
  ext A,
  rw [JB_transform, ← coe_unit_of_invertible (2 : R), ←units.smul_def, lie_subalgebra.mem_coe,
      lie_subalgebra.mem_coe, mem_skew_adjoint_matrices_lie_subalgebra_unit_smul],
  simpa [indefinite_diagonal_assoc],
end
end orthogonal
end lie_algebra
