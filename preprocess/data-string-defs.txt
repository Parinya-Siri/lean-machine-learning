import data.list.defs
namespace string
def split_on (s : string) (c : char) : list string :=
split (= c) s
def map_tokens (c : char) (f : string → string) : string → string :=
intercalate (singleton c) ∘ list.map f ∘ split (= c)
def is_prefix_of (x y : string) : bool :=
x.to_list.is_prefix_of y.to_list
def is_suffix_of (x y : string) : bool :=
x.to_list.is_suffix_of y.to_list
abbreviation starts_with (x y : string) : bool :=
y.is_prefix_of x
abbreviation ends_with (x y : string) : bool :=
y.is_suffix_of x
def get_rest (s t : string) : option string :=
list.as_string <$> s.to_list.get_rest t.to_list
def popn (s : string) (n : nat) : string :=
(s.mk_iterator.nextn n).next_to_string
def is_nat (s : string) : bool :=
¬ s.is_empty ∧ s.to_list.all (λ c, to_bool c.is_digit)
def head (s : string) : char :=
s.mk_iterator.curr
end string
