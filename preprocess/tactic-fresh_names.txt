import data.sum.basic
import tactic.dependencies
namespace tactic
meta def get_unused_name_reserved (ns : list name) (reserved : name_set) :
  tactic name :=
(first $ ns.map $ λ n, do
{ guard (¬ reserved.contains n),
  fail_if_success (resolve_name n),
  pure n })
<|>
(do let fallback := match ns with | [] := `x | x :: _ := x end,
    get_unused_name_reserved_aux fallback reserved none)
meta def intro_fresh_reserved (ns : list name) (reserved : name_set) :
  tactic expr :=
get_unused_name_reserved ns reserved >>= intro
meta def intro_lst_fresh_reserved (ns : list (name ⊕ list name))
  (reserved : name_set) :
  tactic (list expr) :=
ns.mmap $ λ spec,
  match spec with
  | sum.inl n := intro n
  | sum.inr ns := intro_fresh_reserved ns reserved
  end
meta def rename_fresh (renames : name_map (name ⊕ list name))
  (reserved : name_set) : tactic (list (expr × expr)) := do
  (_, reverted) ← revert_name_set $ name_set.of_list $ renames.keys,
  let renames := reverted.map $ λ h,
    match renames.find h.local_uniq_name with
    | none := sum.inl h.local_pp_name
    | some new_names := new_names
    end,
  let reserved := reserved.insert_list $ renames.filter_map sum.get_left,
  new_hyps ← intro_lst_fresh_reserved renames reserved,
  pure $ reverted.zip new_hyps
end tactic
