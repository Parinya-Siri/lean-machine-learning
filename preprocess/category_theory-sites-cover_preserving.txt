import category_theory.sites.limits
import category_theory.functor.flat
import category_theory.limits.preserves.filtered
import category_theory.sites.left_exact
universes w v‚ÇÅ v‚ÇÇ v‚ÇÉ u‚ÇÅ u‚ÇÇ u‚ÇÉ
noncomputable theory
open category_theory
open opposite
open category_theory.presieve.family_of_elements
open category_theory.presieve
open category_theory.limits
namespace category_theory
variables {C : Type u‚ÇÅ} [category.{v‚ÇÅ} C] {D : Type u‚ÇÇ} [category.{v‚ÇÇ} D]
variables {A : Type u‚ÇÉ} [category.{v‚ÇÉ} A]
variables (J : grothendieck_topology C) (K : grothendieck_topology D)
variables {L : grothendieck_topology A}
@[nolint has_inhabited_instance]
structure cover_preserving (G : C ‚•§ D) : Prop :=
(cover_preserve : ‚àÄ {U : C} {S : sieve U} (hS : S ‚àà J U), S.functor_pushforward G ‚àà K (G.obj U))
lemma id_cover_preserving : cover_preserving J J (ùü≠ _) := ‚ü®Œª U S hS, by simpa using hS‚ü©
variables (J) (K)
lemma cover_preserving.comp {F} (hF : cover_preserving J K F) {G} (hG : cover_preserving K L G) :
  cover_preserving J L (F ‚ãô G) := ‚ü®Œª U S hS,
begin
  rw sieve.functor_pushforward_comp,
  exact hG.cover_preserve (hF.cover_preserve hS)
end‚ü©
@[nolint has_inhabited_instance]
structure compatible_preserving (K : grothendieck_topology D) (G : C ‚•§ D) : Prop :=
(compatible :
  ‚àÄ (‚Ñ± : SheafOfTypes.{w} K) {Z} {T : presieve Z}
    {x : family_of_elements (G.op ‚ãô ‚Ñ±.val) T} (h : x.compatible)
    {Y‚ÇÅ Y‚ÇÇ} {X} (f‚ÇÅ : X ‚ü∂ G.obj Y‚ÇÅ) (f‚ÇÇ : X ‚ü∂ G.obj Y‚ÇÇ) {g‚ÇÅ : Y‚ÇÅ ‚ü∂ Z} {g‚ÇÇ : Y‚ÇÇ ‚ü∂ Z}
    (hg‚ÇÅ : T g‚ÇÅ) (hg‚ÇÇ : T g‚ÇÇ) (eq : f‚ÇÅ ‚â´ G.map g‚ÇÅ = f‚ÇÇ ‚â´ G.map g‚ÇÇ),
      ‚Ñ±.val.map f‚ÇÅ.op (x g‚ÇÅ hg‚ÇÅ) = ‚Ñ±.val.map f‚ÇÇ.op (x g‚ÇÇ hg‚ÇÇ))
variables {J K} {G : C ‚•§ D} (hG : compatible_preserving.{w} K G) (‚Ñ± : SheafOfTypes.{w} K) {Z : C}
variables {T : presieve Z} {x : family_of_elements (G.op ‚ãô ‚Ñ±.val) T} (h : x.compatible)
include h hG
lemma presieve.family_of_elements.compatible.functor_pushforward :
  (x.functor_pushforward G).compatible :=
begin
  rintros Z‚ÇÅ Z‚ÇÇ W g‚ÇÅ g‚ÇÇ f‚ÇÅ' f‚ÇÇ' H‚ÇÅ H‚ÇÇ eq,
  unfold family_of_elements.functor_pushforward,
  rcases get_functor_pushforward_structure H‚ÇÅ with ‚ü®X‚ÇÅ, f‚ÇÅ, h‚ÇÅ, hf‚ÇÅ, rfl‚ü©,
  rcases get_functor_pushforward_structure H‚ÇÇ with ‚ü®X‚ÇÇ, f‚ÇÇ, h‚ÇÇ, hf‚ÇÇ, rfl‚ü©,
  suffices : ‚Ñ±.val.map (g‚ÇÅ ‚â´ h‚ÇÅ).op (x f‚ÇÅ hf‚ÇÅ) = ‚Ñ±.val.map (g‚ÇÇ ‚â´ h‚ÇÇ).op (x f‚ÇÇ hf‚ÇÇ),
    simpa using this,
  apply hG.compatible ‚Ñ± h _ _ hf‚ÇÅ hf‚ÇÇ,
  simpa using eq
end
@[simp] lemma compatible_preserving.apply_map {Y : C} {f : Y ‚ü∂ Z} (hf : T f) :
  x.functor_pushforward G (G.map f) (image_mem_functor_pushforward G T hf) = x f hf :=
begin
  unfold family_of_elements.functor_pushforward,
  rcases e‚ÇÅ : get_functor_pushforward_structure (image_mem_functor_pushforward G T hf) with
    ‚ü®X, g, f', hg, eq‚ü©,
  simpa using hG.compatible ‚Ñ± h f' (ùüô _) hg hf (by simp[eq])
end
omit h hG
open limits.walking_cospan
lemma compatible_preserving_of_flat {C : Type u‚ÇÅ} [category.{v‚ÇÅ} C] {D : Type u‚ÇÅ} [category.{v‚ÇÅ} D]
  (K : grothendieck_topology D) (G : C ‚•§ D) [representably_flat G] : compatible_preserving K G :=
begin
  constructor,
  intros ‚Ñ± Z T x hx Y‚ÇÅ Y‚ÇÇ X f‚ÇÅ f‚ÇÇ g‚ÇÅ g‚ÇÇ hg‚ÇÅ hg‚ÇÇ e,
  let c : cone (cospan g‚ÇÅ g‚ÇÇ ‚ãô G) :=
    (cones.postcompose (diagram_iso_cospan (cospan g‚ÇÅ g‚ÇÇ ‚ãô G)).inv).obj
      (pullback_cone.mk f‚ÇÅ f‚ÇÇ e),
  let c' := is_cofiltered.cone (structured_arrow_cone.to_diagram c ‚ãô structured_arrow.pre _ _ _),
  have eq‚ÇÅ : f‚ÇÅ = (c'.X.hom ‚â´ G.map (c'.œÄ.app left).right) ‚â´ eq_to_hom (by simp),
  { erw ‚Üê (c'.œÄ.app left).w, dsimp, simp },
  have eq‚ÇÇ : f‚ÇÇ = (c'.X.hom ‚â´ G.map (c'.œÄ.app right).right) ‚â´ eq_to_hom (by simp),
  { erw ‚Üê (c'.œÄ.app right).w, dsimp, simp },
  conv_lhs { rw eq‚ÇÅ },
  conv_rhs { rw eq‚ÇÇ },
  simp only [op_comp, functor.map_comp, types_comp_apply, eq_to_hom_op, eq_to_hom_map],
  congr' 1,
  injection c'.œÄ.naturality walking_cospan.hom.inl with _ e‚ÇÅ,
  injection c'.œÄ.naturality walking_cospan.hom.inr with _ e‚ÇÇ,
  exact hx (c'.œÄ.app left).right (c'.œÄ.app right).right hg‚ÇÅ hg‚ÇÇ (e‚ÇÅ.symm.trans e‚ÇÇ)
end
theorem pullback_is_sheaf_of_cover_preserving {G : C ‚•§ D} (hG‚ÇÅ : compatible_preserving.{v‚ÇÉ} K G)
  (hG‚ÇÇ : cover_preserving J K G) (‚Ñ± : Sheaf K A) :
  presheaf.is_sheaf J (G.op ‚ãô ‚Ñ±.val) :=
begin
  intros X U S hS x hx,
  change family_of_elements (G.op ‚ãô ‚Ñ±.val ‚ãô coyoneda.obj (op X)) _ at x,
  let H := ‚Ñ±.2 X _ (hG‚ÇÇ.cover_preserve hS),
  let hx' := hx.functor_pushforward hG‚ÇÅ (sheaf_over ‚Ñ± X),
  split, swap,
  { apply H.amalgamate (x.functor_pushforward G),
    exact hx' },
  split,
  { intros V f hf,
    convert H.is_amalgamation hx' (G.map f) (image_mem_functor_pushforward G S hf),
    rw hG‚ÇÅ.apply_map (sheaf_over ‚Ñ± X) hx },
  { intros y hy,
    refine H.is_separated_for _ y _ _
      (H.is_amalgamation (hx.functor_pushforward hG‚ÇÅ (sheaf_over ‚Ñ± X))),
    rintros V f ‚ü®Z, f', g', h, rfl‚ü©,
    erw family_of_elements.comp_of_compatible (S.functor_pushforward G)
      hx' (image_mem_functor_pushforward G S h) g',
    dsimp,
    simp [hG‚ÇÅ.apply_map (sheaf_over ‚Ñ± X) hx h, ‚Üêhy f' h] }
end
def pullback_sheaf {G : C ‚•§ D} (hG‚ÇÅ : compatible_preserving K G)
  (hG‚ÇÇ : cover_preserving J K G) (‚Ñ± : Sheaf K A) : Sheaf J A :=
‚ü®G.op ‚ãô ‚Ñ±.val, pullback_is_sheaf_of_cover_preserving hG‚ÇÅ hG‚ÇÇ ‚Ñ±‚ü©
variable (A)
@[simps] def sites.pullback {G : C ‚•§ D} (hG‚ÇÅ : compatible_preserving K G)
  (hG‚ÇÇ : cover_preserving J K G) : Sheaf K A ‚•§ Sheaf J A :=
{ obj := Œª ‚Ñ±, pullback_sheaf hG‚ÇÅ hG‚ÇÇ ‚Ñ±,
  map := Œª _ _ f, ‚ü®(((whiskering_left _ _ _).obj G.op)).map f.val‚ü©,
  map_id' := Œª ‚Ñ±, by { ext1, apply (((whiskering_left _ _ _).obj G.op)).map_id },
  map_comp' := Œª _ _ _ f g, by { ext1, apply (((whiskering_left _ _ _).obj G.op)).map_comp } }
end category_theory
namespace category_theory
variables {C : Type v‚ÇÅ} [small_category C] {D : Type v‚ÇÅ} [small_category D]
variables (A : Type u‚ÇÇ) [category.{v‚ÇÅ} A]
variables (J : grothendieck_topology C) (K : grothendieck_topology D)
instance [has_limits A] : creates_limits (Sheaf_to_presheaf J A) :=
category_theory.Sheaf.category_theory.Sheaf_to_presheaf.category_theory.creates_limits.{u‚ÇÇ v‚ÇÅ v‚ÇÅ}
@[simps] def sites.pushforward (G : C ‚•§ D) : Sheaf J A ‚•§ Sheaf K A :=
Sheaf_to_presheaf J A ‚ãô Lan G.op ‚ãô presheaf_to_Sheaf K A
instance (G : C ‚•§ D) [representably_flat G] :
  preserves_finite_limits (sites.pushforward A J K G) :=
begin
  apply_with comp_preserves_finite_limits { instances := ff },
  { apply_instance },
  apply_with comp_preserves_finite_limits { instances := ff },
  { apply category_theory.Lan_preserves_finite_limits_of_flat },
  { apply category_theory.presheaf_to_Sheaf.limits.preserves_finite_limits.{u‚ÇÇ v‚ÇÅ v‚ÇÅ},
    apply_instance }
end
def sites.pullback_pushforward_adjunction {G : C ‚•§ D} (hG‚ÇÅ : compatible_preserving K G)
  (hG‚ÇÇ : cover_preserving J K G) : sites.pushforward A J K G ‚ä£ sites.pullback A hG‚ÇÅ hG‚ÇÇ :=
((Lan.adjunction A G.op).comp _ _ (sheafification_adjunction K A)).restrict_fully_faithful
  (Sheaf_to_presheaf J A) (ùü≠ _)
  (nat_iso.of_components (Œª _, iso.refl _)
    (Œª _ _ _,(category.comp_id _).trans (category.id_comp _).symm))
  (nat_iso.of_components (Œª _, iso.refl _)
    (Œª _ _ _,(category.comp_id _).trans (category.id_comp _).symm))
end category_theory
