import analysis.calculus.iterated_deriv
import analysis.inner_product_space.euclidean_dist
import measure_theory.function.locally_integrable
import measure_theory.integral.set_integral
noncomputable theory
open_locale classical topological_space
open polynomial real filter set function
def exp_neg_inv_glue (x : ‚Ñù) : ‚Ñù := if x ‚â§ 0 then 0 else exp (-x‚Åª¬π)
namespace exp_neg_inv_glue
noncomputable def P_aux : ‚Ñï ‚Üí polynomial ‚Ñù
| 0 := 1
| (n+1) := X^2 * (P_aux n).derivative  + (1 - C ‚Üë(2 * n) * X) * (P_aux n)
def f_aux (n : ‚Ñï) (x : ‚Ñù) : ‚Ñù :=
if x ‚â§ 0 then 0 else (P_aux n).eval x * exp (-x‚Åª¬π) / x^(2 * n)
lemma f_aux_zero_eq : f_aux 0 = exp_neg_inv_glue :=
begin
  ext x,
  by_cases h : x ‚â§ 0,
  { simp [exp_neg_inv_glue, f_aux, h] },
  { simp [h, exp_neg_inv_glue, f_aux, ne_of_gt (not_le.1 h), P_aux] }
end
lemma f_aux_deriv (n : ‚Ñï) (x : ‚Ñù) (hx : x ‚â† 0) :
  has_deriv_at (Œªx, (P_aux n).eval x * exp (-x‚Åª¬π) / x^(2 * n))
    ((P_aux (n+1)).eval x * exp (-x‚Åª¬π) / x^(2 * (n + 1))) x :=
begin
  have A : ‚àÄ k : ‚Ñï, 2 * (k + 1) - 1 = 2 * k + 1 := Œª k, rfl,
  convert (((P_aux n).has_deriv_at x).mul
               (((has_deriv_at_exp _).comp x (has_deriv_at_inv hx).neg))).div
            (has_deriv_at_pow (2 * n) x) (pow_ne_zero _ hx) using 1,
  field_simp [hx, P_aux],
lemma f_aux_deriv_pos (n : ‚Ñï) (x : ‚Ñù) (hx : 0 < x) :
  has_deriv_at (f_aux n) ((P_aux (n+1)).eval x * exp (-x‚Åª¬π) / x^(2 * (n + 1))) x :=
begin
  apply (f_aux_deriv n x (ne_of_gt hx)).congr_of_eventually_eq,
  filter_upwards [lt_mem_nhds hx] with _ hy,
  simp [f_aux, hy.not_le]
end
lemma f_aux_limit (n : ‚Ñï) :
  tendsto (Œªx, (P_aux n).eval x * exp (-x‚Åª¬π) / x^(2 * n)) (ùìù[>] 0) (ùìù 0) :=
begin
  have A : tendsto (Œªx, (P_aux n).eval x) (ùìù[>] 0) (ùìù ((P_aux n).eval 0)) :=
  (P_aux n).continuous_within_at,
  have B : tendsto (Œªx, exp (-x‚Åª¬π) / x^(2 * n)) (ùìù[>] 0) (ùìù 0),
  { convert (tendsto_pow_mul_exp_neg_at_top_nhds_0 (2 * n)).comp tendsto_inv_zero_at_top,
    ext x,
    field_simp },
  convert A.mul B;
  simp [mul_div_assoc]
end
lemma f_aux_deriv_zero (n : ‚Ñï) : has_deriv_at (f_aux n) 0 0 :=
begin
lemma f_aux_has_deriv_at (n : ‚Ñï) (x : ‚Ñù) : has_deriv_at (f_aux n) (f_aux (n+1) x) x :=
begin
lemma f_aux_iterated_deriv (n : ‚Ñï) : iterated_deriv n (f_aux 0) = f_aux n :=
begin
  induction n with n IH,
  { simp },
  { simp [iterated_deriv_succ, IH],
    ext x,
    exact (f_aux_has_deriv_at n x).deriv }
end
protected theorem cont_diff {n} : cont_diff ‚Ñù n exp_neg_inv_glue :=
begin
  rw ‚Üê f_aux_zero_eq,
  apply cont_diff_of_differentiable_iterated_deriv (Œª m hm, _),
  rw f_aux_iterated_deriv m,
  exact Œª x, (f_aux_has_deriv_at m x).differentiable_at
end
lemma zero_of_nonpos {x : ‚Ñù} (hx : x ‚â§ 0) : exp_neg_inv_glue x = 0 :=
by simp [exp_neg_inv_glue, hx]
lemma pos_of_pos {x : ‚Ñù} (hx : 0 < x) : 0 < exp_neg_inv_glue x :=
by simp [exp_neg_inv_glue, not_le.2 hx, exp_pos]
lemma nonneg (x : ‚Ñù) : 0 ‚â§ exp_neg_inv_glue x :=
begin
  cases le_or_gt x 0,
  { exact ge_of_eq (zero_of_nonpos h) },
  { exact le_of_lt (pos_of_pos h) }
end
end exp_neg_inv_glue
def real.smooth_transition (x : ‚Ñù) : ‚Ñù :=
exp_neg_inv_glue x / (exp_neg_inv_glue x + exp_neg_inv_glue (1 - x))
namespace real
namespace smooth_transition
variables {x : ‚Ñù}
open exp_neg_inv_glue
lemma pos_denom (x) : 0 < exp_neg_inv_glue x + exp_neg_inv_glue (1 - x) :=
((@zero_lt_one ‚Ñù _ _).lt_or_lt x).elim
  (Œª hx, add_pos_of_pos_of_nonneg (pos_of_pos hx) (nonneg _))
  (Œª hx, add_pos_of_nonneg_of_pos (nonneg _) (pos_of_pos $ sub_pos.2 hx))
lemma one_of_one_le (h : 1 ‚â§ x) : smooth_transition x = 1 :=
(div_eq_one_iff_eq $ (pos_denom x).ne').2 $ by rw [zero_of_nonpos (sub_nonpos.2 h), add_zero]
lemma zero_of_nonpos (h : x ‚â§ 0) : smooth_transition x = 0 :=
by rw [smooth_transition, zero_of_nonpos h, zero_div]
@[simp] protected lemma zero : smooth_transition 0 = 0 :=
zero_of_nonpos le_rfl
@[simp] protected lemma one : smooth_transition 1 = 1 :=
one_of_one_le le_rfl
lemma le_one (x : ‚Ñù) : smooth_transition x ‚â§ 1 :=
(div_le_one (pos_denom x)).2 $ le_add_of_nonneg_right (nonneg _)
lemma nonneg (x : ‚Ñù) : 0 ‚â§ smooth_transition x :=
div_nonneg (exp_neg_inv_glue.nonneg _) (pos_denom x).le
lemma lt_one_of_lt_one (h : x < 1) : smooth_transition x < 1 :=
(div_lt_one $ pos_denom x).2 $ lt_add_of_pos_right _ $ pos_of_pos $ sub_pos.2 h
lemma pos_of_pos (h : 0 < x) : 0 < smooth_transition x :=
div_pos (exp_neg_inv_glue.pos_of_pos h) (pos_denom x)
protected lemma cont_diff {n} : cont_diff ‚Ñù n smooth_transition :=
exp_neg_inv_glue.cont_diff.div
  (exp_neg_inv_glue.cont_diff.add $ exp_neg_inv_glue.cont_diff.comp $
    cont_diff_const.sub cont_diff_id) $
  Œª x, (pos_denom x).ne'
protected lemma cont_diff_at {x n} : cont_diff_at ‚Ñù n smooth_transition x :=
smooth_transition.cont_diff.cont_diff_at
protected lemma continuous : continuous smooth_transition :=
(@smooth_transition.cont_diff 0).continuous
end smooth_transition
end real
variables {E X : Type*}
structure cont_diff_bump_of_inner (c : E) :=
(r R : ‚Ñù)
(r_pos : 0 < r)
(r_lt_R : r < R)
namespace cont_diff_bump_of_inner
lemma R_pos {c : E} (f : cont_diff_bump_of_inner c) : 0 < f.R := f.r_pos.trans f.r_lt_R
instance (c : E) : inhabited (cont_diff_bump_of_inner c) := ‚ü®‚ü®1, 2, zero_lt_one, one_lt_two‚ü©‚ü©
variables [inner_product_space ‚Ñù E] [normed_group X] [normed_space ‚Ñù X]
variables {c : E} (f : cont_diff_bump_of_inner c) {x : E} {n : with_top ‚Ñï}
def to_fun (f : cont_diff_bump_of_inner c) : E ‚Üí ‚Ñù :=
Œª x, real.smooth_transition ((f.R - dist x c) / (f.R - f.r))
instance : has_coe_to_fun (cont_diff_bump_of_inner c) (Œª _, E ‚Üí ‚Ñù) := ‚ü®to_fun‚ü©
protected lemma ¬´def¬ª (x : E) : f x = real.smooth_transition ((f.R - dist x c) / (f.R - f.r)) :=
rfl
protected lemma sub (x : E) : f (c - x) = f (c + x) :=
by simp_rw [f.def, dist_self_sub_left, dist_self_add_left]
protected lemma neg (f : cont_diff_bump_of_inner (0 : E)) (x : E) : f (- x) = f x :=
by simp_rw [‚Üê zero_sub, f.sub, zero_add]
open real (smooth_transition) real.smooth_transition metric
lemma one_of_mem_closed_ball (hx : x ‚àà closed_ball c f.r) :
  f x = 1 :=
one_of_one_le $ (one_le_div (sub_pos.2 f.r_lt_R)).2 $ sub_le_sub_left hx _
lemma nonneg : 0 ‚â§ f x := nonneg _
lemma nonneg' (x : E) : 0 ‚â§ f x :=
f.nonneg
lemma le_one : f x ‚â§ 1 := le_one _
lemma pos_of_mem_ball (hx : x ‚àà ball c f.R) : 0 < f x :=
pos_of_pos $ div_pos (sub_pos.2 hx) (sub_pos.2 f.r_lt_R)
lemma lt_one_of_lt_dist (h : f.r < dist x c) : f x < 1 :=
lt_one_of_lt_one $ (div_lt_one (sub_pos.2 f.r_lt_R)).2 $ sub_lt_sub_left h _
lemma zero_of_le_dist (hx : f.R ‚â§ dist x c) : f x = 0 :=
zero_of_nonpos $ div_nonpos_of_nonpos_of_nonneg (sub_nonpos.2 hx) (sub_nonneg.2 f.r_lt_R.le)
lemma support_eq : support (f : E ‚Üí ‚Ñù) = metric.ball c f.R :=
begin
  ext x,
  suffices : f x ‚â† 0 ‚Üî dist x c < f.R, by simpa [mem_support],
  cases lt_or_le (dist x c) f.R with hx hx,
  { simp [hx, (f.pos_of_mem_ball hx).ne'] },
  { simp [hx.not_lt, f.zero_of_le_dist hx] }
end
lemma tsupport_eq : tsupport f = closed_ball c f.R :=
by simp_rw [tsupport, f.support_eq, closure_ball _ f.R_pos.ne']
protected lemma has_compact_support [finite_dimensional ‚Ñù E] : has_compact_support f :=
by simp_rw [has_compact_support, f.tsupport_eq, is_compact_closed_ball]
lemma eventually_eq_one_of_mem_ball (h : x ‚àà ball c f.r) :
  f =·∂†[ùìù x] 1 :=
((is_open_lt (continuous_id.dist continuous_const) continuous_const).eventually_mem h).mono $
  Œª z hz, f.one_of_mem_closed_ball (le_of_lt hz)
lemma eventually_eq_one : f =·∂†[ùìù c] 1 :=
f.eventually_eq_one_of_mem_ball (mem_ball_self f.r_pos)
protected lemma _root_.cont_diff_at.cont_diff_bump {c g : X ‚Üí E}
  {f : ‚àÄ x, cont_diff_bump_of_inner (c x)} {x : X}
  (hc : cont_diff_at ‚Ñù n c x) (hr : cont_diff_at ‚Ñù n (Œª x, (f x).r) x)
  (hR : cont_diff_at ‚Ñù n (Œª x, (f x).R) x)
  (hg : cont_diff_at ‚Ñù n g x) : cont_diff_at ‚Ñù n (Œª x, f x (g x)) x :=
begin
  rcases eq_or_ne (g x) (c x) with hx|hx,
  { have : (Œª x, f x (g x)) =·∂†[ùìù x] (Œª x, 1),
    { have : dist (g x) (c x) < (f x).r, { simp_rw [hx, dist_self, (f x).r_pos] },
      have := continuous_at.eventually_lt (hg.continuous_at.dist hc.continuous_at) hr.continuous_at
        this,
      exact eventually_of_mem this
        (Œª x hx, (f x).one_of_mem_closed_ball (mem_set_of_eq.mp hx).le) },
    exact cont_diff_at_const.congr_of_eventually_eq this },
  { refine real.smooth_transition.cont_diff_at.comp x _,
    refine ((hR.sub $ hg.dist hc hx).div (hR.sub hr) (sub_pos.mpr (f x).r_lt_R).ne') }
end
lemma _root_.cont_diff.cont_diff_bump {c g : X ‚Üí E} {f : ‚àÄ x, cont_diff_bump_of_inner (c x)}
  (hc : cont_diff ‚Ñù n c) (hr : cont_diff ‚Ñù n (Œª x, (f x).r)) (hR : cont_diff ‚Ñù n (Œª x, (f x).R))
  (hg : cont_diff ‚Ñù n g) : cont_diff ‚Ñù n (Œª x, f x (g x)) :=
by { rw [cont_diff_iff_cont_diff_at] at *, exact Œª x, (hc x).cont_diff_bump (hr x) (hR x) (hg x) }
protected lemma cont_diff : cont_diff ‚Ñù n f :=
cont_diff_const.cont_diff_bump cont_diff_const cont_diff_const cont_diff_id
protected lemma cont_diff_at : cont_diff_at ‚Ñù n f x :=
f.cont_diff.cont_diff_at
protected lemma cont_diff_within_at {s : set E} : cont_diff_within_at ‚Ñù n f s x :=
f.cont_diff_at.cont_diff_within_at
protected lemma continuous : continuous f :=
cont_diff_zero.mp f.cont_diff
open measure_theory
variables [measurable_space E] {Œº : measure E}
protected def normed (Œº : measure E) : E ‚Üí ‚Ñù :=
Œª x, f x / ‚à´ x, f x ‚àÇŒº
lemma normed_def {Œº : measure E} (x : E) : f.normed Œº x = f x / ‚à´ x, f x ‚àÇŒº :=
rfl
lemma nonneg_normed (x : E) : 0 ‚â§ f.normed Œº x :=
div_nonneg f.nonneg $ integral_nonneg f.nonneg'
lemma cont_diff_normed {n : with_top ‚Ñï} : cont_diff ‚Ñù n (f.normed Œº) :=
f.cont_diff.div_const
lemma continuous_normed : continuous (f.normed Œº) :=
f.continuous.div_const
lemma normed_sub (x : E) : f.normed Œº (c - x) = f.normed Œº (c + x) :=
by simp_rw [f.normed_def, f.sub]
lemma normed_neg (f : cont_diff_bump_of_inner (0 : E)) (x : E) : f.normed Œº (- x) = f.normed Œº x :=
by simp_rw [f.normed_def, f.neg]
variables [borel_space E] [finite_dimensional ‚Ñù E] [is_locally_finite_measure Œº]
protected lemma integrable : integrable f Œº :=
f.continuous.integrable_of_has_compact_support f.has_compact_support
protected lemma integrable_normed : integrable (f.normed Œº) Œº :=
f.integrable.div_const _
variables [Œº .is_open_pos_measure]
lemma integral_pos : 0 < ‚à´ x, f x ‚àÇŒº :=
begin
  refine (integral_pos_iff_support_of_nonneg f.nonneg' f.integrable).mpr _,
  rw [f.support_eq],
  refine is_open_ball.measure_pos _ (nonempty_ball.mpr f.R_pos)
end
lemma integral_normed : ‚à´ x, f.normed Œº x ‚àÇŒº = 1 :=
begin
  simp_rw [cont_diff_bump_of_inner.normed, div_eq_mul_inv, mul_comm (f _), ‚Üê smul_eq_mul,
    integral_smul],
  exact inv_mul_cancel (f.integral_pos.ne')
end
lemma support_normed_eq : support (f.normed Œº) = metric.ball c f.R :=
by simp_rw [cont_diff_bump_of_inner.normed, support_div, f.support_eq,
  support_const f.integral_pos.ne', inter_univ]
lemma tsupport_normed_eq : tsupport (f.normed Œº) = metric.closed_ball c f.R :=
by simp_rw [tsupport, f.support_normed_eq, closure_ball _ f.R_pos.ne']
lemma has_compact_support_normed : has_compact_support (f.normed Œº) :=
by simp_rw [has_compact_support, f.tsupport_normed_eq, is_compact_closed_ball]
variable (Œº)
lemma integral_normed_smul (z : X) [complete_space X] : ‚à´ x, f.normed Œº x ‚Ä¢ z ‚àÇŒº = z :=
by simp_rw [integral_smul_const, f.integral_normed, one_smul]
end cont_diff_bump_of_inner
structure cont_diff_bump [normed_group E] [normed_space ‚Ñù E] [finite_dimensional ‚Ñù E] (c : E)
  extends cont_diff_bump_of_inner (to_euclidean c)
namespace cont_diff_bump
variables [normed_group E] [normed_space ‚Ñù E] [finite_dimensional ‚Ñù E] {c x : E}
  (f : cont_diff_bump c)
def to_fun (f : cont_diff_bump c) : E ‚Üí ‚Ñù := f.to_cont_diff_bump_of_inner ‚àò to_euclidean
instance : has_coe_to_fun (cont_diff_bump c) (Œª _, E ‚Üí ‚Ñù) := ‚ü®to_fun‚ü©
instance (c : E) : inhabited (cont_diff_bump c) := ‚ü®‚ü®default‚ü©‚ü©
lemma R_pos : 0 < f.R := f.to_cont_diff_bump_of_inner.R_pos
lemma coe_eq_comp : ‚áëf = f.to_cont_diff_bump_of_inner ‚àò to_euclidean := rfl
lemma one_of_mem_closed_ball (hx : x ‚àà euclidean.closed_ball c f.r) :
  f x = 1 :=
f.to_cont_diff_bump_of_inner.one_of_mem_closed_ball hx
lemma nonneg : 0 ‚â§ f x := f.to_cont_diff_bump_of_inner.nonneg
lemma le_one : f x ‚â§ 1 := f.to_cont_diff_bump_of_inner.le_one
lemma pos_of_mem_ball (hx : x ‚àà euclidean.ball c f.R) : 0 < f x :=
f.to_cont_diff_bump_of_inner.pos_of_mem_ball hx
lemma lt_one_of_lt_dist (h : f.r < euclidean.dist x c) : f x < 1 :=
f.to_cont_diff_bump_of_inner.lt_one_of_lt_dist h
lemma zero_of_le_dist (hx : f.R ‚â§ euclidean.dist x c) : f x = 0 :=
f.to_cont_diff_bump_of_inner.zero_of_le_dist hx
lemma support_eq : support (f : E ‚Üí ‚Ñù) = euclidean.ball c f.R :=
by rw [euclidean.ball_eq_preimage, ‚Üê f.to_cont_diff_bump_of_inner.support_eq,
  ‚Üê support_comp_eq_preimage, coe_eq_comp]
lemma tsupport_eq : tsupport f = euclidean.closed_ball c f.R :=
by rw [tsupport, f.support_eq, euclidean.closure_ball _ f.R_pos.ne']
protected lemma has_compact_support : has_compact_support f :=
by simp_rw [has_compact_support, f.tsupport_eq, euclidean.is_compact_closed_ball]
lemma eventually_eq_one_of_mem_ball (h : x ‚àà euclidean.ball c f.r) :
  f =·∂†[ùìù x] 1 :=
to_euclidean.continuous_at (f.to_cont_diff_bump_of_inner.eventually_eq_one_of_mem_ball h)
lemma eventually_eq_one : f =·∂†[ùìù c] 1 :=
f.eventually_eq_one_of_mem_ball $ euclidean.mem_ball_self f.r_pos
protected lemma cont_diff {n} :
  cont_diff ‚Ñù n f :=
f.to_cont_diff_bump_of_inner.cont_diff.comp (to_euclidean : E ‚âÉL[‚Ñù] _).cont_diff
protected lemma cont_diff_at {n} :
  cont_diff_at ‚Ñù n f x :=
f.cont_diff.cont_diff_at
protected lemma cont_diff_within_at {s n} :
  cont_diff_within_at ‚Ñù n f s x :=
f.cont_diff_at.cont_diff_within_at
lemma exists_tsupport_subset {s : set E} (hs : s ‚àà ùìù c) :
  ‚àÉ f : cont_diff_bump c, tsupport f ‚äÜ s :=
let ‚ü®R, h0, hR‚ü© := euclidean.nhds_basis_closed_ball.mem_iff.1 hs
in ‚ü®‚ü®‚ü®R / 2, R, half_pos h0, half_lt_self h0‚ü©‚ü©, by rwa tsupport_eq‚ü©
lemma exists_closure_subset {R : ‚Ñù} (hR : 0 < R)
  {s : set E} (hs : is_closed s) (hsR : s ‚äÜ euclidean.ball c R) :
  ‚àÉ f : cont_diff_bump c, f.R = R ‚àß s ‚äÜ euclidean.ball c f.r :=
begin
  rcases euclidean.exists_pos_lt_subset_ball hR hs hsR with ‚ü®r, hr, hsr‚ü©,
  exact ‚ü®‚ü®‚ü®r, R, hr.1, hr.2‚ü©‚ü©, rfl, hsr‚ü©
end
end cont_diff_bump
open finite_dimensional metric
lemma exists_cont_diff_bump_function_of_mem_nhds [normed_group E] [normed_space ‚Ñù E]
  [finite_dimensional ‚Ñù E] {x : E} {s : set E} (hs : s ‚àà ùìù x) :
  ‚àÉ f : E ‚Üí ‚Ñù, f =·∂†[ùìù x] 1 ‚àß (‚àÄ y, f y ‚àà Icc (0 : ‚Ñù) 1) ‚àß cont_diff ‚Ñù ‚ä§ f ‚àß
    has_compact_support f ‚àß tsupport f ‚äÜ s :=
let ‚ü®f, hf‚ü© := cont_diff_bump.exists_tsupport_subset hs in
‚ü®f, f.eventually_eq_one, Œª y, ‚ü®f.nonneg, f.le_one‚ü©, f.cont_diff,
  f.has_compact_support, hf‚ü©
