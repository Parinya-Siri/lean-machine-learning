import category_theory.single_obj
import category_theory.limits.shapes.products
import category_theory.pi.basic
import category_theory.limits.is_limit
universes v u
namespace category_theory
def of (C : Type u) [groupoid.{v} C] : Groupoid.{v u} := bundled.of C
@[simp] lemma coe_of (C : Type u) [groupoid C] : (of C : Type u) = C := rfl
instance category : large_category.{max v u} Groupoid.{v u} :=
{ hom := λ C D, C ⥤ D,
  id := λ C, 𝟭 C,
  comp := λ C D E F G, F ⋙ G,
  id_comp' := λ C D F, by cases F; refl,
  comp_id' := λ C D F, by cases F; refl,
  assoc' := by intros; refl }
def objects : Groupoid.{v u} ⥤ Type u :=
{ obj := bundled.α,
  map := λ C D F, F.obj }
def forget_to_Cat : Groupoid.{v u} ⥤ Cat.{v u} :=
{ obj := λ C, Cat.of C,
  map := λ C D, id }
instance forget_to_Cat_full : full forget_to_Cat :=
{ preimage := λ C D, id }
instance forget_to_Cat_faithful : faithful forget_to_Cat := { }
lemma hom_to_functor {C D E : Groupoid.{v u}} (f : C ⟶ D) (g : D ⟶ E) : f ≫ g = f ⋙ g := rfl
lemma id_to_functor {C : Groupoid.{v u}} : 𝟭 C = 𝟙 C := rfl
section products
local attribute [tidy] tactic.discrete_cases
def pi_limit_fan ⦃J : Type u⦄ (F : J → Groupoid.{u u}) : limits.fan F :=
limits.fan.mk (@of (Π j : J, F j) _) (λ j, category_theory.pi.eval _ j)
def pi_limit_fan_is_limit ⦃J : Type u⦄ (F : J → Groupoid.{u u}) :
  limits.is_limit (pi_limit_fan F) :=
limits.mk_fan_limit (pi_limit_fan F)
(λ s, functor.pi' (λ j, s.proj j))
(by { intros, dunfold pi_limit_fan, simp [hom_to_functor], })
begin
  intros s m w,
  apply functor.pi_ext,
  intro j, specialize w j,
  simpa,
end
instance has_pi : limits.has_products Groupoid.{u u} :=
limits.has_products_of_limit_fans pi_limit_fan pi_limit_fan_is_limit
noncomputable def pi_iso_pi (J : Type u) (f : J → Groupoid.{u u}) : @of (Π j, f j) _ ≅ ∏ f :=
limits.is_limit.cone_point_unique_up_to_iso
  (pi_limit_fan_is_limit f)
  (limits.limit.is_limit (discrete.functor f))
@[simp]
lemma pi_iso_pi_hom_π (J : Type u) (f : J → Groupoid.{u u}) (j : J) :
  (pi_iso_pi J f).hom ≫ (limits.pi.π f j) = category_theory.pi.eval _ j :=
by { simp [pi_iso_pi], refl, }
end products
end Groupoid
end category_theory
