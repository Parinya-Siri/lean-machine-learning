import algebra.ring.prod
import ring_theory.ideal.quotient
import ring_theory.subring.basic
import topology.algebra.group
open classical set filter topological_space function
open_locale classical topological_space filter
section topological_semiring
variables (Œ± : Type*)
class topological_semiring [topological_space Œ±] [non_unital_non_assoc_semiring Œ±]
  extends has_continuous_add Œ±, has_continuous_mul Œ± : Prop
class topological_ring [topological_space Œ±] [non_unital_non_assoc_ring Œ±]
  extends topological_semiring Œ±, has_continuous_neg Œ± : Prop
variables {Œ±}
lemma topological_semiring.has_continuous_neg_of_mul [topological_space Œ±] [non_assoc_ring Œ±]
  [has_continuous_mul Œ±] : has_continuous_neg Œ± :=
{ continuous_neg :=
  by simpa using (continuous_const.mul continuous_id : continuous (Œª x : Œ±, (-1) * x)) }
lemma topological_semiring.to_topological_ring [topological_space Œ±] [non_assoc_ring Œ±]
  (h : topological_semiring Œ±) : topological_ring Œ± :=
{ ..h,
  ..(by { haveI := h.to_has_continuous_mul,
          exact topological_semiring.has_continuous_neg_of_mul } : has_continuous_neg Œ±) }
def subsemiring.topological_closure (s : subsemiring Œ±) : subsemiring Œ± :=
{ carrier := closure (s : set Œ±),
  ..(s.to_submonoid.topological_closure),
  ..(s.to_add_submonoid.topological_closure ) }
@[simp] lemma subsemiring.topological_closure_coe (s : subsemiring Œ±) :
  (s.topological_closure : set Œ±) = closure (s : set Œ±) :=
rfl
instance subsemiring.topological_closure_topological_semiring (s : subsemiring Œ±) :
  topological_semiring (s.topological_closure) :=
{ ..s.to_add_submonoid.topological_closure_has_continuous_add,
  ..s.to_submonoid.topological_closure_has_continuous_mul }
lemma subsemiring.subring_topological_closure (s : subsemiring Œ±) :
  s ‚â§ s.topological_closure :=
subset_closure
lemma subsemiring.is_closed_topological_closure (s : subsemiring Œ±) :
  is_closed (s.topological_closure : set Œ±) :=
by convert is_closed_closure
lemma subsemiring.topological_closure_minimal
  (s : subsemiring Œ±) {t : subsemiring Œ±} (h : s ‚â§ t) (ht : is_closed (t : set Œ±)) :
  s.topological_closure ‚â§ t :=
closure_minimal h ht
def subsemiring.comm_semiring_topological_closure [t2_space Œ±] (s : subsemiring Œ±)
  (hs : ‚àÄ (x y : s), x * y = y * x) : comm_semiring s.topological_closure :=
{ ..s.topological_closure.to_semiring,
  ..s.to_submonoid.comm_monoid_topological_closure hs }
end
section
variables {Œ≤ : Type*} [topological_space Œ±] [topological_space Œ≤]
instance [non_unital_non_assoc_semiring Œ±] [non_unital_non_assoc_semiring Œ≤]
  [topological_semiring Œ±] [topological_semiring Œ≤] : topological_semiring (Œ± √ó Œ≤) := {}
instance [non_unital_non_assoc_ring Œ±] [non_unital_non_assoc_ring Œ≤]
  [topological_ring Œ±] [topological_ring Œ≤] : topological_ring (Œ± √ó Œ≤) := {}
end
instance {Œ≤ : Type*} {C : Œ≤ ‚Üí Type*} [‚àÄ b, topological_space (C b)]
  [Œ† b, non_unital_non_assoc_semiring (C b)]
  [Œ† b, topological_semiring (C b)] : topological_semiring (Œ† b, C b) := {}
instance {Œ≤ : Type*} {C : Œ≤ ‚Üí Type*} [‚àÄ b, topological_space (C b)]
  [Œ† b, non_unital_non_assoc_ring (C b)]
  [Œ† b, topological_ring (C b)] : topological_ring (Œ† b, C b) := {}
section mul_opposite
open mul_opposite
instance [non_unital_non_assoc_semiring Œ±] [topological_space Œ±] [has_continuous_add Œ±] :
  has_continuous_add Œ±·µê·µí·µñ :=
{ continuous_add := continuous_induced_rng $ (@continuous_add Œ± _ _ _).comp
  (continuous_unop.prod_map continuous_unop) }
instance [non_unital_non_assoc_semiring Œ±] [topological_space Œ±] [topological_semiring Œ±] :
  topological_semiring Œ±·µê·µí·µñ := {}
instance [non_unital_non_assoc_ring Œ±] [topological_space Œ±] [has_continuous_neg Œ±] :
  has_continuous_neg Œ±·µê·µí·µñ :=
{ continuous_neg := continuous_induced_rng $ (@continuous_neg Œ± _ _ _).comp continuous_unop }
instance [non_unital_non_assoc_ring Œ±] [topological_space Œ±] [topological_ring Œ±] :
  topological_ring Œ±·µê·µí·µñ := {}
end mul_opposite
section add_opposite
open add_opposite
instance [non_unital_non_assoc_semiring Œ±] [topological_space Œ±] [has_continuous_mul Œ±] :
  has_continuous_mul Œ±·µÉ·µí·µñ :=
{ continuous_mul := by convert
  (continuous_op.comp $ (@continuous_mul Œ± _ _ _).comp $ continuous_unop.prod_map continuous_unop) }
instance [non_unital_non_assoc_semiring Œ±] [topological_space Œ±] [topological_semiring Œ±] :
  topological_semiring Œ±·µÉ·µí·µñ := {}
instance [non_unital_non_assoc_ring Œ±] [topological_space Œ±] [topological_ring Œ±] :
  topological_ring Œ±·µÉ·µí·µñ := {}
end add_opposite
section
variables {R : Type*} [non_unital_non_assoc_ring R] [topological_space R]
lemma topological_ring.of_add_group_of_nhds_zero [topological_add_group R]
  (hmul : tendsto (uncurry ((*) : R ‚Üí R ‚Üí R)) ((ùìù 0) √ó·∂† (ùìù 0)) $ ùìù 0)
  (hmul_left : ‚àÄ (x‚ÇÄ : R), tendsto (Œª x : R, x‚ÇÄ * x) (ùìù 0) $ ùìù 0)
  (hmul_right : ‚àÄ (x‚ÇÄ : R), tendsto (Œª x : R, x * x‚ÇÄ) (ùìù 0) $ ùìù 0) : topological_ring R :=
begin
  refine {..‚Äπtopological_add_group R‚Ä∫, ..},
  have hleft : ‚àÄ x‚ÇÄ : R, ùìù x‚ÇÄ = map (Œª x, x‚ÇÄ + x) (ùìù 0), by simp,
  have hadd : tendsto (uncurry ((+) : R ‚Üí R ‚Üí R)) ((ùìù 0) √ó·∂† (ùìù 0)) (ùìù 0),
  { rw ‚Üê nhds_prod_eq,
    convert continuous_add.tendsto ((0 : R), (0 : R)),
    rw zero_add },
  rw continuous_iff_continuous_at,
  rintro ‚ü®x‚ÇÄ, y‚ÇÄ‚ü©,
  rw [continuous_at, nhds_prod_eq, hleft x‚ÇÄ, hleft y‚ÇÄ, hleft (x‚ÇÄ*y‚ÇÄ), filter.prod_map_map_eq,
      tendsto_map'_iff],
  suffices :
    tendsto ((Œª (x : R), x + x‚ÇÄ * y‚ÇÄ) ‚àò (Œª (p : R √ó R), p.1 + p.2) ‚àò
              (Œª (p : R √ó R), (p.1*y‚ÇÄ + x‚ÇÄ*p.2, p.1*p.2)))
            ((ùìù 0) √ó·∂† (ùìù 0)) (map (Œª (x : R), x + x‚ÇÄ * y‚ÇÄ) $ ùìù 0),
  { convert this using 1,
    { ext, simp only [comp_app, mul_add, add_mul], abel },
    { simp only [add_comm] } },
  refine tendsto_map.comp (hadd.comp (tendsto.prod_mk _ hmul)),
  exact hadd.comp (((hmul_right y‚ÇÄ).comp tendsto_fst).prod_mk ((hmul_left  x‚ÇÄ).comp tendsto_snd))
end
lemma topological_ring.of_nhds_zero
  (hadd : tendsto (uncurry ((+) : R ‚Üí R ‚Üí R)) ((ùìù 0) √ó·∂† (ùìù 0)) $ ùìù 0)
  (hneg : tendsto (Œª x, -x : R ‚Üí R) (ùìù 0) (ùìù 0))
  (hmul : tendsto (uncurry ((*) : R ‚Üí R ‚Üí R)) ((ùìù 0) √ó·∂† (ùìù 0)) $ ùìù 0)
  (hmul_left : ‚àÄ (x‚ÇÄ : R), tendsto (Œª x : R, x‚ÇÄ * x) (ùìù 0) $ ùìù 0)
  (hmul_right : ‚àÄ (x‚ÇÄ : R), tendsto (Œª x : R, x * x‚ÇÄ) (ùìù 0) $ ùìù 0)
  (hleft : ‚àÄ x‚ÇÄ : R, ùìù x‚ÇÄ = map (Œª x, x‚ÇÄ + x) (ùìù 0)) : topological_ring R :=
begin
  haveI := topological_add_group.of_comm_of_nhds_zero hadd hneg hleft,
  exact topological_ring.of_add_group_of_nhds_zero hmul hmul_left hmul_right
end
end
variables {Œ±} [topological_space Œ±]
section
variables [non_unital_non_assoc_ring Œ±] [topological_ring Œ±]
lemma mul_left_continuous (x : Œ±) : continuous (add_monoid_hom.mul_left x) :=
continuous_const.mul continuous_id
lemma mul_right_continuous (x : Œ±) : continuous (add_monoid_hom.mul_right x) :=
continuous_id.mul continuous_const
end
variables [ring Œ±] [topological_ring Œ±]
namespace subring
instance (S : subring Œ±) :
  topological_ring S :=
topological_semiring.to_topological_ring S.to_subsemiring.topological_semiring
end subring
def subring.topological_closure (S : subring Œ±) : subring Œ± :=
{ carrier := closure (S : set Œ±),
  ..S.to_submonoid.topological_closure,
  ..S.to_add_subgroup.topological_closure }
instance subring.topological_closure_topological_ring (s : subring Œ±) :
  topological_ring (s.topological_closure) :=
{ ..s.to_add_subgroup.topological_closure_topological_add_group,
  ..s.to_submonoid.topological_closure_has_continuous_mul }
lemma subring.subring_topological_closure (s : subring Œ±) :
  s ‚â§ s.topological_closure := subset_closure
lemma subring.is_closed_topological_closure (s : subring Œ±) :
  is_closed (s.topological_closure : set Œ±) := by convert is_closed_closure
lemma subring.topological_closure_minimal
  (s : subring Œ±) {t : subring Œ±} (h : s ‚â§ t) (ht : is_closed (t : set Œ±)) :
  s.topological_closure ‚â§ t := closure_minimal h ht
def subring.comm_ring_topological_closure [t2_space Œ±] (s : subring Œ±)
  (hs : ‚àÄ (x y : s), x * y = y * x) : comm_ring s.topological_closure :=
{ ..s.topological_closure.to_ring,
  ..s.to_submonoid.comm_monoid_topological_closure hs }
end topological_semiring
section topological_comm_ring
variables {Œ± : Type*} [topological_space Œ±] [comm_ring Œ±] [topological_ring Œ±]
def ideal.closure (S : ideal Œ±) : ideal Œ± :=
{ carrier   := closure S,
  smul_mem' := Œª c x hx, map_mem_closure (mul_left_continuous _) hx $ Œª a, S.mul_mem_left c,
  ..(add_submonoid.topological_closure S.to_add_submonoid) }
@[simp] lemma ideal.coe_closure (S : ideal Œ±) : (S.closure : set Œ±) = closure S := rfl
end topological_comm_ring
section topological_ring
variables {Œ± : Type*} [topological_space Œ±] [comm_ring Œ±] (N : ideal Œ±)
open ideal.quotient
instance topological_ring_quotient_topology : topological_space (Œ± ‚ß∏ N) :=
show topological_space (quotient _), by apply_instance
universes u v
@[ext]
structure ring_topology (Œ± : Type u) [ring Œ±]
  extends topological_space Œ±, topological_ring Œ± : Type u
namespace ring_topology
variables {Œ± : Type*} [ring Œ±]
instance inhabited {Œ± : Type u} [ring Œ±] : inhabited (ring_topology Œ±) :=
‚ü®{to_topological_space := ‚ä§,
  continuous_add       := continuous_top,
  continuous_mul       := continuous_top,
  continuous_neg       := continuous_top}‚ü©
@[ext]
lemma ext' {f g : ring_topology Œ±} (h : f.is_open = g.is_open) : f = g :=
by { ext, rw h }
instance : partial_order (ring_topology Œ±) :=
partial_order.lift ring_topology.to_topological_space $ ext
local notation `cont` := @continuous _ _
private def def_Inf (S : set (ring_topology Œ±)) : ring_topology Œ± :=
let Inf_S' := Inf (to_topological_space '' S) in
{ to_topological_space := Inf_S',
  continuous_add       :=
  begin
    apply continuous_Inf_rng,
    rintros _ ‚ü®‚ü®t, tr‚ü©, haS, rfl‚ü©, resetI,
    have h := continuous_Inf_dom (set.mem_image_of_mem to_topological_space haS) continuous_id,
    have h_continuous_id := @continuous.prod_map _ _ _ _ t t Inf_S' Inf_S' _ _ h h,
    exact @continuous.comp _ _ _ (id _) (id _) t _ _ continuous_add h_continuous_id,
  end,
  continuous_mul       :=
  begin
    apply continuous_Inf_rng,
    rintros _ ‚ü®‚ü®t, tr‚ü©, haS, rfl‚ü©, resetI,
    have h := continuous_Inf_dom (set.mem_image_of_mem to_topological_space haS) continuous_id,
    have h_continuous_id := @continuous.prod_map _ _ _ _ t t Inf_S' Inf_S' _ _ h h,
    exact @continuous.comp _ _ _ (id _) (id _) t _ _ continuous_mul h_continuous_id,
  end,
  continuous_neg       :=
  begin
    apply continuous_Inf_rng,
    rintros _ ‚ü®‚ü®t, tr‚ü©, haS, rfl‚ü©, resetI,
    have h := continuous_Inf_dom (set.mem_image_of_mem to_topological_space haS) continuous_id,
    exact @continuous.comp _ _ _ (id _) (id _) t _ _ continuous_neg h,
  end }
instance : complete_semilattice_Inf (ring_topology Œ±) :=
{ Inf    := def_Inf,
  Inf_le := Œª S a haS, by { apply topological_space.complete_lattice.Inf_le, use [a, ‚ü® haS, rfl‚ü©] },
  le_Inf :=
  begin
    intros S a hab,
    apply topological_space.complete_lattice.le_Inf,
    rintros _ ‚ü®b, hbS, rfl‚ü©,
    exact hab b hbS,
  end,
  ..ring_topology.partial_order }
instance : complete_lattice (ring_topology Œ±) :=
complete_lattice_of_complete_semilattice_Inf _
def coinduced {Œ± Œ≤ : Type*} [t : topological_space Œ±] [ring Œ≤] (f : Œ± ‚Üí Œ≤) :
  ring_topology Œ≤ :=
Inf {b : ring_topology Œ≤ | (topological_space.coinduced f t) ‚â§ b.to_topological_space}
lemma coinduced_continuous {Œ± Œ≤ : Type*} [t : topological_space Œ±] [ring Œ≤] (f : Œ± ‚Üí Œ≤) :
  cont t (coinduced f).to_topological_space f :=
begin
  rw continuous_iff_coinduced_le,
  refine le_Inf _,
  rintros _ ‚ü®t', ht', rfl‚ü©,
  exact ht',
end
def to_add_group_topology (t : ring_topology Œ±) : add_group_topology Œ± :=
{ to_topological_space     := t.to_topological_space,
  to_topological_add_group := @topological_ring.to_topological_add_group _ _ t.to_topological_space
    t.to_topological_ring }
def to_add_group_topology.order_embedding : order_embedding (ring_topology Œ±)
  (add_group_topology Œ±) :=
{ to_fun       := Œª t, t.to_add_group_topology,
  inj'         :=
  begin
    intros t‚ÇÅ t‚ÇÇ h_eq,
    dsimp only at h_eq,
    ext,
    have h_t‚ÇÅ : t‚ÇÅ.to_topological_space = t‚ÇÅ.to_add_group_topology.to_topological_space := rfl,
    rw [h_t‚ÇÅ, h_eq],
    refl,
  end,
  map_rel_iff' :=
  begin
    intros t‚ÇÅ t‚ÇÇ,
    rw [embedding.coe_fn_mk],
    have h_le : t‚ÇÅ ‚â§ t‚ÇÇ ‚Üî t‚ÇÅ.to_topological_space ‚â§ t‚ÇÇ.to_topological_space := by refl,
    rw h_le,
    refl,
  end }
end ring_topology
