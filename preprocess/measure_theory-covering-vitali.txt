import topology.metric_space.basic
import measure_theory.constructions.borel_space
import measure_theory.covering.vitali_family
variables {α : Type*}
open set metric measure_theory topological_space filter
open_locale nnreal classical ennreal topological_space
namespace vitali
theorem exists_disjoint_subfamily_covering_enlargment
  (t : set (set α)) (δ : set α → ℝ) (τ : ℝ) (hτ : 1 < τ) (δnonneg : ∀ a ∈ t, 0 ≤ δ a)
  (R : ℝ) (δle : ∀ a ∈ t, δ a ≤ R) (hne : ∀ a ∈ t, set.nonempty a) :
  ∃ u ⊆ t, u.pairwise_disjoint id ∧
    ∀ a ∈ t, ∃ b ∈ u, set.nonempty (a ∩ b) ∧ δ a ≤ τ * δ b :=
begin
  let T : set (set (set α)) := {u | u ⊆ t ∧ u.pairwise_disjoint id
    ∧ ∀ a ∈ t, ∀ b ∈ u, set.nonempty (a ∩ b) → ∃ c ∈ u, (a ∩ c).nonempty ∧ δ a ≤ τ * δ c},
theorem exists_disjoint_subfamily_covering_enlargment_closed_ball [metric_space α]
  (t : set (set α)) (R : ℝ) (ht : ∀ s ∈ t, ∃ x r, s = closed_ball x r ∧ r ≤ R) :
  ∃ u ⊆ t, u.pairwise_disjoint id ∧
    ∀ a ∈ t, ∃ x r, closed_ball x r ∈ u ∧ a ⊆ closed_ball x (5 * r) :=
begin
  rcases eq_empty_or_nonempty t with rfl|tnonempty,
  { exact ⟨∅, subset.refl _, pairwise_disjoint_empty, by simp⟩ },
  haveI : inhabited α,
  { choose s hst using tnonempty,
    choose x r hxr using ht s hst,
    exact ⟨x⟩ },
theorem exists_disjoint_covering_ae [metric_space α] [measurable_space α] [opens_measurable_space α]
  [second_countable_topology α]
  (μ : measure α) [is_locally_finite_measure μ] (s : set α)
  (t : set (set α)) (hf : ∀ x ∈ s, ∀ (ε > (0 : ℝ)), ∃ a ∈ t, x ∈ a ∧ a ⊆ closed_ball x ε)
  (ht : ∀ a ∈ t, (interior a).nonempty) (h't : ∀ a ∈ t, is_closed a)
  (C : ℝ≥0) (h : ∀ a ∈ t, ∃ x ∈ a, μ (closed_ball x (3 * diam a)) ≤ C * μ a) :
  ∃ u ⊆ t, u.countable ∧ u.pairwise_disjoint id ∧ μ (s \ ⋃ (a ∈ u), a) = 0 :=
begin
  rcases eq_empty_or_nonempty s with rfl|nonempty,
  { refine ⟨∅, empty_subset _, countable_empty, pairwise_disjoint_empty,
      by simp only [measure_empty, Union_false, Union_empty, diff_self]⟩ },
  haveI : inhabited α,
  { choose x hx using nonempty,
    exact ⟨x⟩ },
protected def vitali_family [metric_space α] [measurable_space α] [opens_measurable_space α]
  [second_countable_topology α] (μ : measure α) [is_locally_finite_measure μ] (C : ℝ≥0)
  (h : ∀ x (ε > 0), ∃ r ∈ Ioc (0 : ℝ) ε, μ (closed_ball x (6 * r)) ≤ C * μ (closed_ball x r)) :
  vitali_family μ :=
{ sets_at := λ x, {a | x ∈ a ∧ is_closed a ∧ (interior a).nonempty ∧
                      μ (closed_ball x (3 * diam a)) ≤ C * μ a},
  measurable_set' := λ x a ha, ha.2.1.measurable_set,
  nonempty_interior := λ x a ha, ha.2.2.1,
  nontrivial := λ x ε εpos, begin
    obtain ⟨r, ⟨rpos, rε⟩, μr⟩ : ∃ r ∈ Ioc (0 : ℝ) ε,
      μ (closed_ball x (6 * r)) ≤ C * μ (closed_ball x r) := h x ε εpos,
    refine ⟨closed_ball x r, ⟨_, is_closed_ball, _, _⟩, closed_ball_subset_closed_ball rε⟩,
    { simp only [rpos.le, mem_closed_ball, dist_self] },
    { exact (nonempty_ball.2 rpos).mono (ball_subset_interior_closed_ball) },
    { apply le_trans (measure_mono (closed_ball_subset_closed_ball _)) μr,
      have : diam (closed_ball x r) ≤ 2 * r := diam_closed_ball rpos.le,
      linarith }
  end,
  covering := begin
    assume s f fsubset ffine,
    rcases eq_empty_or_nonempty s with rfl|H,
    { exact ⟨∅, λ _, ∅, by simp, by simp⟩ },
    haveI : inhabited α, { choose x hx using H, exact ⟨x⟩ },
    let t := ⋃ (x ∈ s), f x,
    have A₁ : ∀ x ∈ s, ∀ (ε : ℝ), 0 < ε → (∃ a ∈ t, x ∈ a ∧ a ⊆ closed_ball x ε),
    { assume x xs ε εpos,
      rcases ffine x xs ε εpos with ⟨a, xa, hax⟩,
      exact ⟨a, mem_bUnion xs xa, (fsubset x xs xa).1, hax⟩ },
    have A₂ : ∀ a ∈ t, (interior a).nonempty,
    { rintros a ha,
      rcases mem_Union₂.1 ha with ⟨x, xs, xa⟩,
      exact (fsubset x xs xa).2.2.1 },
    have A₃ : ∀ a ∈ t, is_closed a,
    { rintros a ha,
      rcases mem_Union₂.1 ha with ⟨x, xs, xa⟩,
      exact (fsubset x xs xa).2.1 },
    have A₄ : ∀ a ∈ t, ∃ x ∈ a, μ (closed_ball x (3 * diam a)) ≤ C * μ a,
    { rintros a ha,
      rcases mem_Union₂.1 ha with ⟨x, xs, xa⟩,
      exact ⟨x, (fsubset x xs xa).1, (fsubset x xs xa).2.2.2⟩ },
    obtain ⟨u, ut, u_count, u_disj, μu⟩ :
      ∃ u ⊆ t, u.countable ∧ u.pairwise disjoint ∧ μ (s \ ⋃ a ∈ u, a) = 0 :=
        exists_disjoint_covering_ae μ s t A₁ A₂ A₃ C A₄,
    have : ∀ a ∈ u, ∃ x ∈ s, a ∈ f x := λ a ha, mem_Union₂.1 (ut ha),
    choose! x hx using this,
    have inj_on_x : inj_on x u,
    { assume a ha b hb hab,
      have A : (a ∩ b).nonempty,
      { refine ⟨x a, mem_inter ((fsubset _ (hx a ha).1 (hx a ha).2).1) _⟩,
        rw hab,
        exact (fsubset _ (hx b hb).1 (hx b hb).2).1 },
      contrapose A,
      have : disjoint a b := u_disj ha hb A,
      simpa only [← not_disjoint_iff_nonempty_inter] },
    refine ⟨x '' u, function.inv_fun_on x u, _, _, _, _⟩,
    { assume y hy,
      rcases (mem_image _ _ _).1 hy with ⟨a, au, rfl⟩,
      exact (hx a au).1 },
    { rw [inj_on_x.pairwise_disjoint_image],
      assume a ha b hb hab,
      simp only [function.on_fun, inj_on_x.left_inv_on_inv_fun_on ha,
                 inj_on_x.left_inv_on_inv_fun_on hb, (∘)],
      exact u_disj ha hb hab },
    { assume y hy,
      rcases (mem_image _ _ _).1 hy with ⟨a, ha, rfl⟩,
      rw inj_on_x.left_inv_on_inv_fun_on ha,
      exact (hx a ha).2 },
    { rw [bUnion_image],
      convert μu using 3,
      exact Union₂_congr (λ a ha, inj_on_x.left_inv_on_inv_fun_on ha) }
  end }
end vitali
