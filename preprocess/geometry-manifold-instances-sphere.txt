import analysis.complex.circle
import analysis.normed_space.ball_action
import analysis.inner_product_space.calculus
import analysis.inner_product_space.pi_L2
import geometry.manifold.algebra.lie_group
import geometry.manifold.instances.real
variables {E : Type*} [inner_product_space ‚Ñù E]
noncomputable theory
open metric finite_dimensional
open_locale manifold
local attribute [instance] fact_finite_dimensional_of_finrank_eq_succ
section stereographic_projection
variables (v : E)
def stereo_to_fun [complete_space E] (x : E) : (‚Ñù ‚àô v)·óÆ :=
(2 / ((1:‚Ñù) - innerSL v x)) ‚Ä¢ orthogonal_projection (‚Ñù ‚àô v)·óÆ x
variables {v}
@[simp] lemma stereo_to_fun_apply [complete_space E] (x : E) :
  stereo_to_fun v x = (2 / ((1:‚Ñù) - innerSL v x)) ‚Ä¢ orthogonal_projection (‚Ñù ‚àô v)·óÆ x :=
rfl
lemma cont_diff_on_stereo_to_fun [complete_space E] :
  cont_diff_on ‚Ñù ‚ä§ (stereo_to_fun v) {x : E | innerSL v x ‚â† (1:‚Ñù)} :=
begin
  refine cont_diff_on.smul _
    (orthogonal_projection ((‚Ñù ‚àô v)·óÆ)).cont_diff.cont_diff_on,
  refine cont_diff_const.cont_diff_on.div _ _,
  { exact (cont_diff_const.sub (innerSL v).cont_diff).cont_diff_on },
  { intros x h h',
    exact h (sub_eq_zero.mp h').symm }
end
lemma continuous_on_stereo_to_fun [complete_space E] :
  continuous_on (stereo_to_fun v) {x : E | innerSL v x ‚â† (1:‚Ñù)} :=
(@cont_diff_on_stereo_to_fun E _ v _).continuous_on
variables (v)
def stereo_inv_fun_aux (w : E) : E := (‚à•w‚à• ^ 2 + 4)‚Åª¬π ‚Ä¢ ((4:‚Ñù) ‚Ä¢ w + (‚à•w‚à• ^ 2 - 4) ‚Ä¢ v)
variables {v}
@[simp] lemma stereo_inv_fun_aux_apply (w : E) :
  stereo_inv_fun_aux v w = (‚à•w‚à• ^ 2 + 4)‚Åª¬π ‚Ä¢ ((4:‚Ñù) ‚Ä¢ w + (‚à•w‚à• ^ 2 - 4) ‚Ä¢ v) :=
rfl
lemma stereo_inv_fun_aux_mem (hv : ‚à•v‚à• = 1) {w : E} (hw : w ‚àà (‚Ñù ‚àô v)·óÆ) :
  stereo_inv_fun_aux v w ‚àà (sphere (0:E) 1) :=
begin
  have h‚ÇÅ : 0 ‚â§ ‚à•w‚à• ^ 2 + 4 := by nlinarith,
  suffices : ‚à•(4:‚Ñù) ‚Ä¢ w + (‚à•w‚à• ^ 2 - 4) ‚Ä¢ v‚à• = ‚à•w‚à• ^ 2 + 4,
  { have h‚ÇÇ : ‚à•w‚à• ^ 2 + 4 ‚â† 0 := by nlinarith,
    simp only [mem_sphere_zero_iff_norm, norm_smul, real.norm_eq_abs, abs_inv, this,
      abs_of_nonneg h‚ÇÅ, stereo_inv_fun_aux_apply],
    field_simp },
  suffices : ‚à•(4:‚Ñù) ‚Ä¢ w + (‚à•w‚à• ^ 2 - 4) ‚Ä¢ v‚à• ^ 2 = (‚à•w‚à• ^ 2 + 4) ^ 2,
  { have h‚ÇÉ : 0 ‚â§ ‚à•stereo_inv_fun_aux v w‚à• := norm_nonneg _,
    simpa [h‚ÇÅ, h‚ÇÉ, -one_pow] using this },
  simp [norm_add_sq_real, norm_smul, inner_smul_left, inner_smul_right,
    inner_left_of_mem_orthogonal_singleton _ hw, mul_pow, real.norm_eq_abs, hv],
  ring
end
lemma cont_diff_stereo_inv_fun_aux : cont_diff ‚Ñù ‚ä§ (stereo_inv_fun_aux v) :=
begin
  have h‚ÇÄ : cont_diff ‚Ñù ‚ä§ (Œª w : E, ‚à•w‚à• ^ 2) := cont_diff_norm_sq,
  have h‚ÇÅ : cont_diff ‚Ñù ‚ä§ (Œª w : E, (‚à•w‚à• ^ 2 + 4)‚Åª¬π),
  { refine (h‚ÇÄ.add cont_diff_const).inv _,
    intros x,
    nlinarith },
  have h‚ÇÇ : cont_diff ‚Ñù ‚ä§ (Œª w, (4:‚Ñù) ‚Ä¢ w + (‚à•w‚à• ^ 2 - 4) ‚Ä¢ v),
  { refine (cont_diff_const.smul cont_diff_id).add _,
    refine (h‚ÇÄ.sub cont_diff_const).smul cont_diff_const },
  exact h‚ÇÅ.smul h‚ÇÇ
end
def stereo_inv_fun (hv : ‚à•v‚à• = 1) (w : (‚Ñù ‚àô v)·óÆ) : sphere (0:E) 1 :=
‚ü®stereo_inv_fun_aux v (w:E), stereo_inv_fun_aux_mem hv w.2‚ü©
@[simp] lemma stereo_inv_fun_apply (hv : ‚à•v‚à• = 1) (w : (‚Ñù ‚àô v)·óÆ) :
  (stereo_inv_fun hv w : E) = (‚à•w‚à• ^ 2 + 4)‚Åª¬π ‚Ä¢ ((4:‚Ñù) ‚Ä¢ w + (‚à•w‚à• ^ 2 - 4) ‚Ä¢ v) :=
rfl
lemma stereo_inv_fun_ne_north_pole (hv : ‚à•v‚à• = 1) (w : (‚Ñù ‚àô v)·óÆ) :
  stereo_inv_fun hv w ‚â† (‚ü®v, by simp [hv]‚ü© : sphere (0:E) 1) :=
begin
  refine subtype.ne_of_val_ne _,
  rw ‚Üê inner_lt_one_iff_real_of_norm_one _ hv,
  { have hw : ‚ü™v, w‚ü´_‚Ñù = 0 := inner_right_of_mem_orthogonal_singleton v w.2,
    have hw' : (‚à•(w:E)‚à• ^ 2 + 4)‚Åª¬π * (‚à•(w:E)‚à• ^ 2 - 4) < 1,
    { refine (inv_mul_lt_iff' _).mpr _,
      { nlinarith },
      linarith },
    simpa [real_inner_comm, inner_add_right, inner_smul_right, real_inner_self_eq_norm_mul_norm, hw,
      hv] using hw' },
  { simpa using stereo_inv_fun_aux_mem hv w.2 }
end
lemma continuous_stereo_inv_fun (hv : ‚à•v‚à• = 1) : continuous (stereo_inv_fun hv) :=
continuous_induced_rng (cont_diff_stereo_inv_fun_aux.continuous.comp continuous_subtype_coe)
variables [complete_space E]
lemma stereo_left_inv (hv : ‚à•v‚à• = 1) {x : sphere (0:E) 1} (hx : (x:E) ‚â† v) :
  stereo_inv_fun hv (stereo_to_fun v x) = x :=
begin
  ext,
  simp only [stereo_to_fun_apply, stereo_inv_fun_apply, smul_add],
def stereographic (hv : ‚à•v‚à• = 1) : local_homeomorph (sphere (0:E) 1) (‚Ñù ‚àô v)·óÆ :=
{ to_fun := (stereo_to_fun v) ‚àò coe,
  inv_fun := stereo_inv_fun hv,
  source := {‚ü®v, by simp [hv]‚ü©}·∂ú,
  target := set.univ,
  map_source' := by simp,
  map_target' := Œª w _, stereo_inv_fun_ne_north_pole hv w,
  left_inv' := Œª _ hx, stereo_left_inv hv (Œª h, hx (subtype.ext h)),
  right_inv' := Œª w _, stereo_right_inv hv w,
  open_source := is_open_compl_singleton,
  open_target := is_open_univ,
  continuous_to_fun := continuous_on_stereo_to_fun.comp continuous_subtype_coe.continuous_on
    (Œª w h, h ‚àò subtype.ext ‚àò eq.symm ‚àò (inner_eq_norm_mul_iff_of_norm_one hv (by simp)).mp),
  continuous_inv_fun := (continuous_stereo_inv_fun hv).continuous_on }
lemma stereographic_apply (hv : ‚à•v‚à• = 1) (x : sphere (0 : E) 1) :
  stereographic hv x = (2 / ((1:‚Ñù) - inner v x)) ‚Ä¢ orthogonal_projection (‚Ñù ‚àô v)·óÆ x :=
rfl
@[simp] lemma stereographic_source (hv : ‚à•v‚à• = 1) :
  (stereographic hv).source = {‚ü®v, by simp [hv]‚ü©}·∂ú :=
rfl
@[simp] lemma stereographic_target (hv : ‚à•v‚à• = 1) : (stereographic hv).target = set.univ := rfl
end stereographic_projection
section charted_space
def stereographic' (n : ‚Ñï) [fact (finrank ‚Ñù E = n + 1)] (v : sphere (0:E) 1) :
  local_homeomorph (sphere (0:E) 1) (euclidean_space ‚Ñù (fin n)) :=
(stereographic (norm_eq_of_mem_sphere v)) ‚â´‚Çï
(linear_isometry_equiv.from_orthogonal_span_singleton n
  (ne_zero_of_mem_unit_sphere v)).to_homeomorph.to_local_homeomorph
@[simp] lemma stereographic'_source {n : ‚Ñï} [fact (finrank ‚Ñù E = n + 1)] (v : sphere (0:E) 1) :
  (stereographic' n v).source = {v}·∂ú :=
by simp [stereographic']
@[simp] lemma stereographic'_target {n : ‚Ñï} [fact (finrank ‚Ñù E = n + 1)] (v : sphere (0:E) 1) :
  (stereographic' n v).target = set.univ :=
by simp [stereographic']
instance {n : ‚Ñï} [fact (finrank ‚Ñù E = n + 1)] :
  charted_space (euclidean_space ‚Ñù (fin n)) (sphere (0:E) 1) :=
{ atlas            := {f | ‚àÉ v : (sphere (0:E) 1), f = stereographic' n v},
  chart_at         := Œª v, stereographic' n (-v),
  mem_chart_source := Œª v, by simpa using ne_neg_of_mem_unit_sphere ‚Ñù v,
  chart_mem_atlas  := Œª v, ‚ü®-v, rfl‚ü© }
end charted_space
section smooth_manifold
lemma sphere_ext_iff (u v : sphere (0:E) 1) :
  u = v ‚Üî ‚ü™(u:E), v‚ü´_‚Ñù = 1 :=
by simp [subtype.ext_iff, inner_eq_norm_mul_iff_of_norm_one]
lemma stereographic'_symm_apply {n : ‚Ñï} [fact (finrank ‚Ñù E = n + 1)]
    (v : sphere (0:E) 1) (x : euclidean_space ‚Ñù (fin n)) :
  ((stereographic' n v).symm x : E) =
    let U : (‚Ñù ‚àô (v:E))·óÆ ‚âÉ‚Çó·µ¢[‚Ñù] euclidean_space ‚Ñù (fin n) :=
      linear_isometry_equiv.from_orthogonal_span_singleton n
        (ne_zero_of_mem_unit_sphere v) in
    ((‚à•(U.symm x : E)‚à• ^ 2 + 4)‚Åª¬π ‚Ä¢ (4 : ‚Ñù) ‚Ä¢ (U.symm x : E) +
      (‚à•(U.symm x : E)‚à• ^ 2 + 4)‚Åª¬π ‚Ä¢ (‚à•(U.symm x : E)‚à• ^ 2 - 4) ‚Ä¢ v) :=
by simp [real_inner_comm, stereographic, stereographic', ‚Üê submodule.coe_norm]
instance {n : ‚Ñï} [fact (finrank ‚Ñù E = n + 1)] :
  smooth_manifold_with_corners (ùì° n) (sphere (0:E) 1) :=
smooth_manifold_with_corners_of_cont_diff_on (ùì° n) (sphere (0:E) 1)
begin
  rintros _ _ ‚ü®v, rfl‚ü© ‚ü®v', rfl‚ü©,
  let U : (‚Ñù ‚àô (v:E))·óÆ ‚âÉ‚Çó·µ¢[‚Ñù] euclidean_space ‚Ñù (fin n) :=
    linear_isometry_equiv.from_orthogonal_span_singleton n
      (ne_zero_of_mem_unit_sphere v),
  let U' : (‚Ñù ‚àô (v':E))·óÆ ‚âÉ‚Çó·µ¢[‚Ñù] euclidean_space ‚Ñù (fin n) :=
    linear_isometry_equiv.from_orthogonal_span_singleton n
      (ne_zero_of_mem_unit_sphere v'),
  have H‚ÇÅ := U'.cont_diff.comp_cont_diff_on cont_diff_on_stereo_to_fun,
  have H‚ÇÇ := (cont_diff_stereo_inv_fun_aux.comp
      (‚Ñù ‚àô (v:E))·óÆ.subtypeL.cont_diff).comp U.symm.cont_diff,
  convert H‚ÇÅ.comp' (H‚ÇÇ.cont_diff_on : cont_diff_on ‚Ñù ‚ä§ _ set.univ) using 1,
  ext,
  simp [sphere_ext_iff, stereographic'_symm_apply, real_inner_comm]
end
lemma cont_mdiff_coe_sphere {n : ‚Ñï} [fact (finrank ‚Ñù E = n + 1)] :
  cont_mdiff (ùì° n) ùìò(‚Ñù, E) ‚àû (coe : (sphere (0:E) 1) ‚Üí E) :=
begin
  rw cont_mdiff_iff,
  split,
  { exact continuous_subtype_coe },
  { intros v _,
    let U : (‚Ñù ‚àô ((-v):E))·óÆ ‚âÉ‚Çó·µ¢[‚Ñù] euclidean_space ‚Ñù (fin n) :=
      linear_isometry_equiv.from_orthogonal_span_singleton n (ne_zero_of_mem_unit_sphere (-v)),
    exact ((cont_diff_stereo_inv_fun_aux.comp
      (‚Ñù ‚àô ((-v):E))·óÆ.subtypeL.cont_diff).comp U.symm.cont_diff).cont_diff_on }
end
variables {F : Type*} [normed_group F] [normed_space ‚Ñù F]
variables {H : Type*} [topological_space H] {I : model_with_corners ‚Ñù F H}
variables {M : Type*} [topological_space M] [charted_space H M] [smooth_manifold_with_corners I M]
lemma cont_mdiff.cod_restrict_sphere {n : ‚Ñï} [fact (finrank ‚Ñù E = n + 1)]
  {m : with_top ‚Ñï} {f : M ‚Üí E} (hf : cont_mdiff I ùìò(‚Ñù, E) m f)
  (hf' : ‚àÄ x, f x ‚àà sphere (0:E) 1) :
  cont_mdiff I (ùì° n) m (set.cod_restrict _ _ hf' : M ‚Üí (sphere (0:E) 1)) :=
begin
  rw cont_mdiff_iff_target,
  refine ‚ü®continuous_induced_rng hf.continuous, _‚ü©,
  intros v,
  let U : (‚Ñù ‚àô ((-v):E))·óÆ ‚âÉ‚Çó·µ¢[‚Ñù] euclidean_space ‚Ñù (fin n) :=
    (linear_isometry_equiv.from_orthogonal_span_singleton n (ne_zero_of_mem_unit_sphere (-v))),
  have h : cont_diff_on ‚Ñù ‚ä§ _ set.univ :=
    U.cont_diff.cont_diff_on,
  have H‚ÇÅ := (h.comp' cont_diff_on_stereo_to_fun).cont_mdiff_on,
  have H‚ÇÇ : cont_mdiff_on _ _ _ _ set.univ := hf.cont_mdiff_on,
  convert (H‚ÇÅ.of_le le_top).comp' H‚ÇÇ using 1,
  ext x,
  have hfxv : f x = -‚Üëv ‚Üî ‚ü™f x, -‚Üëv‚ü´_‚Ñù = 1,
  { have hfx : ‚à•f x‚à• = 1 := by simpa using hf' x,
    rw inner_eq_norm_mul_iff_of_norm_one hfx,
    exact norm_eq_of_mem_sphere (-v) },
  dsimp [chart_at],
  simp [not_iff_not, subtype.ext_iff, hfxv, real_inner_comm]
end
lemma cont_mdiff_neg_sphere {n : ‚Ñï} [fact (finrank ‚Ñù E = n + 1)] :
  cont_mdiff (ùì° n) (ùì° n) ‚àû (Œª x : sphere (0:E) 1, -x) :=
begin
instance : charted_space (euclidean_space ‚Ñù (fin 1)) circle := metric.sphere.charted_space
instance : smooth_manifold_with_corners (ùì° 1) circle :=
metric.sphere.smooth_manifold_with_corners
instance : lie_group (ùì° 1) circle :=
{ smooth_mul := begin
    apply cont_mdiff.cod_restrict_sphere,
    let c : circle ‚Üí ‚ÑÇ := coe,
    have h‚ÇÇ : cont_mdiff (ùìò(‚Ñù, ‚ÑÇ).prod ùìò(‚Ñù, ‚ÑÇ)) ùìò(‚Ñù, ‚ÑÇ) ‚àû (Œª (z : ‚ÑÇ √ó ‚ÑÇ), z.fst * z.snd),
    { rw cont_mdiff_iff,
      exact ‚ü®continuous_mul, Œª x y, (cont_diff_mul.restrict_scalars ‚Ñù).cont_diff_on‚ü© },
    suffices h‚ÇÅ : cont_mdiff _ _ _ (prod.map c c),
    { apply h‚ÇÇ.comp h‚ÇÅ },
lemma cont_mdiff_exp_map_circle : cont_mdiff ùìò(‚Ñù, ‚Ñù) (ùì° 1) ‚àû exp_map_circle :=
((cont_diff_exp.comp (cont_diff_id.smul cont_diff_const)).cont_mdiff).cod_restrict_sphere _
end circle
