import combinatorics.simple_graph.coloring
universes u v
namespace simple_graph
variables {V : Type u} (G : simple_graph V)
structure partition :=
(parts : set (set V))
(is_partition : setoid.is_partition parts)
(independent : ∀ (s ∈ parts), is_antichain G.adj s)
def partition.parts_card_le {G : simple_graph V} (P : G.partition) (n : ℕ) : Prop :=
∃ (h : P.parts.finite), h.to_finset.card ≤ n
def partitionable (n : ℕ) : Prop :=
∃ (P : G.partition), P.parts_card_le n
namespace partition
variables {G} (P : G.partition)
def part_of_vertex (v : V) : set V :=
classical.some (P.is_partition.2 v)
lemma part_of_vertex_mem (v : V) : P.part_of_vertex v ∈ P.parts :=
by { obtain ⟨h, -⟩ := (P.is_partition.2 v).some_spec.1, exact h, }
lemma mem_part_of_vertex (v : V) : v ∈ P.part_of_vertex v :=
by { obtain ⟨⟨h1, h2⟩, h3⟩ := (P.is_partition.2 v).some_spec, exact h2.1 }
lemma part_of_vertex_ne_of_adj {v w : V} (h : G.adj v w) :
  P.part_of_vertex v ≠ P.part_of_vertex w :=
begin
  intro hn,
  have hw := P.mem_part_of_vertex w,
  rw ←hn at hw,
  exact P.independent _ (P.part_of_vertex_mem v) (P.mem_part_of_vertex v) hw (G.ne_of_adj h) h,
end
def to_coloring : G.coloring P.parts :=
coloring.mk (λ v, ⟨P.part_of_vertex v, P.part_of_vertex_mem v⟩) $ λ _ _ hvw,
by { rw [ne.def, subtype.mk_eq_mk], exact P.part_of_vertex_ne_of_adj hvw }
def to_coloring' : G.coloring (set V) :=
coloring.mk P.part_of_vertex $ λ _ _ hvw, P.part_of_vertex_ne_of_adj hvw
lemma to_colorable [fintype P.parts] : G.colorable (fintype.card P.parts) :=
P.to_coloring.to_colorable
end partition
variables {G}
@[simps]
def coloring.to_partition {α : Type v} (C : G.coloring α) : G.partition :=
{ parts := C.color_classes,
  is_partition := C.color_classes_is_partition,
  independent := begin
    rintros s ⟨c, rfl⟩,
    apply C.color_classes_independent,
  end }
instance : inhabited (partition G) := ⟨G.self_coloring.to_partition⟩
lemma partitionable_iff_colorable {n : ℕ} :
  G.partitionable n ↔ G.colorable n :=
begin
  split,
  { rintro ⟨P, hf, h⟩,
    haveI : fintype P.parts := hf.fintype,
    rw set.finite.card_to_finset at h,
    apply P.to_colorable.mono h, },
  { rintro ⟨C⟩,
    refine ⟨C.to_partition, C.color_classes_finite_of_fintype, le_trans _ (fintype.card_fin n).le⟩,
    generalize_proofs h,
    haveI : fintype C.color_classes := C.color_classes_finite_of_fintype.fintype,
    rw h.card_to_finset,
    exact C.card_color_classes_le },
end
end simple_graph
