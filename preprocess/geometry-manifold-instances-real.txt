import linear_algebra.finite_dimensional
import geometry.manifold.smooth_manifold_with_corners
import analysis.inner_product_space.pi_L2
noncomputable theory
open set function
open_locale manifold
def euclidean_half_space (n : ‚Ñï) [has_zero (fin n)] : Type :=
{x : euclidean_space ‚Ñù (fin n) // 0 ‚â§ x 0}
def euclidean_quadrant (n : ‚Ñï) : Type := {x : euclidean_space ‚Ñù (fin n) // ‚àÄi:fin n, 0 ‚â§ x i}
section
local attribute [reducible] euclidean_half_space euclidean_quadrant
variable {n : ‚Ñï}
instance [has_zero (fin n)] : topological_space (euclidean_half_space n) := by apply_instance
instance : topological_space (euclidean_quadrant n) := by apply_instance
instance [has_zero (fin n)] : inhabited (euclidean_half_space n) := ‚ü®‚ü®0, le_rfl‚ü©‚ü©
instance : inhabited (euclidean_quadrant n) := ‚ü®‚ü®0, Œª i, le_rfl‚ü©‚ü©
lemma range_half_space (n : ‚Ñï) [has_zero (fin n)] :
  range (Œªx : euclidean_half_space n, x.val) = {y | 0 ‚â§ y 0} :=
by simp
lemma range_quadrant (n : ‚Ñï) :
  range (Œªx : euclidean_quadrant n, x.val) = {y | ‚àÄi:fin n, 0 ‚â§ y i} :=
by simp
end
def model_with_corners_euclidean_half_space (n : ‚Ñï) [has_zero (fin n)] :
  model_with_corners ‚Ñù (euclidean_space ‚Ñù (fin n)) (euclidean_half_space n) :=
{ to_fun      := subtype.val,
  inv_fun     := Œªx, ‚ü®update x 0 (max (x 0) 0), by simp [le_refl]‚ü©,
  source      := univ,
  target      := {x | 0 ‚â§ x 0},
  map_source' := Œªx hx, x.property,
  map_target' := Œªx hx, mem_univ _,
  left_inv'   := Œª ‚ü®xval, xprop‚ü© hx, begin
    rw [subtype.mk_eq_mk, update_eq_iff],
    exact ‚ü®max_eq_left xprop, Œª i _, rfl‚ü©
  end,
  right_inv'  := Œªx hx, update_eq_iff.2 ‚ü®max_eq_left hx, Œª i _, rfl‚ü©,
  source_eq    := rfl,
  unique_diff' :=
    have this : unique_diff_on ‚Ñù _ :=
      unique_diff_on.pi (fin n) (Œª _, ‚Ñù) _ _ (Œª i ‚àà ({0} : set (fin n)), unique_diff_on_Ici 0),
    by simpa only [singleton_pi] using this,
  continuous_to_fun  := continuous_subtype_val,
  continuous_inv_fun := continuous_subtype_mk _ $ continuous_id.update 0 $
    (continuous_apply 0).max continuous_const }
def model_with_corners_euclidean_quadrant (n : ‚Ñï) :
  model_with_corners ‚Ñù (euclidean_space ‚Ñù (fin n)) (euclidean_quadrant n) :=
{ to_fun      := subtype.val,
  inv_fun     := Œªx, ‚ü®Œªi, max (x i) 0, Œªi, by simp only [le_refl, or_true, le_max_iff]‚ü©,
  source      := univ,
  target      := {x | ‚àÄ i, 0 ‚â§ x i},
  map_source' := Œªx hx, by simpa only [subtype.range_val] using x.property,
  map_target' := Œªx hx, mem_univ _,
  left_inv'   := Œª ‚ü®xval, xprop‚ü© hx, by { ext i, simp only [subtype.coe_mk, xprop i, max_eq_left] },
  right_inv' := Œª x hx, by { ext1 i, simp only [hx i, max_eq_left] },
  source_eq    := rfl,
  unique_diff' :=
    have this : unique_diff_on ‚Ñù _ :=
      unique_diff_on.univ_pi (fin n) (Œª _, ‚Ñù) _ (Œª i, unique_diff_on_Ici 0),
    by simpa only [pi_univ_Ici] using this,
  continuous_to_fun  := continuous_subtype_val,
  continuous_inv_fun := continuous_subtype_mk _ $ continuous_pi $ Œª i,
    (continuous_id.max continuous_const).comp (continuous_apply i) }
localized "notation `ùì° `n :=
  (model_with_corners_self ‚Ñù (euclidean_space ‚Ñù (fin n)) :
    model_with_corners ‚Ñù (euclidean_space ‚Ñù (fin n)) (euclidean_space ‚Ñù (fin n)))" in manifold
localized "notation `ùì°‚àÇ `n :=
  (model_with_corners_euclidean_half_space n :
    model_with_corners ‚Ñù (euclidean_space ‚Ñù (fin n)) (euclidean_half_space n))" in manifold
def Icc_left_chart (x y : ‚Ñù) [fact (x < y)] :
  local_homeomorph (Icc x y) (euclidean_half_space 1) :=
{ source      := {z : Icc x y | z.val < y},
  target      := {z : euclidean_half_space 1 | z.val 0 < y - x},
  to_fun      := Œª(z : Icc x y), ‚ü®Œªi, z.val - x, sub_nonneg.mpr z.property.1‚ü©,
  inv_fun     := Œªz, ‚ü®min (z.val 0 + x) y, by simp [le_refl, z.prop, le_of_lt (fact.out (x < y))]‚ü©,
  map_source' := by simp only [imp_self, sub_lt_sub_iff_right, mem_set_of_eq, forall_true_iff],
  map_target' :=
    by { simp only [min_lt_iff, mem_set_of_eq], assume z hz, left,
         dsimp [-subtype.val_eq_coe] at hz, linarith },
  left_inv'   := begin
    rintros ‚ü®z, hz‚ü© h'z,
    simp only [mem_set_of_eq, mem_Icc] at hz h'z,
    simp only [hz, min_eq_left, sub_add_cancel]
  end,
  right_inv'  := begin
    rintros ‚ü®z, hz‚ü© h'z,
    rw subtype.mk_eq_mk,
    funext,
    dsimp at hz h'z,
    have A : x + z 0 ‚â§ y, by linarith,
    rw subsingleton.elim i 0,
    simp only [A, add_comm, add_sub_cancel', min_eq_left],
  end,
  open_source := begin
    have : is_open {z : ‚Ñù | z < y} := is_open_Iio,
    exact this.preimage continuous_subtype_val
  end,
  open_target := begin
    have : is_open {z : ‚Ñù | z < y - x} := is_open_Iio,
    have : is_open {z : euclidean_space ‚Ñù (fin 1) | z 0 < y - x} :=
      this.preimage (@continuous_apply (fin 1) (Œª _, ‚Ñù) _ 0),
    exact this.preimage continuous_subtype_val
  end,
  continuous_to_fun := begin
    apply continuous.continuous_on,
    apply continuous_subtype_mk,
    have : continuous (Œª (z : ‚Ñù) (i : fin 1), z - x) :=
      continuous.sub (continuous_pi $ Œªi, continuous_id) continuous_const,
    exact this.comp continuous_subtype_val,
  end,
  continuous_inv_fun := begin
    apply continuous.continuous_on,
    apply continuous_subtype_mk,
    have A : continuous (Œª z : ‚Ñù, min (z + x) y) :=
      (continuous_id.add continuous_const).min continuous_const,
    have B : continuous (Œªz : euclidean_space ‚Ñù (fin 1), z 0) := continuous_apply 0,
    exact (A.comp B).comp continuous_subtype_val
  end }
def Icc_right_chart (x y : ‚Ñù) [fact (x < y)] :
  local_homeomorph (Icc x y) (euclidean_half_space 1) :=
{ source      := {z : Icc x y | x < z.val},
  target      := {z : euclidean_half_space 1 | z.val 0 < y - x},
  to_fun      := Œª(z : Icc x y), ‚ü®Œªi, y - z.val, sub_nonneg.mpr z.property.2‚ü©,
  inv_fun     := Œªz,
    ‚ü®max (y - z.val 0) x, by simp [le_refl, z.prop, le_of_lt (fact.out (x < y)), sub_eq_add_neg]‚ü©,
  map_source' := by simp only [imp_self, mem_set_of_eq, sub_lt_sub_iff_left, forall_true_iff],
  map_target' :=
    by { simp only [lt_max_iff, mem_set_of_eq], assume z hz, left,
         dsimp [-subtype.val_eq_coe] at hz, linarith },
  left_inv'   := begin
    rintros ‚ü®z, hz‚ü© h'z,
    simp only [mem_set_of_eq, mem_Icc] at hz h'z,
    simp only [hz, sub_eq_add_neg, max_eq_left, add_add_neg_cancel'_right, neg_add_rev, neg_neg]
  end,
  right_inv'  := begin
    rintros ‚ü®z, hz‚ü© h'z,
    rw subtype.mk_eq_mk,
    funext,
    dsimp at hz h'z,
    have A : x ‚â§ y - z 0, by linarith,
    rw subsingleton.elim i 0,
    simp only [A, sub_sub_cancel, max_eq_left],
  end,
  open_source := begin
    have : is_open {z : ‚Ñù | x < z} := is_open_Ioi,
    exact this.preimage continuous_subtype_val
  end,
  open_target := begin
    have : is_open {z : ‚Ñù | z < y - x} := is_open_Iio,
    have : is_open {z : euclidean_space ‚Ñù (fin 1) | z 0 < y - x} :=
      this.preimage (@continuous_apply (fin 1) (Œª _, ‚Ñù) _ 0),
    exact this.preimage continuous_subtype_val
  end,
  continuous_to_fun := begin
    apply continuous.continuous_on,
    apply continuous_subtype_mk,
    have : continuous (Œª (z : ‚Ñù) (i : fin 1), y - z) :=
      continuous_const.sub (continuous_pi (Œªi, continuous_id)),
    exact this.comp continuous_subtype_val,
  end,
  continuous_inv_fun := begin
    apply continuous.continuous_on,
    apply continuous_subtype_mk,
    have A : continuous (Œª z : ‚Ñù, max (y - z) x) :=
      (continuous_const.sub continuous_id).max continuous_const,
    have B : continuous (Œªz : euclidean_space ‚Ñù (fin 1), z 0) := continuous_apply 0,
    exact (A.comp B).comp continuous_subtype_val
  end }
instance Icc_manifold (x y : ‚Ñù) [fact (x < y)] : charted_space (euclidean_half_space 1) (Icc x y) :=
{ atlas := {Icc_left_chart x y, Icc_right_chart x y},
  chart_at := Œªz, if z.val < y then Icc_left_chart x y else Icc_right_chart x y,
  mem_chart_source := Œªz, begin
    by_cases h' : z.val < y,
    { simp only [h', if_true],
      exact h' },
    { simp only [h', if_false],
      apply lt_of_lt_of_le (fact.out (x < y)),
      simpa only [not_lt] using h'}
  end,
  chart_mem_atlas := Œª z, by by_cases h' : (z : ‚Ñù) < y; simp [h'] }
instance Icc_smooth_manifold (x y : ‚Ñù) [fact (x < y)] :
  smooth_manifold_with_corners (ùì°‚àÇ 1) (Icc x y) :=
begin
  have M : cont_diff_on ‚Ñù ‚àû (Œªz : euclidean_space ‚Ñù (fin 1), - z + (Œªi, y - x)) univ,
  { rw cont_diff_on_univ,
    exact cont_diff_id.neg.add cont_diff_const },
  apply smooth_manifold_with_corners_of_cont_diff_on,
  assume e e' he he',
  simp only [atlas, mem_singleton_iff, mem_insert_iff] at he he',
  rcases he with rfl | rfl; rcases he' with rfl | rfl,
section
lemma fact_zero_lt_one : fact ((0 : ‚Ñù) < 1) := ‚ü®zero_lt_one‚ü©
local attribute [instance] fact_zero_lt_one
instance : charted_space (euclidean_half_space 1) (Icc (0 : ‚Ñù) 1) := by apply_instance
instance : smooth_manifold_with_corners (ùì°‚àÇ 1) (Icc (0 : ‚Ñù) 1) := by apply_instance
end
