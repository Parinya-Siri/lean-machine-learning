import analysis.normed_space.add_torsor
import linear_algebra.affine_space.ordered
import topology.continuous_function.basic
variables {X : Type*} [topological_space X]
open set filter topological_space
open_locale topological_space filter
namespace urysohns
@[protect_proj] structure CU (X : Type*) [topological_space X] :=
(C U : set X)
(closed_C : is_closed C)
(open_U : is_open U)
(subset : C ‚äÜ U)
instance : inhabited (CU X) := ‚ü®‚ü®‚àÖ, univ, is_closed_empty, is_open_univ, empty_subset _‚ü©‚ü©
variable [normal_space X]
namespace CU
@[simps C] def left (c : CU X) : CU X :=
{ C := c.C,
  U := (normal_exists_closure_subset c.closed_C c.open_U c.subset).some,
  closed_C := c.closed_C,
  open_U := (normal_exists_closure_subset c.closed_C c.open_U c.subset).some_spec.1,
  subset := (normal_exists_closure_subset c.closed_C c.open_U c.subset).some_spec.2.1 }
@[simps U] def right (c : CU X) : CU X :=
{ C := closure (normal_exists_closure_subset c.closed_C c.open_U c.subset).some,
  U := c.U,
  closed_C := is_closed_closure,
  open_U := c.open_U,
  subset := (normal_exists_closure_subset c.closed_C c.open_U c.subset).some_spec.2.2 }
lemma left_U_subset_right_C (c : CU X) : c.left.U ‚äÜ c.right.C :=
subset_closure
lemma left_U_subset (c : CU X) : c.left.U ‚äÜ c.U :=
subset.trans c.left_U_subset_right_C c.right.subset
lemma subset_right_C (c : CU X) : c.C ‚äÜ c.right.C :=
subset.trans c.left.subset c.left_U_subset_right_C
noncomputable def approx : ‚Ñï ‚Üí CU X ‚Üí X ‚Üí ‚Ñù
| 0 c x := indicator c.U·∂ú 1 x
| (n + 1) c x := midpoint ‚Ñù (approx n c.left x) (approx n c.right x)
lemma approx_of_mem_C (c : CU X) (n : ‚Ñï) {x : X} (hx : x ‚àà c.C) :
  c.approx n x = 0 :=
begin
  induction n with n ihn generalizing c,
  { exact indicator_of_not_mem (Œª hU, hU $ c.subset hx) _ },
  { simp only [approx],
    rw [ihn, ihn, midpoint_self],
    exacts [c.subset_right_C hx, hx] }
end
lemma approx_of_nmem_U (c : CU X) (n : ‚Ñï) {x : X} (hx : x ‚àâ c.U) :
  c.approx n x = 1 :=
begin
  induction n with n ihn generalizing c,
  { exact indicator_of_mem hx _ },
  { simp only [approx],
    rw [ihn, ihn, midpoint_self],
    exacts [hx, Œª hU, hx $ c.left_U_subset hU] }
end
lemma approx_nonneg (c : CU X) (n : ‚Ñï) (x : X) :
  0 ‚â§ c.approx n x :=
begin
  induction n with n ihn generalizing c,
  { exact indicator_nonneg (Œª _ _, zero_le_one) _ },
  { simp only [approx, midpoint_eq_smul_add, inv_of_eq_inv],
    refine mul_nonneg (inv_nonneg.2 zero_le_two) (add_nonneg _ _); apply ihn }
end
lemma approx_le_one (c : CU X) (n : ‚Ñï) (x : X) :
  c.approx n x ‚â§ 1 :=
begin
  induction n with n ihn generalizing c,
  { exact indicator_apply_le' (Œª _, le_rfl) (Œª _, zero_le_one) },
  { simp only [approx, midpoint_eq_smul_add, inv_of_eq_inv, smul_eq_mul, ‚Üê div_eq_inv_mul],
    refine iff.mpr (div_le_one zero_lt_two) (add_le_add _ _); apply ihn }
end
lemma bdd_above_range_approx (c : CU X) (x : X) : bdd_above (range $ Œª n, c.approx n x) :=
‚ü®1, Œª y ‚ü®n, hn‚ü©, hn ‚ñ∏ c.approx_le_one n x‚ü©
lemma approx_le_approx_of_U_sub_C {c‚ÇÅ c‚ÇÇ : CU X} (h : c‚ÇÅ.U ‚äÜ c‚ÇÇ.C) (n‚ÇÅ n‚ÇÇ : ‚Ñï) (x : X) :
  c‚ÇÇ.approx n‚ÇÇ x ‚â§ c‚ÇÅ.approx n‚ÇÅ x :=
begin
  by_cases hx : x ‚àà c‚ÇÅ.U,
  { calc approx n‚ÇÇ c‚ÇÇ x = 0              : approx_of_mem_C _ _ (h hx)
                    ... ‚â§ approx n‚ÇÅ c‚ÇÅ x : approx_nonneg _ _ _ },
  { calc approx n‚ÇÇ c‚ÇÇ x ‚â§ 1              : approx_le_one _ _ _
                    ... = approx n‚ÇÅ c‚ÇÅ x : (approx_of_nmem_U _ _ hx).symm }
end
lemma approx_mem_Icc_right_left (c : CU X) (n : ‚Ñï) (x : X) :
  c.approx n x ‚àà Icc (c.right.approx n x) (c.left.approx n x) :=
begin
  induction n with n ihn generalizing c,
  { exact ‚ü®le_rfl, indicator_le_indicator_of_subset (compl_subset_compl.2 c.left_U_subset)
      (Œª _, zero_le_one) _‚ü© },
  { simp only [approx, mem_Icc],
    refine ‚ü®midpoint_le_midpoint _ (ihn _).1, midpoint_le_midpoint (ihn _).2 _‚ü©;
      apply approx_le_approx_of_U_sub_C,
    exacts [subset_closure, subset_closure] }
end
lemma approx_le_succ (c : CU X) (n : ‚Ñï) (x : X) :
  c.approx n x ‚â§ c.approx (n + 1) x :=
begin
  induction n with n ihn generalizing c,
  { simp only [approx, right_U, right_le_midpoint],
    exact (approx_mem_Icc_right_left c 0 x).2 },
  { rw [approx, approx],
    exact midpoint_le_midpoint (ihn _) (ihn _) }
end
lemma approx_mono (c : CU X) (x : X) : monotone (Œª n, c.approx n x) :=
monotone_nat_of_le_succ $ Œª n, c.approx_le_succ n x
protected noncomputable def lim (c : CU X) (x : X) : ‚Ñù := ‚®Ü n, c.approx n x
lemma tendsto_approx_at_top (c : CU X) (x : X) :
  tendsto (Œª n, c.approx n x) at_top (ùìù $ c.lim x) :=
tendsto_at_top_csupr (c.approx_mono x) ‚ü®1, Œª x ‚ü®n, hn‚ü©, hn ‚ñ∏ c.approx_le_one _ _‚ü©
lemma lim_of_mem_C (c : CU X) (x : X) (h : x ‚àà c.C) : c.lim x = 0 :=
by simp only [CU.lim, approx_of_mem_C, h, csupr_const]
lemma lim_of_nmem_U (c : CU X) (x : X) (h : x ‚àâ c.U) : c.lim x = 1 :=
by simp only [CU.lim, approx_of_nmem_U c _ h, csupr_const]
lemma lim_eq_midpoint (c : CU X) (x : X) :
  c.lim x = midpoint ‚Ñù (c.left.lim x) (c.right.lim x) :=
begin
  refine tendsto_nhds_unique (c.tendsto_approx_at_top x) ((tendsto_add_at_top_iff_nat 1).1 _),
  simp only [approx],
  exact (c.left.tendsto_approx_at_top x).midpoint (c.right.tendsto_approx_at_top x)
end
lemma approx_le_lim (c : CU X) (x : X) (n : ‚Ñï) : c.approx n x ‚â§ c.lim x :=
le_csupr (c.bdd_above_range_approx x) _
lemma lim_nonneg (c : CU X) (x : X) : 0 ‚â§ c.lim x :=
(c.approx_nonneg 0 x).trans (c.approx_le_lim x 0)
lemma lim_le_one (c : CU X) (x : X) : c.lim x ‚â§ 1 :=
csupr_le $ Œª n, c.approx_le_one _ _
lemma lim_mem_Icc (c : CU X) (x : X) : c.lim x ‚àà Icc (0 : ‚Ñù) 1 :=
‚ü®c.lim_nonneg x, c.lim_le_one x‚ü©
lemma continuous_lim (c : CU X) : continuous c.lim :=
begin
  obtain ‚ü®h0, h1234, h1‚ü© : 0 < (2‚Åª¬π : ‚Ñù) ‚àß (2‚Åª¬π : ‚Ñù) < 3 / 4 ‚àß (3 / 4 : ‚Ñù) < 1 := by norm_num,
  refine continuous_iff_continuous_at.2
    (Œª x, (metric.nhds_basis_closed_ball_pow (h0.trans h1234) h1).tendsto_right_iff.2 $ Œª n _, _),
  simp only [metric.mem_closed_ball],
  induction n with n ihn generalizing c,
  { refine eventually_of_forall (Œª y, _),
    rw pow_zero,
    exact real.dist_le_of_mem_Icc_01 (c.lim_mem_Icc _) (c.lim_mem_Icc _) },
  { by_cases hxl : x ‚àà c.left.U,
    { filter_upwards [is_open.mem_nhds c.left.open_U hxl, ihn c.left] with _ hyl hyd,
      rw [pow_succ, c.lim_eq_midpoint, c.lim_eq_midpoint,
        c.right.lim_of_mem_C _ (c.left_U_subset_right_C hyl),
        c.right.lim_of_mem_C _ (c.left_U_subset_right_C hxl)],
      refine (dist_midpoint_midpoint_le _ _ _ _).trans _,
      rw [dist_self, add_zero, div_eq_inv_mul],
      exact mul_le_mul h1234.le hyd dist_nonneg (h0.trans h1234).le },
    { replace hxl : x ‚àà c.left.right.C·∂ú, from compl_subset_compl.2 c.left.right.subset hxl,
      filter_upwards [is_open.mem_nhds (is_open_compl_iff.2 c.left.right.closed_C) hxl,
        ihn c.left.right, ihn c.right] with y hyl hydl hydr,
      replace hxl : x ‚àâ c.left.left.U, from compl_subset_compl.2 c.left.left_U_subset_right_C hxl,
      replace hyl : y ‚àâ c.left.left.U, from compl_subset_compl.2 c.left.left_U_subset_right_C hyl,
      simp only [pow_succ, c.lim_eq_midpoint, c.left.lim_eq_midpoint,
        c.left.left.lim_of_nmem_U _ hxl, c.left.left.lim_of_nmem_U _ hyl],
      refine (dist_midpoint_midpoint_le _ _ _ _).trans _,
      refine (div_le_div_of_le_of_nonneg (add_le_add_right (dist_midpoint_midpoint_le _ _ _ _) _)
        zero_le_two).trans _,
      rw [dist_self, zero_add],
      refine (div_le_div_of_le_of_nonneg
        (add_le_add (div_le_div_of_le_of_nonneg hydl zero_le_two) hydr) zero_le_two).trans_eq _,
      generalize : (3 / 4 : ‚Ñù) ^ n = r,
      field_simp [(@zero_lt_two ‚Ñù _ _).ne'], ring } }
end
end CU
end urysohns
variable [normal_space X]
lemma exists_continuous_zero_one_of_closed {s t : set X} (hs : is_closed s) (ht : is_closed t)
  (hd : disjoint s t) :
  ‚àÉ f : C(X, ‚Ñù), eq_on f 0 s ‚àß eq_on f 1 t ‚àß ‚àÄ x, f x ‚àà Icc (0 : ‚Ñù) 1 :=
begin
