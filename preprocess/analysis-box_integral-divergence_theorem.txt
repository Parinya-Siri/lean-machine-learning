import analysis.box_integral.basic
import analysis.box_integral.partition.additive
import analysis.calculus.fderiv
open_locale classical big_operators nnreal ennreal topological_space box_integral
open continuous_linear_map (lsmul) filter set finset metric
noncomputable theory
universes u
variables {E : Type u} [normed_group E] [normed_space ‚Ñù E] {n : ‚Ñï}
namespace box_integral
local notation `‚Ñù‚Åø` := fin n ‚Üí ‚Ñù
local notation `‚Ñù‚Åø‚Å∫¬π` := fin (n + 1) ‚Üí ‚Ñù
local notation `E‚Åø‚Å∫¬π` := fin (n + 1) ‚Üí E
variables [complete_space E] (I : box (fin (n + 1))) {i : fin (n + 1)}
open measure_theory
lemma norm_volume_sub_integral_face_upper_sub_lower_smul_le
  {f : ‚Ñù‚Åø‚Å∫¬π ‚Üí E} {f' : ‚Ñù‚Åø‚Å∫¬π ‚ÜíL[‚Ñù] E} (hfc : continuous_on f I.Icc)
  {x : ‚Ñù‚Åø‚Å∫¬π} (hxI : x ‚àà I.Icc) {a : E} {Œµ : ‚Ñù} (h0 : 0 < Œµ)
  (hŒµ : ‚àÄ y ‚àà I.Icc, ‚à•f y - a - f' (y - x)‚à• ‚â§ Œµ * ‚à•y - x‚à•) {c : ‚Ñù‚â•0} (hc : I.distortion ‚â§ c) :
  ‚à•(‚àè j, (I.upper j - I.lower j)) ‚Ä¢ f' (pi.single i 1) -
    (integral (I.face i) ‚ä• (f ‚àò i.insert_nth (I.upper i)) box_additive_map.volume -
      integral (I.face i) ‚ä• (f ‚àò i.insert_nth (I.lower i)) box_additive_map.volume)‚à• ‚â§
    2 * Œµ * c * ‚àè j, (I.upper j - I.lower j) :=
begin
  have Hl : I.lower i ‚àà Icc (I.lower i) (I.upper i) := set.left_mem_Icc.2 (I.lower_le_upper i),
  have Hu : I.upper i ‚àà Icc (I.lower i) (I.upper i) := set.right_mem_Icc.2 (I.lower_le_upper i),
  have Hi : ‚àÄ x ‚àà Icc (I.lower i) (I.upper i),
    integrable.{0 u u} (I.face i) ‚ä• (f ‚àò i.insert_nth x) box_additive_map.volume,
    from Œª x hx, integrable_of_continuous_on _ (box.continuous_on_face_Icc hfc hx) volume,
  have : ‚àÄ y ‚àà (I.face i).Icc, ‚à•f' (pi.single i (I.upper i - I.lower i)) -
    (f (i.insert_nth (I.upper i) y) - f (i.insert_nth (I.lower i) y))‚à• ‚â§ 2 * Œµ * diam I.Icc,
  { intros y hy,
    set g := Œª y, f y - a - f' (y - x) with hg,
    change ‚àÄ y ‚àà I.Icc, ‚à•g y‚à• ‚â§ Œµ * ‚à•y - x‚à• at hŒµ,
    clear_value g, obtain rfl : f = Œª y, a + f' (y - x) + g y, by simp [hg],
    convert_to ‚à•g (i.insert_nth (I.lower i) y) - g (i.insert_nth (I.upper i) y)‚à• ‚â§ _,
    { congr' 1,
      have := fin.insert_nth_sub_same i (I.upper i) (I.lower i) y,
      simp only [‚Üê this, f'.map_sub], abel },
    { have : ‚àÄ z ‚àà Icc (I.lower i) (I.upper i), i.insert_nth z y ‚àà I.Icc,
        from Œª z hz, I.maps_to_insert_nth_face_Icc hz hy,
      replace hŒµ : ‚àÄ y ‚àà I.Icc, ‚à•g y‚à• ‚â§ Œµ * diam I.Icc,
      { intros y hy,
        refine (hŒµ y hy).trans (mul_le_mul_of_nonneg_left _ h0.le),
        rw ‚Üê dist_eq_norm,
        exact dist_le_diam_of_mem I.is_compact_Icc.bounded hy hxI },
      rw [two_mul, add_mul],
      exact norm_sub_le_of_le (hŒµ _ (this _ Hl)) (hŒµ _ (this _ Hu)) } },
  calc ‚à•(‚àè j, (I.upper j - I.lower j)) ‚Ä¢ f' (pi.single i 1) -
    (integral (I.face i) ‚ä• (f ‚àò i.insert_nth (I.upper i)) box_additive_map.volume -
      integral (I.face i) ‚ä• (f ‚àò i.insert_nth (I.lower i)) box_additive_map.volume)‚à•
      = ‚à•integral.{0 u u} (I.face i) ‚ä•
          (Œª (x : fin n ‚Üí ‚Ñù), f' (pi.single i (I.upper i - I.lower i)) -
          (f (i.insert_nth (I.upper i) x) - f (i.insert_nth (I.lower i) x)))
          box_additive_map.volume‚à• :
    begin
      rw [‚Üê integral_sub (Hi _ Hu) (Hi _ Hl), ‚Üê box.volume_face_mul i, mul_smul, ‚Üê box.volume_apply,
        ‚Üê box_additive_map.to_smul_apply, ‚Üê integral_const, ‚Üê box_additive_map.volume,
        ‚Üê integral_sub (integrable_const _) ((Hi _ Hu).sub (Hi _ Hl))],
      simp only [(‚àò), pi.sub_def, ‚Üê f'.map_smul, ‚Üê pi.single_smul', smul_eq_mul, mul_one]
    end
  ... ‚â§ (volume (I.face i : set ‚Ñù‚Åø)).to_real * (2 * Œµ * c * (I.upper i - I.lower i)) :
    begin
lemma has_integral_bot_pderiv (f : ‚Ñù‚Åø‚Å∫¬π ‚Üí E) (f' : ‚Ñù‚Åø‚Å∫¬π ‚Üí ‚Ñù‚Åø‚Å∫¬π ‚ÜíL[‚Ñù] E) (s : set ‚Ñù‚Åø‚Å∫¬π)
  (hs : s.countable) (Hs : ‚àÄ x ‚àà s, continuous_within_at f I.Icc x)
  (Hd : ‚àÄ x ‚àà I.Icc \ s, has_fderiv_within_at f (f' x) I.Icc x) (i : fin (n + 1)) :
  has_integral.{0 u u} I ‚ä• (Œª x, f' x (pi.single i 1)) box_additive_map.volume
    (integral.{0 u u} (I.face i) ‚ä• (Œª x, f (i.insert_nth (I.upper i) x)) box_additive_map.volume -
      integral.{0 u u} (I.face i) ‚ä• (Œª x, f (i.insert_nth (I.lower i) x))
        box_additive_map.volume) :=
begin
  have Hc : continuous_on f I.Icc,
  { intros x hx,
    by_cases hxs : x ‚àà s,
    exacts [Hs x hxs, (Hd x ‚ü®hx, hxs‚ü©).continuous_within_at] },
  set fI : ‚Ñù ‚Üí box (fin n) ‚Üí E := Œª y J,
    integral.{0 u u} J ‚ä• (Œª x, f (i.insert_nth y x)) box_additive_map.volume,
  set fb : Icc (I.lower i) (I.upper i) ‚Üí fin n ‚Üí·µá·µÉ[‚Üë(I.face i)] E :=
    Œª x, (integrable_of_continuous_on ‚ä• (box.continuous_on_face_Icc Hc x.2) volume).to_box_additive,
  set F : fin (n + 1) ‚Üí·µá·µÉ[I] E := box_additive_map.upper_sub_lower I i fI fb (Œª x hx J, rfl),
  change has_integral I ‚ä• (Œª x, f' x (pi.single i 1)) _ (F I),
  refine has_integral_of_le_Henstock_of_forall_is_o bot_le _ _ _ s hs _ _,
    exact (volume : measure ‚Ñù‚Åø‚Å∫¬π).to_box_additive.restrict _ le_top },
  { exact Œª J, ennreal.to_real_nonneg },
  { intros c x hx Œµ Œµ0,
    have : ‚àÄ·∂† Œ¥ in ùìù[>] (0 : ‚Ñù), Œ¥ ‚àà Ioc (0 : ‚Ñù) (1 / 2) ‚àß
      (‚àÄ y‚ÇÅ y‚ÇÇ ‚àà closed_ball x Œ¥ ‚à© I.Icc, ‚à•f y‚ÇÅ - f y‚ÇÇ‚à• ‚â§ Œµ / 2) ‚àß
      ((2 * Œ¥) ^ (n + 1) * ‚à•f' x (pi.single i 1)‚à• ‚â§ Œµ / 2),
    { refine eventually.and _ (eventually.and _ _),
      { exact Ioc_mem_nhds_within_Ioi ‚ü®le_rfl, one_half_pos‚ü© },
      { rcases ((nhds_within_has_basis nhds_basis_closed_ball _).tendsto_iff
          nhds_basis_closed_ball).1 (Hs x hx.2) _ (half_pos $ half_pos Œµ0) with ‚ü®Œ¥‚ÇÅ, Œ¥‚ÇÅ0, hŒ¥‚ÇÅ‚ü©,
        filter_upwards [Ioc_mem_nhds_within_Ioi ‚ü®le_rfl, Œ¥‚ÇÅ0‚ü©] with Œ¥ hŒ¥ y‚ÇÅ hy‚ÇÅ y‚ÇÇ hy‚ÇÇ,
        have : closed_ball x Œ¥ ‚à© I.Icc ‚äÜ closed_ball x Œ¥‚ÇÅ ‚à© I.Icc,
          from inter_subset_inter_left _ (closed_ball_subset_closed_ball hŒ¥.2),
        rw ‚Üê dist_eq_norm,
        calc dist (f y‚ÇÅ) (f y‚ÇÇ) ‚â§ dist (f y‚ÇÅ) (f x) + dist (f y‚ÇÇ) (f x) : dist_triangle_right _ _ _
        ... ‚â§ Œµ / 2 / 2 + Œµ / 2 / 2 : add_le_add (hŒ¥‚ÇÅ _ $ this hy‚ÇÅ) (hŒ¥‚ÇÅ _ $ this hy‚ÇÇ)
        ... = Œµ / 2 : add_halves _ },
      { have : continuous_within_at (Œª Œ¥, (2 * Œ¥) ^ (n + 1) * ‚à•f' x (pi.single i 1)‚à•)
          (Ioi (0 : ‚Ñù)) 0 := ((continuous_within_at_id.const_mul _).pow _).mul_const _,
        refine this.eventually (ge_mem_nhds _),
        simpa using half_pos Œµ0 } },
    rcases this.exists with ‚ü®Œ¥, ‚ü®hŒ¥0, hŒ¥12‚ü©, hdfŒ¥, hŒ¥‚ü©,
    refine ‚ü®Œ¥, hŒ¥0, Œª J hJI hJŒ¥ hxJ hJc, add_halves Œµ ‚ñ∏ _‚ü©,
    have Hl : J.lower i ‚àà Icc (J.lower i) (J.upper i) := set.left_mem_Icc.2 (J.lower_le_upper i),
    have Hu : J.upper i ‚àà Icc (J.lower i) (J.upper i) := set.right_mem_Icc.2 (J.lower_le_upper i),
    have Hi : ‚àÄ x ‚àà Icc (J.lower i) (J.upper i),
      integrable.{0 u u} (J.face i) ‚ä• (Œª y, f (i.insert_nth x y)) box_additive_map.volume,
      from Œª x hx, integrable_of_continuous_on _
        (box.continuous_on_face_Icc (Hc.mono $ box.le_iff_Icc.1 hJI) hx) volume,
    have hJŒ¥' : J.Icc ‚äÜ closed_ball x Œ¥ ‚à© I.Icc,
      from subset_inter hJŒ¥ (box.le_iff_Icc.1 hJI),
    have Hmaps : ‚àÄ z ‚àà Icc (J.lower i) (J.upper i),
      maps_to (i.insert_nth z) (J.face i).Icc (closed_ball x Œ¥ ‚à© I.Icc),
      from Œª z hz, (J.maps_to_insert_nth_face_Icc hz).mono subset.rfl hJŒ¥',
    simp only [dist_eq_norm, F, fI], dsimp,
    rw [‚Üê integral_sub (Hi _ Hu) (Hi _ Hl)],
    refine (norm_sub_le _ _).trans (add_le_add _ _),
    { simp_rw [box_additive_map.volume_apply, norm_smul, real.norm_eq_abs, abs_prod],
      refine (mul_le_mul_of_nonneg_right _ $ norm_nonneg _).trans hŒ¥,
      have : ‚àÄ j, |J.upper j - J.lower j| ‚â§ 2 * Œ¥,
      { intro j,
        calc dist (J.upper j) (J.lower j) ‚â§ dist J.upper J.lower : dist_le_pi_dist _ _ _
        ... ‚â§ dist J.upper x + dist J.lower x : dist_triangle_right _ _ _
        ... ‚â§ Œ¥ + Œ¥ : add_le_add (hJŒ¥ J.upper_mem_Icc) (hJŒ¥ J.lower_mem_Icc)
        ... = 2 * Œ¥ : (two_mul Œ¥).symm },
      calc (‚àè j, |J.upper j - J.lower j|) ‚â§ ‚àè j : fin (n + 1), (2 * Œ¥) :
        prod_le_prod (Œª _ _ , abs_nonneg _) (Œª j hj, this j)
      ... = (2 * Œ¥) ^ (n + 1) : by simp },
    { refine (norm_integral_le_of_le_const (Œª y hy,
        hdfŒ¥ _ (Hmaps _ Hu hy) _ (Hmaps _ Hl hy)) _).trans _,
      refine (mul_le_mul_of_nonneg_right _ (half_pos Œµ0).le).trans_eq (one_mul _),
      rw [box.coe_eq_pi, real.volume_pi_Ioc_to_real (box.lower_le_upper _)],
      refine prod_le_one (Œª _ _, sub_nonneg.2 $ box.lower_le_upper _ _) (Œª j hj, _),
      calc J.upper (i.succ_above j) - J.lower (i.succ_above j)
          ‚â§ dist (J.upper (i.succ_above j)) (J.lower (i.succ_above j)) : le_abs_self _
      ... ‚â§ dist J.upper J.lower : dist_le_pi_dist J.upper J.lower (i.succ_above j)
      ... ‚â§ dist J.upper x + dist J.lower x : dist_triangle_right _ _ _
      ... ‚â§ Œ¥ + Œ¥ : add_le_add (hJŒ¥ J.upper_mem_Icc) (hJŒ¥ J.lower_mem_Icc)
      ... ‚â§ 1 / 2 + 1 / 2 : add_le_add hŒ¥12 hŒ¥12
      ... = 1 : add_halves 1 } },
  { intros c x hx Œµ Œµ0,
    rcases exists_pos_mul_lt Œµ0 (2 * c) with ‚ü®Œµ', Œµ'0, hlt‚ü©,
    rcases (nhds_within_has_basis nhds_basis_closed_ball _).mem_iff.1 ((Hd x hx).def Œµ'0)
      with ‚ü®Œ¥, Œ¥0, HŒ¥‚ü©,
    refine ‚ü®Œ¥, Œ¥0, Œª J hle hJŒ¥ hxJ hJc, _‚ü©,
    simp only [box_additive_map.volume_apply, box.volume_apply, dist_eq_norm],
    refine (norm_volume_sub_integral_face_upper_sub_lower_smul_le _
      (Hc.mono $ box.le_iff_Icc.1 hle) hxJ Œµ'0 (Œª y hy, HŒ¥ _) (hJc rfl)).trans _,
    { exact ‚ü®hJŒ¥ hy, box.le_iff_Icc.1 hle hy‚ü© },
    { rw [mul_right_comm (2 : ‚Ñù), ‚Üê box.volume_apply],
      exact mul_le_mul_of_nonneg_right hlt.le ennreal.to_real_nonneg } }
end
lemma has_integral_bot_divergence_of_forall_has_deriv_within_at
  (f : ‚Ñù‚Åø‚Å∫¬π ‚Üí E‚Åø‚Å∫¬π) (f' : ‚Ñù‚Åø‚Å∫¬π ‚Üí ‚Ñù‚Åø‚Å∫¬π ‚ÜíL[‚Ñù] E‚Åø‚Å∫¬π) (s : set ‚Ñù‚Åø‚Å∫¬π) (hs : s.countable)
  (Hs : ‚àÄ x ‚àà s, continuous_within_at f I.Icc x)
  (Hd : ‚àÄ x ‚àà I.Icc \ s, has_fderiv_within_at f (f' x) I.Icc x) :
  has_integral.{0 u u} I ‚ä• (Œª x, ‚àë i, f' x (pi.single i 1) i)
    box_additive_map.volume
    (‚àë i, (integral.{0 u u} (I.face i) ‚ä• (Œª x, f (i.insert_nth (I.upper i) x) i)
      box_additive_map.volume -
      integral.{0 u u} (I.face i) ‚ä• (Œª x, f (i.insert_nth (I.lower i) x) i)
        box_additive_map.volume)) :=
begin
  refine has_integral_sum (Œª i hi, _), clear hi,
  simp only [has_fderiv_within_at_pi', continuous_within_at_pi] at Hd Hs,
  convert has_integral_bot_pderiv I _ _ s hs (Œª x hx, Hs x hx i) (Œª x hx, Hd x hx i) i
end
end box_integral
