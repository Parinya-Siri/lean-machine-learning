import tactic.core
namespace tactic
@[derive decidable_eq]
inductive decl_reducibility
| reducible
| semireducible
| irreducible
instance : inhabited decl_reducibility :=
⟨decl_reducibility.semireducible⟩
meta def get_decl_reducibility (n : name) : tactic decl_reducibility :=
do is_irred ← has_attribute' `irreducible n,
   if is_irred then pure decl_reducibility.irreducible else
do is_red ← has_attribute' `reducible n,
   if is_red then pure decl_reducibility.reducible else
do e ← get_env,
   if e.contains n then pure decl_reducibility.semireducible else
   fail format!"get_decl_reducibility: no declaration {n}"
def decl_reducibility.to_attribute : decl_reducibility → name
| decl_reducibility.reducible := `reducible
| decl_reducibility.semireducible := `semireducible
| decl_reducibility.irreducible := `irreducible
meta def set_decl_reducibility (n : name) (r : decl_reducibility) (persistent := ff)
  : tactic unit :=
set_basic_attribute r.to_attribute n persistent
meta def with_local_reducibility {α : Type*} (n : name) (r : decl_reducibility)
  (body : tactic α) : tactic α :=
do r' ← get_decl_reducibility n,
   bracket (set_decl_reducibility n r) body (set_decl_reducibility n r')
end tactic
