import algebra.big_operators.finprod
import set_theory.ordinal.basic
import topology.continuous_function.algebra
import topology.paracompact
import topology.shrinking_lemma
import topology.urysohns_lemma
universes u v
open function set filter
open_locale big_operators topological_space classical
noncomputable theory
structure partition_of_unity (Œπ X : Type*) [topological_space X] (s : set X := univ) :=
(to_fun : Œπ ‚Üí C(X, ‚Ñù))
(locally_finite' : locally_finite (Œª i, support (to_fun i)))
(nonneg' : 0 ‚â§ to_fun)
(sum_eq_one' : ‚àÄ x ‚àà s, ‚àë·∂† i, to_fun i x = 1)
(sum_le_one' : ‚àÄ x, ‚àë·∂† i, to_fun i x ‚â§ 1)
structure bump_covering (Œπ X : Type*) [topological_space X] (s : set X := univ) :=
(to_fun : Œπ ‚Üí C(X, ‚Ñù))
(locally_finite' : locally_finite (Œª i, support (to_fun i)))
(nonneg' : 0 ‚â§ to_fun)
(le_one' : to_fun ‚â§ 1)
(eventually_eq_one' : ‚àÄ x ‚àà s, ‚àÉ i, to_fun i =·∂†[ùìù x] 1)
variables {Œπ : Type u} {X : Type v} [topological_space X]
namespace partition_of_unity
variables {s : set X} (f : partition_of_unity Œπ X s)
instance : has_coe_to_fun (partition_of_unity Œπ X s) (Œª _, Œπ ‚Üí C(X, ‚Ñù)) := ‚ü®to_fun‚ü©
protected lemma locally_finite : locally_finite (Œª i, support (f i)) :=
f.locally_finite'
lemma nonneg (i : Œπ) (x : X) : 0 ‚â§ f i x := f.nonneg' i x
lemma sum_eq_one {x : X} (hx : x ‚àà s) : ‚àë·∂† i, f i x = 1 := f.sum_eq_one' x hx
lemma sum_le_one (x : X) : ‚àë·∂† i, f i x ‚â§ 1 := f.sum_le_one' x
lemma sum_nonneg (x : X) : 0 ‚â§ ‚àë·∂† i, f i x := finsum_nonneg $ Œª i, f.nonneg i x
lemma le_one (i : Œπ) (x : X) : f i x ‚â§ 1 :=
(single_le_finsum i (f.locally_finite.point_finite x) (Œª j, f.nonneg j x)).trans (f.sum_le_one x)
def is_subordinate (U : Œπ ‚Üí set X) : Prop :=
‚àÄ i, tsupport (f i) ‚äÜ U i
variables {f}
lemma exists_finset_nhd_support_subset {U : Œπ ‚Üí set X}
  (hso : f.is_subordinate U) (ho : ‚àÄ i, is_open (U i)) (x : X) :
  ‚àÉ (is : finset Œπ) {n : set X} (hn‚ÇÅ : n ‚àà ùìù x) (hn‚ÇÇ : n ‚äÜ ‚ãÇ i ‚àà is, U i), ‚àÄ (z ‚àà n),
    support (Œª i, f i z) ‚äÜ is :=
f.locally_finite.exists_finset_nhd_support_subset hso ho x
end partition_of_unity
namespace bump_covering
variables {s : set X} (f : bump_covering Œπ X s)
instance : has_coe_to_fun (bump_covering Œπ X s) (Œª _, Œπ ‚Üí C(X, ‚Ñù)) := ‚ü®to_fun‚ü©
protected lemma locally_finite : locally_finite (Œª i, support (f i)) :=
f.locally_finite'
protected lemma point_finite (x : X) : {i | f i x ‚â† 0}.finite :=
f.locally_finite.point_finite x
lemma nonneg (i : Œπ) (x : X) : 0 ‚â§ f i x := f.nonneg' i x
lemma le_one (i : Œπ) (x : X) : f i x ‚â§ 1 := f.le_one' i x
protected def single (i : Œπ) (s : set X) : bump_covering Œπ X s :=
{ to_fun := pi.single i 1,
  locally_finite' := Œª x,
    begin
      refine ‚ü®univ, univ_mem, (finite_singleton i).subset _‚ü©,
      rintro j ‚ü®x, hx, -‚ü©,
      contrapose! hx,
      rw [mem_singleton_iff] at hx,
      simp [hx]
    end,
  nonneg' := le_update_iff.2 ‚ü®Œª x, zero_le_one, Œª _ _, le_rfl‚ü©,
  le_one' := update_le_iff.2 ‚ü®le_rfl, Œª _ _ _, zero_le_one‚ü©,
  eventually_eq_one' := Œª x _, ‚ü®i, by simp‚ü© }
@[simp] lemma coe_single (i : Œπ) (s : set X) : ‚áë(bump_covering.single i s) = pi.single i 1 := rfl
instance [inhabited Œπ] : inhabited (bump_covering Œπ X s) :=
‚ü®bump_covering.single default s‚ü©
def is_subordinate (f : bump_covering Œπ X s) (U : Œπ ‚Üí set X) : Prop :=
‚àÄ i, tsupport (f i) ‚äÜ U i
lemma is_subordinate.mono {f : bump_covering Œπ X s} {U V : Œπ ‚Üí set X} (hU : f.is_subordinate U)
  (hV : ‚àÄ i, U i ‚äÜ V i) :
  f.is_subordinate V :=
Œª i, subset.trans (hU i) (hV i)
lemma exists_is_subordinate_of_locally_finite_of_prop [normal_space X] (p : (X ‚Üí ‚Ñù) ‚Üí Prop)
  (h01 : ‚àÄ s t, is_closed s ‚Üí is_closed t ‚Üí disjoint s t ‚Üí
    ‚àÉ f : C(X, ‚Ñù), p f ‚àß eq_on f 0 s ‚àß eq_on f 1 t ‚àß ‚àÄ x, f x ‚àà Icc (0 : ‚Ñù) 1)
  (hs : is_closed s) (U : Œπ ‚Üí set X) (ho : ‚àÄ i, is_open (U i)) (hf : locally_finite U)
  (hU : s ‚äÜ ‚ãÉ i, U i) :
  ‚àÉ f : bump_covering Œπ X s, (‚àÄ i, p (f i)) ‚àß f.is_subordinate U :=
begin
  rcases exists_subset_Union_closure_subset hs ho (Œª x _, hf.point_finite x) hU
    with ‚ü®V, hsV, hVo, hVU‚ü©,
  have hVU' : ‚àÄ i, V i ‚äÜ U i, from Œª i, subset.trans subset_closure (hVU i),
  rcases exists_subset_Union_closure_subset hs hVo
    (Œª x _, (hf.subset hVU').point_finite x) hsV with ‚ü®W, hsW, hWo, hWV‚ü©,
  choose f hfp hf0 hf1 hf01
    using Œª i, h01 _ _ (is_closed_compl_iff.2 $ hVo i)
      is_closed_closure (disjoint_right.2 $ Œª x hx, not_not.2 (hWV i hx)),
  have hsupp : ‚àÄ i, support (f i) ‚äÜ V i,
    from Œª i, support_subset_iff'.2 (hf0 i),
  refine ‚ü®‚ü®f, hf.subset (Œª i, subset.trans (hsupp i) (hVU' i)),
    Œª i x, (hf01 i x).1, Œª i x, (hf01 i x).2, Œª x hx, _‚ü©, hfp,
    Œª i, subset.trans (closure_mono (hsupp i)) (hVU i)‚ü©,
  rcases mem_Union.1 (hsW hx) with ‚ü®i, hi‚ü©,
  exact ‚ü®i, ((hf1 i).mono subset_closure).eventually_eq_of_mem ((hWo i).mem_nhds hi)‚ü©
end
lemma exists_is_subordinate_of_locally_finite [normal_space X] (hs : is_closed s)
  (U : Œπ ‚Üí set X) (ho : ‚àÄ i, is_open (U i)) (hf : locally_finite U)
  (hU : s ‚äÜ ‚ãÉ i, U i) :
  ‚àÉ f : bump_covering Œπ X s, f.is_subordinate U :=
let ‚ü®f, _, hfU‚ü© :=
  exists_is_subordinate_of_locally_finite_of_prop (Œª _, true)
    (Œª s t hs ht hd, (exists_continuous_zero_one_of_closed hs ht hd).imp $ Œª f hf, ‚ü®trivial, hf‚ü©)
    hs U ho hf hU
in ‚ü®f, hfU‚ü©
lemma exists_is_subordinate_of_prop [normal_space X] [paracompact_space X] (p : (X ‚Üí ‚Ñù) ‚Üí Prop)
  (h01 : ‚àÄ s t, is_closed s ‚Üí is_closed t ‚Üí disjoint s t ‚Üí
    ‚àÉ f : C(X, ‚Ñù), p f ‚àß eq_on f 0 s ‚àß eq_on f 1 t ‚àß ‚àÄ x, f x ‚àà Icc (0 : ‚Ñù) 1)
  (hs : is_closed s) (U : Œπ ‚Üí set X) (ho : ‚àÄ i, is_open (U i)) (hU : s ‚äÜ ‚ãÉ i, U i) :
  ‚àÉ f : bump_covering Œπ X s, (‚àÄ i, p (f i)) ‚àß f.is_subordinate U :=
begin
  rcases precise_refinement_set hs _ ho hU with ‚ü®V, hVo, hsV, hVf, hVU‚ü©,
  rcases exists_is_subordinate_of_locally_finite_of_prop p h01 hs V hVo hVf hsV with ‚ü®f, hfp, hf‚ü©,
  exact ‚ü®f, hfp, hf.mono hVU‚ü©
end
lemma exists_is_subordinate [normal_space X] [paracompact_space X]
  (hs : is_closed s) (U : Œπ ‚Üí set X) (ho : ‚àÄ i, is_open (U i)) (hU : s ‚äÜ ‚ãÉ i, U i) :
  ‚àÉ f : bump_covering Œπ X s, f.is_subordinate U :=
begin
  rcases precise_refinement_set hs _ ho hU with ‚ü®V, hVo, hsV, hVf, hVU‚ü©,
  rcases exists_is_subordinate_of_locally_finite hs V hVo hVf hsV with ‚ü®f, hf‚ü©,
  exact ‚ü®f, hf.mono hVU‚ü©
end
def ind (x : X) (hx : x ‚àà s) : Œπ := (f.eventually_eq_one' x hx).some
lemma eventually_eq_one (x : X) (hx : x ‚àà s) : f (f.ind x hx) =·∂†[ùìù x] 1 :=
(f.eventually_eq_one' x hx).some_spec
lemma ind_apply (x : X) (hx : x ‚àà s) : f (f.ind x hx) x = 1 :=
(f.eventually_eq_one x hx).eq_of_nhds
def to_pou_fun (i : Œπ) (x : X) : ‚Ñù :=
f i x * ‚àè·∂† j (hj : well_ordering_rel j i), (1 - f j x)
lemma to_pou_fun_zero_of_zero {i : Œπ} {x : X} (h : f i x = 0) :
  f.to_pou_fun i x = 0 :=
by rw [to_pou_fun, h, zero_mul]
lemma support_to_pou_fun_subset (i : Œπ) :
  support (f.to_pou_fun i) ‚äÜ support (f i) :=
 Œª x, mt $ f.to_pou_fun_zero_of_zero
lemma to_pou_fun_eq_mul_prod (i : Œπ) (x : X) (t : finset Œπ)
  (ht : ‚àÄ j, well_ordering_rel j i ‚Üí f j x ‚â† 0 ‚Üí j ‚àà t) :
  f.to_pou_fun i x = f i x * ‚àè j in t.filter (Œª j, well_ordering_rel j i), (1 - f j x) :=
begin
  refine congr_arg _ (finprod_cond_eq_prod_of_cond_iff _ (Œª j hj, _)),
  rw [ne.def, sub_eq_self] at hj,
  rw [finset.mem_filter, iff.comm, and_iff_right_iff_imp],
  exact flip (ht j) hj
end
lemma sum_to_pou_fun_eq (x : X) :
  ‚àë·∂† i, f.to_pou_fun i x = 1 - ‚àè·∂† i, (1 - f i x) :=
begin
  set s := (f.point_finite x).to_finset,
  have hs : (s : set Œπ) = {i | f i x ‚â† 0} := finite.coe_to_finset _,
  have A : support (Œª i, to_pou_fun f i x) ‚äÜ s,
  { rw hs,
    exact Œª i hi, f.support_to_pou_fun_subset i hi },
  have B : mul_support (Œª i, 1 - f i x) ‚äÜ s,
  { rw [hs, mul_support_one_sub], exact Œª i, id },
  letI : linear_order Œπ := linear_order_of_STO' well_ordering_rel,
  rw [finsum_eq_sum_of_support_subset _ A, finprod_eq_prod_of_mul_support_subset _ B,
    finset.prod_one_sub_ordered, sub_sub_cancel],
  refine finset.sum_congr rfl (Œª i hi, _),
  convert f.to_pou_fun_eq_mul_prod _ _ _ (Œª j hji hj, _),
  rwa finite.mem_to_finset
end
lemma exists_finset_to_pou_fun_eventually_eq (i : Œπ) (x : X) :
  ‚àÉ t : finset Œπ, f.to_pou_fun i =·∂†[ùìù x]
    f i * ‚àè j in t.filter (Œª j, well_ordering_rel j i), (1 - f j) :=
begin
  rcases f.locally_finite x with ‚ü®U, hU, hf‚ü©,
  use hf.to_finset,
  filter_upwards [hU] with y hyU,
  simp only [pi.mul_apply, finset.prod_apply],
  apply to_pou_fun_eq_mul_prod,
  intros j hji hj,
  exact hf.mem_to_finset.2 ‚ü®y, ‚ü®hj, hyU‚ü©‚ü©
end
lemma continuous_to_pou_fun (i : Œπ) : continuous (f.to_pou_fun i) :=
begin
  refine ((f i).continuous.mul $
    continuous_finprod_cond (Œª j _, continuous_const.sub (f j).continuous) _),
  simp only [mul_support_one_sub],
  exact f.locally_finite
end
def to_partition_of_unity : partition_of_unity Œπ X s :=
{ to_fun := Œª i, ‚ü®f.to_pou_fun i, f.continuous_to_pou_fun i‚ü©,
  locally_finite' := f.locally_finite.subset f.support_to_pou_fun_subset,
  nonneg' := Œª i x, mul_nonneg (f.nonneg i x)
    (finprod_cond_nonneg $ Œª j hj, sub_nonneg.2 $ f.le_one j x),
  sum_eq_one' := Œª x hx,
    begin
      simp only [continuous_map.coe_mk, sum_to_pou_fun_eq, sub_eq_self],
      apply finprod_eq_zero (Œª i, 1 - f i x) (f.ind x hx),
      { simp only [f.ind_apply x hx, sub_self] },
      { rw mul_support_one_sub, exact f.point_finite x }
    end,
  sum_le_one' := Œª x,
    begin
      simp only [continuous_map.coe_mk, sum_to_pou_fun_eq, sub_le_self_iff],
      exact finprod_nonneg (Œª i, sub_nonneg.2 $ f.le_one i x)
    end }
lemma to_partition_of_unity_apply (i : Œπ) (x : X) :
  f.to_partition_of_unity i x = f i x * ‚àè·∂† j (hj : well_ordering_rel j i), (1 - f j x) :=
rfl
lemma to_partition_of_unity_eq_mul_prod (i : Œπ) (x : X) (t : finset Œπ)
  (ht : ‚àÄ j, well_ordering_rel j i ‚Üí f j x ‚â† 0 ‚Üí j ‚àà t) :
  f.to_partition_of_unity i x = f i x * ‚àè j in t.filter (Œª j, well_ordering_rel j i), (1 - f j x) :=
f.to_pou_fun_eq_mul_prod i x t ht
lemma exists_finset_to_partition_of_unity_eventually_eq (i : Œπ) (x : X) :
  ‚àÉ t : finset Œπ, f.to_partition_of_unity i =·∂†[ùìù x]
    f i * ‚àè j in t.filter (Œª j, well_ordering_rel j i), (1 - f j) :=
f.exists_finset_to_pou_fun_eventually_eq i x
lemma to_partition_of_unity_zero_of_zero {i : Œπ} {x : X} (h : f i x = 0) :
  f.to_partition_of_unity i x = 0 :=
f.to_pou_fun_zero_of_zero h
lemma support_to_partition_of_unity_subset (i : Œπ) :
  support (f.to_partition_of_unity i) ‚äÜ support (f i) :=
f.support_to_pou_fun_subset i
lemma sum_to_partition_of_unity_eq (x : X) :
  ‚àë·∂† i, f.to_partition_of_unity i x = 1 - ‚àè·∂† i, (1 - f i x) :=
f.sum_to_pou_fun_eq x
lemma is_subordinate.to_partition_of_unity {f : bump_covering Œπ X s} {U : Œπ ‚Üí set X}
  (h : f.is_subordinate U) :
  f.to_partition_of_unity.is_subordinate U :=
Œª i, subset.trans (closure_mono $ f.support_to_partition_of_unity_subset i) (h i)
end bump_covering
namespace partition_of_unity
variables {s : set X}
instance [inhabited Œπ] : inhabited (partition_of_unity Œπ X s) :=
‚ü®bump_covering.to_partition_of_unity default‚ü©
lemma exists_is_subordinate_of_locally_finite [normal_space X] (hs : is_closed s)
  (U : Œπ ‚Üí set X) (ho : ‚àÄ i, is_open (U i)) (hf : locally_finite U)
  (hU : s ‚äÜ ‚ãÉ i, U i) :
  ‚àÉ f : partition_of_unity Œπ X s, f.is_subordinate U :=
let ‚ü®f, hf‚ü© := bump_covering.exists_is_subordinate_of_locally_finite hs U ho hf hU
in ‚ü®f.to_partition_of_unity, hf.to_partition_of_unity‚ü©
lemma exists_is_subordinate [normal_space X] [paracompact_space X] (hs : is_closed s)
  (U : Œπ ‚Üí set X) (ho : ‚àÄ i, is_open (U i)) (hU : s ‚äÜ ‚ãÉ i, U i) :
  ‚àÉ f : partition_of_unity Œπ X s, f.is_subordinate U :=
let ‚ü®f, hf‚ü© := bump_covering.exists_is_subordinate hs U ho hU
in ‚ü®f.to_partition_of_unity, hf.to_partition_of_unity‚ü©
end partition_of_unity
