import measure_theory.measure.vector_measure
import order.symm_diff
noncomputable theory
open_locale classical big_operators nnreal ennreal measure_theory
variables {α β : Type*} [measurable_space α]
variables {M : Type*} [add_comm_monoid M] [topological_space M] [ordered_add_comm_monoid M]
namespace measure_theory
namespace signed_measure
open filter vector_measure
variables {s : signed_measure α} {i j : set α}
section exists_subset_restrict_nonpos
private def exists_one_div_lt (s : signed_measure α) (i : set α) (n : ℕ) : Prop :=
∃ k : set α, k ⊆ i ∧ measurable_set k ∧ (1 / (n + 1) : ℝ) < s k
private lemma exists_nat_one_div_lt_measure_of_not_negative (hi : ¬ s ≤[i] 0) :
  ∃ (n : ℕ), exists_one_div_lt s i n :=
let ⟨k, hj₁, hj₂, hj⟩ := exists_pos_measure_of_not_restrict_le_zero s hi in
let ⟨n, hn⟩ := exists_nat_one_div_lt hj in ⟨n, k, hj₂, hj₁, hn⟩
private def find_exists_one_div_lt (s : signed_measure α) (i : set α) : ℕ :=
if hi : ¬ s ≤[i] 0 then nat.find (exists_nat_one_div_lt_measure_of_not_negative hi) else 0
private lemma find_exists_one_div_lt_spec (hi : ¬ s ≤[i] 0) :
  exists_one_div_lt s i (find_exists_one_div_lt s i) :=
begin
  rw [find_exists_one_div_lt, dif_pos hi],
  convert nat.find_spec _,
end
private lemma find_exists_one_div_lt_min (hi : ¬ s ≤[i] 0) {m : ℕ}
  (hm : m < find_exists_one_div_lt s i) : ¬ exists_one_div_lt s i m :=
begin
  rw [find_exists_one_div_lt, dif_pos hi] at hm,
  exact nat.find_min _ hm
end
private def some_exists_one_div_lt (s : signed_measure α) (i : set α) : set α :=
if hi : ¬ s ≤[i] 0 then classical.some (find_exists_one_div_lt_spec hi) else ∅
private lemma some_exists_one_div_lt_spec (hi : ¬ s ≤[i] 0) :
  (some_exists_one_div_lt s i) ⊆ i ∧ measurable_set (some_exists_one_div_lt s i) ∧
  (1 / (find_exists_one_div_lt s i + 1) : ℝ) < s (some_exists_one_div_lt s i) :=
begin
  rw [some_exists_one_div_lt, dif_pos hi],
  exact classical.some_spec (find_exists_one_div_lt_spec hi),
end
private lemma some_exists_one_div_lt_subset : some_exists_one_div_lt s i ⊆ i :=
begin
  by_cases hi : ¬ s ≤[i] 0,
  { exact let ⟨h, _⟩ := some_exists_one_div_lt_spec hi in h },
  { rw [some_exists_one_div_lt, dif_neg hi],
    exact set.empty_subset _ },
end
private lemma some_exists_one_div_lt_subset' : some_exists_one_div_lt s (i \ j) ⊆ i :=
set.subset.trans some_exists_one_div_lt_subset (set.diff_subset _ _)
private lemma some_exists_one_div_lt_measurable_set :
  measurable_set (some_exists_one_div_lt s i) :=
begin
  by_cases hi : ¬ s ≤[i] 0,
  { exact let ⟨_, h, _⟩ := some_exists_one_div_lt_spec hi in h },
  { rw [some_exists_one_div_lt, dif_neg hi],
    exact measurable_set.empty }
end
private lemma some_exists_one_div_lt_lt (hi : ¬ s ≤[i] 0) :
  (1 / (find_exists_one_div_lt s i + 1) : ℝ) < s (some_exists_one_div_lt s i) :=
let ⟨_, _, h⟩ := some_exists_one_div_lt_spec hi in h
private def restrict_nonpos_seq (s : signed_measure α) (i : set α) : ℕ → set α
theorem exists_subset_restrict_nonpos (hi : s i < 0) :
  ∃ j : set α, measurable_set j ∧ j ⊆ i ∧ s ≤[j] 0 ∧ s j < 0 :=
begin
  have hi₁ : measurable_set i :=
    classical.by_contradiction (λ h, ne_of_lt hi $ s.not_measurable h),
  by_cases s ≤[i] 0, { exact ⟨i, hi₁, set.subset.refl _, h, hi⟩ },
  by_cases hn : ∀ n : ℕ, ¬ s ≤[i \ ⋃ l < n, restrict_nonpos_seq s i l] 0,
  swap, { exact exists_subset_restrict_nonpos' hi₁ hi hn },
  set A := i \ ⋃ l, restrict_nonpos_seq s i l with hA,
  set bdd : ℕ → ℕ := λ n,
    find_exists_one_div_lt s (i \ ⋃ k ≤ n, restrict_nonpos_seq s i k) with hbdd,
  have hn' : ∀ n : ℕ, ¬ s ≤[i \ ⋃ l ≤ n, restrict_nonpos_seq s i l] 0,
  { intro n,
    convert hn (n + 1);
    { ext l,
      simp only [exists_prop, set.mem_Union, and.congr_left_iff],
      exact λ _, nat.lt_succ_iff.symm } },
  have h₁ : s i = s A + ∑' l, s (restrict_nonpos_seq s i l),
  { rw [hA, ← s.of_disjoint_Union_nat, add_comm, of_add_of_diff],
    exact measurable_set.Union (λ _, restrict_nonpos_seq_measurable_set _),
    exacts [hi₁, set.Union_subset (λ _, restrict_nonpos_seq_subset _), λ _,
            restrict_nonpos_seq_measurable_set _, restrict_nonpos_seq_disjoint] },
  have h₂ : s A ≤ s i,
  { rw h₁,
    apply le_add_of_nonneg_right,
    exact tsum_nonneg (λ n, le_of_lt (measure_of_restrict_nonpos_seq h _ (hn n))) },
  have h₃' : summable (λ n, (1 / (bdd n + 1) : ℝ)),
  { have : summable (λ l, s (restrict_nonpos_seq s i l)) :=
      has_sum.summable (s.m_Union (λ _, restrict_nonpos_seq_measurable_set _)
        restrict_nonpos_seq_disjoint),
    refine summable_of_nonneg_of_le (λ n, _) (λ n, _)
      (summable.comp_injective this nat.succ_injective),
    { exact le_of_lt nat.one_div_pos_of_nat },
    { exact le_of_lt (restrict_nonpos_seq_lt n (hn' n)) } },
  have h₃ : tendsto (λ n, (bdd n : ℝ) + 1) at_top at_top,
  { simp only [one_div] at h₃',
    exact summable.tendsto_top_of_pos h₃' (λ n, nat.cast_add_one_pos (bdd n)) },
  have h₄ : tendsto (λ n, (bdd n : ℝ)) at_top at_top,
  { convert at_top.tendsto_at_top_add_const_right (-1) h₃, simp },
  have A_meas : measurable_set A :=
    hi₁.diff (measurable_set.Union (λ _, restrict_nonpos_seq_measurable_set _)),
  refine ⟨A, A_meas, set.diff_subset _ _, _, h₂.trans_lt hi⟩,
  by_contra hnn,
  rw restrict_le_restrict_iff _ _ A_meas at hnn, push_neg at hnn,
  obtain ⟨E, hE₁, hE₂, hE₃⟩ := hnn,
  have : ∃ k, 1 ≤ bdd k ∧ 1 / (bdd k : ℝ) < s E,
  { rw tendsto_at_top_at_top at h₄,
    obtain ⟨k, hk⟩ := h₄ (max (1 / s E + 1) 1),
    refine ⟨k, _, _⟩,
    { have hle := le_of_max_le_right (hk k le_rfl),
      norm_cast at hle,
      exact hle },
    { have : 1 / s E < bdd k,
      { linarith [le_of_max_le_left (hk k le_rfl)] {restrict_type := ℝ} },
      rw one_div at this ⊢,
      rwa inv_lt (lt_trans (inv_pos.2 hE₃) this) hE₃ } },
  obtain ⟨k, hk₁, hk₂⟩ := this,
  have hA' : A ⊆ i \ ⋃ l ≤ k, restrict_nonpos_seq s i l,
  { apply set.diff_subset_diff_right,
    intro x, simp only [set.mem_Union],
    rintro ⟨n, _, hn₂⟩,
    exact ⟨n, hn₂⟩ },
  refine find_exists_one_div_lt_min (hn' k)
    (buffer.lt_aux_2 hk₁) ⟨E, set.subset.trans hE₂ hA', hE₁, _⟩,
  convert hk₂, norm_cast,
  exact tsub_add_cancel_of_le hk₁
end
end exists_subset_restrict_nonpos
def measure_of_negatives (s : signed_measure α) : set ℝ :=
s '' { B | measurable_set B ∧ s ≤[B] 0 }
lemma zero_mem_measure_of_negatives : (0 : ℝ) ∈ s.measure_of_negatives :=
⟨∅, ⟨measurable_set.empty, le_restrict_empty _ _⟩, s.empty⟩
lemma bdd_below_measure_of_negatives :
  bdd_below s.measure_of_negatives :=
begin
  simp_rw [bdd_below, set.nonempty, mem_lower_bounds],
  by_contra' h,
  have h' : ∀ n : ℕ, ∃ y : ℝ, y ∈ s.measure_of_negatives ∧ y < -n := λ n, h (-n),
  choose f hf using h',
  have hf' : ∀ n : ℕ, ∃ B, measurable_set B ∧ s ≤[B] 0 ∧ s B < -n,
  { intro n,
    rcases hf n with ⟨⟨B, ⟨hB₁, hBr⟩, hB₂⟩, hlt⟩,
    exact ⟨B, hB₁, hBr, hB₂.symm ▸ hlt⟩ },
  choose B hmeas hr h_lt using hf',
  set A := ⋃ n, B n with hA,
  have hfalse : ∀ n : ℕ, s A ≤ -n,
  { intro n,
    refine le_trans _ (le_of_lt (h_lt _)),
    rw [hA, ← set.diff_union_of_subset (set.subset_Union _ n),
        of_union (disjoint.comm.1 set.disjoint_diff) _ (hmeas n)],
    { refine add_le_of_nonpos_left _,
      have : s ≤[A] 0 := restrict_le_restrict_Union _ _ hmeas hr,
      refine nonpos_of_restrict_le_zero _ (restrict_le_zero_subset _ _ (set.diff_subset _ _) this),
      exact measurable_set.Union hmeas },
    { apply_instance },
    { exact (measurable_set.Union hmeas).diff (hmeas n) } },
  rcases exists_nat_gt (-(s A)) with ⟨n, hn⟩,
  exact lt_irrefl _ ((neg_lt.1 hn).trans_le (hfalse n)),
end
lemma exists_compl_positive_negative (s : signed_measure α) :
  ∃ i : set α, measurable_set i ∧ 0 ≤[i] s ∧ s ≤[iᶜ] 0 :=
begin
  obtain ⟨f, _, hf₂, hf₁⟩ := exists_seq_tendsto_Inf
    ⟨0, @zero_mem_measure_of_negatives _ _ s⟩ bdd_below_measure_of_negatives,
  choose B hB using hf₁,
  have hB₁ : ∀ n, measurable_set (B n) := λ n, (hB n).1.1,
  have hB₂ : ∀ n, s ≤[B n] 0 := λ n, (hB n).1.2,
  set A := ⋃ n, B n with hA,
  have hA₁ : measurable_set A := measurable_set.Union hB₁,
  have hA₂ : s ≤[A] 0 := restrict_le_restrict_Union _ _ hB₁ hB₂,
  have hA₃ : s A = Inf s.measure_of_negatives,
  { apply le_antisymm,
    { refine le_of_tendsto_of_tendsto tendsto_const_nhds hf₂ (eventually_of_forall (λ n, _)),
      rw [← (hB n).2, hA, ← set.diff_union_of_subset (set.subset_Union _ n),
          of_union (disjoint.comm.1 set.disjoint_diff) _ (hB₁ n)],
      { refine add_le_of_nonpos_left _,
        have : s ≤[A] 0 :=
          restrict_le_restrict_Union _ _ hB₁ (λ m, let ⟨_, h⟩ := (hB m).1 in h),
        refine nonpos_of_restrict_le_zero _
          (restrict_le_zero_subset _ _ (set.diff_subset _ _) this),
        exact measurable_set.Union hB₁ },
      { apply_instance },
      { exact (measurable_set.Union hB₁).diff (hB₁ n) } },
    { exact cInf_le bdd_below_measure_of_negatives ⟨A, ⟨hA₁, hA₂⟩, rfl⟩ } },
  refine ⟨Aᶜ, hA₁.compl, _, (compl_compl A).symm ▸ hA₂⟩,
  rw restrict_le_restrict_iff _ _ hA₁.compl,
  intros C hC hC₁,
  by_contra' hC₂,
  rcases exists_subset_restrict_nonpos hC₂ with ⟨D, hD₁, hD, hD₂, hD₃⟩,
  have : s (A ∪ D) < Inf s.measure_of_negatives,
  { rw [← hA₃, of_union (set.disjoint_of_subset_right (set.subset.trans hD hC₁)
        disjoint_compl_right) hA₁ hD₁],
    linarith, apply_instance },
  refine not_le.2 this _,
  refine cInf_le bdd_below_measure_of_negatives ⟨A ∪ D, ⟨_, _⟩, rfl⟩,
  { exact hA₁.union hD₁ },
  { exact restrict_le_restrict_union _ _ hA₁ hA₂ hD₁ hD₂ },
end
theorem exists_is_compl_positive_negative (s : signed_measure α) :
  ∃ i j : set α, measurable_set i ∧ 0 ≤[i] s ∧ measurable_set j ∧ s ≤[j] 0 ∧ is_compl i j :=
let ⟨i, hi₁, hi₂, hi₃⟩ := exists_compl_positive_negative s in
  ⟨i, iᶜ, hi₁, hi₂, hi₁.compl, hi₃, is_compl_compl⟩
lemma of_symm_diff_compl_positive_negative {s : signed_measure α}
  {i j : set α} (hi : measurable_set i) (hj : measurable_set j)
  (hi' : 0 ≤[i] s ∧ s ≤[iᶜ] 0) (hj' : 0 ≤[j] s ∧ s ≤[jᶜ] 0) :
  s (i ∆ j) = 0 ∧ s (iᶜ ∆ jᶜ) = 0 :=
begin
  rw [restrict_le_restrict_iff s 0, restrict_le_restrict_iff 0 s] at hi' hj',
  split,
  { rw [symm_diff_def, set.diff_eq_compl_inter, set.diff_eq_compl_inter,
        set.sup_eq_union, of_union,
        le_antisymm (hi'.2 (hi.compl.inter hj) (set.inter_subset_left _ _))
          (hj'.1 (hi.compl.inter hj) (set.inter_subset_right _ _)),
        le_antisymm (hj'.2 (hj.compl.inter hi) (set.inter_subset_left _ _))
          (hi'.1 (hj.compl.inter hi) (set.inter_subset_right _ _)),
        zero_apply, zero_apply, zero_add],
    { exact set.disjoint_of_subset_left (set.inter_subset_left _ _)
        (set.disjoint_of_subset_right (set.inter_subset_right _ _)
        (disjoint.comm.1 (is_compl.disjoint is_compl_compl))) },
    { exact hj.compl.inter hi },
    { exact hi.compl.inter hj } },
  { rw [symm_diff_def, set.diff_eq_compl_inter, set.diff_eq_compl_inter,
        compl_compl, compl_compl, set.sup_eq_union, of_union,
        le_antisymm (hi'.2 (hj.inter hi.compl) (set.inter_subset_right _ _))
          (hj'.1 (hj.inter hi.compl) (set.inter_subset_left _ _)),
        le_antisymm (hj'.2 (hi.inter hj.compl) (set.inter_subset_right _ _))
          (hi'.1 (hi.inter hj.compl) (set.inter_subset_left _ _)),
        zero_apply, zero_apply, zero_add],
    { exact set.disjoint_of_subset_left (set.inter_subset_left _ _)
        (set.disjoint_of_subset_right (set.inter_subset_right _ _)
        (is_compl.disjoint is_compl_compl)) },
    { exact hj.inter hi.compl },
    { exact hi.inter hj.compl } },
  all_goals { measurability },
end
end signed_measure
end measure_theory
