import tactic.core
namespace tactic
private meta def strip_annotations_from_all_non_local_consts {elab : bool} (e : expr elab)
  : expr elab :=
expr.unsafe_cast $ e.unsafe_cast.replace $ λ e n,
  match e.is_annotation with
  | some (_, expr.local_const _ _ _ _) := none
  | some (_, _) := e.erase_annotations
  | _ := none
  end
meta def simp_arg_type.to_pexpr : simp_arg_type → option pexpr
| sat@(simp_arg_type.expr e) := e
| sat@(simp_arg_type.symm_expr e) := e
| sat := none
private meta def replace_subexprs_for_simp_arg (e : pexpr) (rules : list (expr × expr)) : pexpr :=
strip_annotations_from_all_non_local_consts $ pexpr.of_expr $ e.unsafe_cast.replace_subexprs rules
meta def simp_arg_type.replace_subexprs : simp_arg_type → list (expr × expr) → simp_arg_type
| (simp_arg_type.expr      e) rules :=
    simp_arg_type.expr      $ replace_subexprs_for_simp_arg e rules
| (simp_arg_type.symm_expr e) rules :=
    simp_arg_type.symm_expr $ replace_subexprs_for_simp_arg e rules
| sat rules := sat
setup_tactic_parser
declare_trace silence_simp_if_true
@[user_command] meta def simp_cmd (_ : parse $ tk "#simp") : lean.parser unit :=
do
  no_dflt ← only_flag,
  hs ← simp_arg_list,
  attr_names ← with_ident_list,
  o ← optional (tk ":"),
  e ← types.texpr,
  let hs_es := list.join $ hs.map $ option.to_list ∘ simp_arg_type.to_pexpr,
  (ts, mappings) ← synthesize_tactic_state_with_variables_as_hyps (e :: hs_es),
  simp_result ← lean.parser.of_tactic $ λ _, do
    e ← to_expr e,
    let hs := hs.map $ λ sat, sat.replace_subexprs mappings,
    prod.fst <$> e.simp {} failed no_dflt attr_names hs } ts,
  when (¬ is_trace_enabled_for `silence_simp_if_true ∨ simp_result ≠ expr.const `true [])
    (trace simp_result)
add_tactic_doc
{ name                     := "#simp",
  category                 := doc_category.cmd,
  decl_names               := [`tactic.simp_cmd],
  tags                     := ["simplification"] }
end tactic
