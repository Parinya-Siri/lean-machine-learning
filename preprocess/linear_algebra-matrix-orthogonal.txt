import data.matrix.basic
namespace matrix
variables {α n m : Type*}
variables [has_mul α] [add_comm_monoid α]
variables (A : matrix m n α)
open_locale matrix
def has_orthogonal_rows [fintype n] : Prop :=
∀ ⦃i₁ i₂⦄, i₁ ≠ i₂ → dot_product (A i₁) (A i₂) = 0
def has_orthogonal_cols [fintype m] : Prop :=
has_orthogonal_rows Aᵀ
@[simp] lemma transpose_has_orthogonal_rows_iff_has_orthogonal_cols [fintype m] :
  Aᵀ.has_orthogonal_rows ↔ A.has_orthogonal_cols :=
iff.rfl
@[simp] lemma transpose_has_orthogonal_cols_iff_has_orthogonal_rows [fintype n] :
  Aᵀ.has_orthogonal_cols ↔ A.has_orthogonal_rows :=
iff.rfl
variables {A}
lemma has_orthogonal_rows.has_orthogonal_cols
  [fintype m] (h : Aᵀ.has_orthogonal_rows) :
  A.has_orthogonal_cols := h
lemma has_orthogonal_cols.transpose_has_orthogonal_rows
  [fintype m] (h : A.has_orthogonal_cols) :
  Aᵀ.has_orthogonal_rows := h
lemma has_orthogonal_cols.has_orthogonal_rows
  [fintype n] (h : Aᵀ.has_orthogonal_cols) :
  A.has_orthogonal_rows := h
lemma has_orthogonal_rows.transpose_has_orthogonal_cols
  [fintype n] (h : A.has_orthogonal_rows) :
  Aᵀ.has_orthogonal_cols := h
end matrix
