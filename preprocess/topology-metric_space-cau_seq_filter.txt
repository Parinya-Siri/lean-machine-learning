import analysis.normed_space.basic
universes u v
open set filter
open_locale topological_space classical
variable {Œ≤ : Type v}
lemma cau_seq.tendsto_limit [normed_ring Œ≤] [hn : is_absolute_value (norm : Œ≤ ‚Üí ‚Ñù)]
  (f : cau_seq Œ≤ norm) [cau_seq.is_complete Œ≤ norm] :
  tendsto f at_top (ùìù f.lim) :=
_root_.tendsto_nhds.mpr
begin
  intros s os lfs,
  suffices : ‚àÉ (a : ‚Ñï), ‚àÄ (b : ‚Ñï), b ‚â• a ‚Üí f b ‚àà s, by simpa using this,
  rcases metric.is_open_iff.1 os _ lfs with ‚ü®Œµ, ‚ü®hŒµ, hŒµs‚ü©‚ü©,
  cases setoid.symm (cau_seq.equiv_lim f) _ hŒµ with N hN,
  existsi N,
  intros b hb,
  apply hŒµs,
  dsimp [metric.ball], rw [dist_comm, dist_eq_norm],
  solve_by_elim
end
variables [normed_field Œ≤]
instance normed_field.is_absolute_value : is_absolute_value (norm : Œ≤ ‚Üí ‚Ñù) :=
{ abv_nonneg := norm_nonneg,
  abv_eq_zero := Œª _, norm_eq_zero,
  abv_add := norm_add_le,
  abv_mul := norm_mul }
open metric
lemma cauchy_seq.is_cau_seq {f : ‚Ñï ‚Üí Œ≤} (hf : cauchy_seq f) :
  is_cau_seq norm f :=
begin
  cases cauchy_iff.1 hf with hf1 hf2,
  intros Œµ hŒµ,
  rcases hf2 {x | dist x.1 x.2 < Œµ} (dist_mem_uniformity hŒµ) with ‚ü®t, ‚ü®ht, htsub‚ü©‚ü©,
  simp at ht, cases ht with N hN,
  existsi N,
  intros j hj,
  rw ‚Üêdist_eq_norm,
  apply @htsub (f j, f N),
  apply set.mk_mem_prod; solve_by_elim [le_refl]
end
lemma cau_seq.cauchy_seq (f : cau_seq Œ≤ norm) : cauchy_seq f :=
begin
  refine cauchy_iff.2 ‚ü®by apply_instance, Œª s hs, _‚ü©,
  rcases mem_uniformity_dist.1 hs with ‚ü®Œµ, ‚ü®hŒµ, hŒµs‚ü©‚ü©,
  cases cau_seq.cauchy‚ÇÇ f hŒµ with N hN,
  existsi {n | n ‚â• N}.image f,
  simp only [exists_prop, mem_at_top_sets, mem_map, mem_image, ge_iff_le, mem_set_of_eq],
  split,
  { existsi N, intros b hb, existsi b, simp [hb] },
  { rintros ‚ü®a, b‚ü© ‚ü®‚ü®a', ‚ü®ha'1, ha'2‚ü©‚ü©, ‚ü®b', ‚ü®hb'1, hb'2‚ü©‚ü©‚ü©,
    dsimp at ha'1 ha'2 hb'1 hb'2,
    rw [‚Üêha'2, ‚Üêhb'2],
    apply hŒµs,
    rw dist_eq_norm,
    apply hN; assumption }
end
lemma cau_seq_iff_cauchy_seq {Œ± : Type u} [normed_field Œ±] {u : ‚Ñï ‚Üí Œ±} :
  is_cau_seq norm u ‚Üî cauchy_seq u :=
‚ü®Œªh, cau_seq.cauchy_seq ‚ü®u, h‚ü©,
 Œªh, h.is_cau_seq‚ü©
