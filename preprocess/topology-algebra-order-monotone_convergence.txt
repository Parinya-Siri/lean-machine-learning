import topology.algebra.order.basic
open filter set function
open_locale filter topological_space classical
variables {Œ± Œ≤ : Type*}
class Sup_convergence_class (Œ± : Type*) [preorder Œ±] [topological_space Œ±] : Prop :=
(tendsto_coe_at_top_is_lub : ‚àÄ (a : Œ±) (s : set Œ±), is_lub s a ‚Üí tendsto (coe : s ‚Üí Œ±) at_top (ùìù a))
class Inf_convergence_class (Œ± : Type*) [preorder Œ±] [topological_space Œ±] : Prop :=
(tendsto_coe_at_bot_is_glb : ‚àÄ (a : Œ±) (s : set Œ±), is_glb s a ‚Üí tendsto (coe : s ‚Üí Œ±) at_bot (ùìù a))
instance order_dual.Sup_convergence_class [preorder Œ±] [topological_space Œ±]
  [Inf_convergence_class Œ±] : Sup_convergence_class Œ±·µí·µà :=
‚ü®‚ÄπInf_convergence_class Œ±‚Ä∫.1‚ü©
instance order_dual.Inf_convergence_class [preorder Œ±] [topological_space Œ±]
  [Sup_convergence_class Œ±] : Inf_convergence_class Œ±·µí·µà :=
‚ü®‚ÄπSup_convergence_class Œ±‚Ä∫.1‚ü©
lemma monotone.ge_of_tendsto [topological_space Œ±] [preorder Œ±] [order_closed_topology Œ±]
  [semilattice_sup Œ≤] {f : Œ≤ ‚Üí Œ±} {a : Œ±} (hf : monotone f)
  (ha : tendsto f at_top (ùìù a)) (b : Œ≤) :
  f b ‚â§ a :=
begin
  haveI : nonempty Œ≤ := nonempty.intro b,
  exact ge_of_tendsto ha ((eventually_ge_at_top b).mono (Œª _ hxy, hf hxy))
end
lemma monotone.le_of_tendsto [topological_space Œ±] [preorder Œ±] [order_closed_topology Œ±]
  [semilattice_inf Œ≤] {f : Œ≤ ‚Üí Œ±} {a : Œ±} (hf : monotone f)
  (ha : tendsto f at_bot (ùìù a)) (b : Œ≤) :
  a ‚â§ f b :=
hf.dual.ge_of_tendsto ha b
lemma antitone.le_of_tendsto [topological_space Œ±] [preorder Œ±] [order_closed_topology Œ±]
  [semilattice_sup Œ≤] {f : Œ≤ ‚Üí Œ±} {a : Œ±} (hf : antitone f)
  (ha : tendsto f at_top (ùìù a)) (b : Œ≤) :
  a ‚â§ f b :=
hf.dual_right.ge_of_tendsto ha b
lemma antitone.ge_of_tendsto [topological_space Œ±] [preorder Œ±] [order_closed_topology Œ±]
  [semilattice_inf Œ≤] {f : Œ≤ ‚Üí Œ±} {a : Œ±} (hf : antitone f)
  (ha : tendsto f at_bot (ùìù a)) (b : Œ≤) :
  f b ‚â§ a :=
hf.dual_right.le_of_tendsto ha b
lemma is_lub_of_tendsto_at_top [topological_space Œ±] [preorder Œ±] [order_closed_topology Œ±]
  [nonempty Œ≤] [semilattice_sup Œ≤] {f : Œ≤ ‚Üí Œ±} {a : Œ±} (hf : monotone f)
  (ha : tendsto f at_top (ùìù a)) :
  is_lub (set.range f) a :=
begin
  split,
  { rintros _ ‚ü®b, rfl‚ü©,
    exact hf.ge_of_tendsto ha b },
  { exact Œª _ hb, le_of_tendsto' ha (Œª x, hb (set.mem_range_self x)) }
end
lemma is_glb_of_tendsto_at_bot [topological_space Œ±] [preorder Œ±] [order_closed_topology Œ±]
  [nonempty Œ≤] [semilattice_inf Œ≤] {f : Œ≤ ‚Üí Œ±} {a : Œ±} (hf : monotone f)
  (ha : tendsto f at_bot (ùìù a)) :
  is_glb (set.range f) a :=
@is_lub_of_tendsto_at_top Œ±·µí·µà Œ≤·µí·µà _ _ _ _ _ _ _ hf.dual ha
lemma is_lub_of_tendsto_at_bot [topological_space Œ±] [preorder Œ±] [order_closed_topology Œ±]
  [nonempty Œ≤] [semilattice_inf Œ≤] {f : Œ≤ ‚Üí Œ±} {a : Œ±} (hf : antitone f)
  (ha : tendsto f at_bot (ùìù a)) :
  is_lub (set.range f) a :=
@is_lub_of_tendsto_at_top Œ± Œ≤·µí·µà  _ _ _ _ _ _ _ hf.dual_left ha
lemma is_glb_of_tendsto_at_top [topological_space Œ±] [preorder Œ±] [order_closed_topology Œ±]
  [nonempty Œ≤] [semilattice_sup Œ≤] {f : Œ≤ ‚Üí Œ±} {a : Œ±} (hf : antitone f)
  (ha : tendsto f at_top (ùìù a)) :
  is_glb (set.range f) a :=
@is_glb_of_tendsto_at_bot Œ± Œ≤·µí·µà  _ _ _ _ _ _ _ hf.dual_left ha
lemma supr_eq_of_tendsto {Œ± Œ≤} [topological_space Œ±] [complete_linear_order Œ±] [order_topology Œ±]
  [nonempty Œ≤] [semilattice_sup Œ≤] {f : Œ≤ ‚Üí Œ±} {a : Œ±} (hf : monotone f) :
  tendsto f at_top (ùìù a) ‚Üí supr f = a :=
tendsto_nhds_unique (tendsto_at_top_supr hf)
lemma infi_eq_of_tendsto {Œ±} [topological_space Œ±] [complete_linear_order Œ±] [order_topology Œ±]
  [nonempty Œ≤] [semilattice_sup Œ≤] {f : Œ≤ ‚Üí Œ±} {a : Œ±} (hf : antitone f) :
  tendsto f at_top (ùìù a) ‚Üí infi f = a :=
tendsto_nhds_unique (tendsto_at_top_infi hf)
lemma supr_eq_supr_subseq_of_monotone {Œπ‚ÇÅ Œπ‚ÇÇ Œ± : Type*} [preorder Œπ‚ÇÇ] [complete_lattice Œ±]
  {l : filter Œπ‚ÇÅ} [l.ne_bot] {f : Œπ‚ÇÇ ‚Üí Œ±} {œÜ : Œπ‚ÇÅ ‚Üí Œπ‚ÇÇ} (hf : monotone f)
  (hœÜ : tendsto œÜ l at_top) :
  (‚®Ü i, f i) = (‚®Ü i, f (œÜ i)) :=
le_antisymm
  (supr_mono' $ Œª i, exists_imp_exists (Œª j (hj : i ‚â§ œÜ j), hf hj)
    (hœÜ.eventually $ eventually_ge_at_top i).exists)
  (supr_mono' $ Œª i, ‚ü®œÜ i, le_rfl‚ü©)
lemma infi_eq_infi_subseq_of_monotone {Œπ‚ÇÅ Œπ‚ÇÇ Œ± : Type*} [preorder Œπ‚ÇÇ] [complete_lattice Œ±]
  {l : filter Œπ‚ÇÅ} [l.ne_bot] {f : Œπ‚ÇÇ ‚Üí Œ±} {œÜ : Œπ‚ÇÅ ‚Üí Œπ‚ÇÇ} (hf : monotone f)
  (hœÜ : tendsto œÜ l at_bot) :
  (‚®Ö i, f i) = (‚®Ö i, f (œÜ i)) :=
supr_eq_supr_subseq_of_monotone hf.dual hœÜ
