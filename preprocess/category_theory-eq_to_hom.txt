import category_theory.opposites
universes v‚ÇÅ v‚ÇÇ v‚ÇÉ u‚ÇÅ u‚ÇÇ u‚ÇÉ
def eq_to_hom {X Y : C} (p : X = Y) : X ‚ü∂ Y := by rw p; exact ùüô _
@[simp] lemma eq_to_hom_refl (X : C) (p : X = X) : eq_to_hom p = ùüô X := rfl
@[simp, reassoc] lemma eq_to_hom_trans {X Y Z : C} (p : X = Y) (q : Y = Z) :
  eq_to_hom p ‚â´ eq_to_hom q = eq_to_hom (p.trans q) :=
by { cases p, cases q, simp, }
@[simp]
lemma congr_arg_mpr_hom_left {X Y Z : C} (p : X = Y) (q : Y ‚ü∂ Z) :
  (congr_arg (Œª W : C, W ‚ü∂ Z) p).mpr q = eq_to_hom p ‚â´ q :=
by { cases p, simp, }
@[simp]
lemma congr_arg_mpr_hom_right {X Y Z : C} (p : X ‚ü∂ Y) (q : Z = Y) :
  (congr_arg (Œª W : C, X ‚ü∂ W) q).mpr p = p ‚â´ eq_to_hom q.symm :=
by { cases q, simp, }
def eq_to_iso {X Y : C} (p : X = Y) : X ‚âÖ Y :=
‚ü®eq_to_hom p, eq_to_hom p.symm, by simp, by simp‚ü©
@[simp] lemma eq_to_iso.hom {X Y : C} (p : X = Y) : (eq_to_iso p).hom = eq_to_hom p :=
rfl
@[simp] lemma eq_to_iso.inv {X Y : C} (p : X = Y) : (eq_to_iso p).inv = eq_to_hom p.symm :=
rfl
@[simp] lemma eq_to_iso_refl {X : C} (p : X = X) : eq_to_iso p = iso.refl X := rfl
@[simp] lemma eq_to_iso_trans {X Y Z : C} (p : X = Y) (q : Y = Z) :
  eq_to_iso p ‚â™‚â´ eq_to_iso q = eq_to_iso (p.trans q) :=
by ext; simp
@[simp] lemma eq_to_hom_op {X Y : C} (h : X = Y) :
  (eq_to_hom h).op = eq_to_hom (congr_arg op h.symm) :=
by { cases h, refl, }
@[simp] lemma eq_to_hom_unop {X Y : C·µí·µñ} (h : X = Y) :
  (eq_to_hom h).unop = eq_to_hom (congr_arg unop h.symm) :=
by { cases h, refl, }
instance {X Y : C} (h : X = Y) : is_iso (eq_to_hom h) := is_iso.of_iso (eq_to_iso h)
@[simp] lemma inv_eq_to_hom {X Y : C} (h : X = Y) : inv (eq_to_hom h) = eq_to_hom h.symm :=
by { ext, simp, }
variables {D : Type u‚ÇÇ} [category.{v‚ÇÇ} D]
namespace functor
lemma ext {F G : C ‚•§ D} (h_obj : ‚àÄ X, F.obj X = G.obj X)
  (h_map : ‚àÄ X Y f, F.map f = eq_to_hom (h_obj X) ‚â´ G.map f ‚â´ eq_to_hom (h_obj Y).symm) :
  F = G :=
begin
  cases F with F_obj _ _ _, cases G with G_obj _ _ _,
  obtain rfl : F_obj = G_obj, by { ext X, apply h_obj },
  congr,
  funext X Y f,
  simpa using h_map X Y f
end
lemma conj_eq_to_hom_iff_heq {W X Y Z : C} (f : W ‚ü∂ X) (g : Y ‚ü∂ Z) (h : W = Y) (h' : X = Z) :
  f = eq_to_hom h ‚â´ g ‚â´ eq_to_hom h'.symm ‚Üî f == g :=
by { cases h, cases h', simp }
lemma hext {F G : C ‚•§ D} (h_obj : ‚àÄ X, F.obj X = G.obj X)
  (h_map : ‚àÄ X Y (f : X ‚ü∂ Y), F.map f == G.map f) : F = G :=
functor.ext h_obj (Œª _ _ f,
  (conj_eq_to_hom_iff_heq _ _ (h_obj _) (h_obj _)).2 $ h_map _ _ f)
variables {E : Type u‚ÇÉ} [category.{v‚ÇÉ} E] {F G : C ‚•§ D} {X Y Z : C} {f : X ‚ü∂ Y} {g : Y ‚ü∂ Z}
lemma map_comp_heq (hx : F.obj X = G.obj X) (hy : F.obj Y = G.obj Y) (hz : F.obj Z = G.obj Z)
  (hf : F.map f == G.map f) (hg : F.map g == G.map g) : F.map (f ‚â´ g) == G.map (f ‚â´ g) :=
by { rw [F.map_comp, G.map_comp], congr' }
lemma map_comp_heq' (hobj : ‚àÄ X : C, F.obj X = G.obj X)
  (hmap : ‚àÄ {X Y} (f : X ‚ü∂ Y), F.map f == G.map f) :
  F.map (f ‚â´ g) == G.map (f ‚â´ g) :=
by rw functor.hext hobj (Œª _ _, hmap)
lemma precomp_map_heq (H : E ‚•§ C)
  (hmap : ‚àÄ {X Y} (f : X ‚ü∂ Y), F.map f == G.map f) {X Y : E} (f : X ‚ü∂ Y) :
  (H ‚ãô F).map f == (H ‚ãô G).map f := hmap _
lemma postcomp_map_heq (H : D ‚•§ E) (hx : F.obj X = G.obj X) (hy : F.obj Y = G.obj Y)
  (hmap : F.map f == G.map f) : (F ‚ãô H).map f == (G ‚ãô H).map f :=
by { dsimp, congr' }
lemma postcomp_map_heq' (H : D ‚•§ E) (hobj : ‚àÄ X : C, F.obj X = G.obj X)
  (hmap : ‚àÄ {X Y} (f : X ‚ü∂ Y), F.map f == G.map f) :
  (F ‚ãô H).map f == (G ‚ãô H).map f :=
by rw functor.hext hobj (Œª _ _, hmap)
lemma hcongr_hom {F G : C ‚•§ D} (h : F = G) {X Y} (f : X ‚ü∂ Y) : F.map f == G.map f :=
by subst h
end heq
end functor
lemma eq_to_hom_map (F : C ‚•§ D) {X Y : C} (p : X = Y) :
  F.map (eq_to_hom p) = eq_to_hom (congr_arg F.obj p) :=
by cases p; simp
lemma eq_to_iso_map (F : C ‚•§ D) {X Y : C} (p : X = Y) :
  F.map_iso (eq_to_iso p) = eq_to_iso (congr_arg F.obj p) :=
by ext; cases p; simp
@[simp] lemma eq_to_hom_app {F G : C ‚•§ D} (h : F = G) (X : C) :
  (eq_to_hom h : F ‚ü∂ G).app X = eq_to_hom (functor.congr_obj h X) :=
by subst h; refl
lemma nat_trans.congr {F G : C ‚•§ D} (Œ± : F ‚ü∂ G) {X Y : C} (h : X = Y) :
  Œ±.app X = F.map (eq_to_hom h) ‚â´ Œ±.app Y ‚â´ G.map (eq_to_hom h.symm) :=
by { rw [Œ±.naturality_assoc], simp [eq_to_hom_map], }
lemma eq_conj_eq_to_hom {X Y : C} (f : X ‚ü∂ Y) :
  f = eq_to_hom rfl ‚â´ f ‚â´ eq_to_hom rfl :=
by simp only [category.id_comp, eq_to_hom_refl, category.comp_id]
lemma dcongr_arg {Œπ : Type*} {F G : Œπ ‚Üí C} (Œ± : ‚àÄ i, F i ‚ü∂ G i) {i j : Œπ} (h : i = j) :
  Œ± i = eq_to_hom (congr_arg F h) ‚â´ Œ± j ‚â´ eq_to_hom (congr_arg G h.symm) :=
by { subst h, simp }
end category_theory
