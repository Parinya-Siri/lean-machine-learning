import tactic.core
namespace tactic
meta def intercept_result {α} (m : expr → tactic expr) (t : tactic α) : tactic α := do
meta def dsimp_result {α} (t : tactic α)
  (cfg : dsimp_config := { fail_if_unchanged := ff }) (no_defaults := ff)
  (attr_names : list name := []) (hs : list simp_arg_type := []) : tactic α :=
intercept_result (λ g,
  g.dsimp cfg no_defaults attr_names hs) t
meta def simp_result {α} (t : tactic α)
  (cfg : simp_config := { fail_if_unchanged := ff }) (discharger : tactic unit := failed)
  (no_defaults := ff) (attr_names : list name := []) (hs : list simp_arg_type := []) : tactic α :=
intercept_result (λ g, prod.fst <$>
  g.simp cfg discharger no_defaults attr_names hs) t
namespace interactive
setup_tactic_parser
meta def dsimp_result
  (no_defaults : parse only_flag) (hs : parse simp_arg_list)
  (attr_names : parse with_ident_list)
  (t : itactic) : itactic :=
tactic.dsimp_result t { fail_if_unchanged := ff } no_defaults attr_names hs
meta def simp_result
  (no_defaults : parse only_flag) (hs : parse simp_arg_list)
  (attr_names : parse with_ident_list)
  (t : itactic) : itactic :=
tactic.simp_result t { fail_if_unchanged := ff } failed no_defaults attr_names hs
add_tactic_doc
{ name       := "simp_result",
  category   := doc_category.tactic,
  decl_names := [``simp_result, ``dsimp_result],
  tags       := ["simplification"] }
end interactive
end tactic
