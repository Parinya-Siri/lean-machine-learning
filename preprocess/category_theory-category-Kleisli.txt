import category_theory.category.basic
universes u v
namespace category_theory
@[nolint unused_arguments]
def Kleisli (m : Type u ‚Üí Type v) := Type u
def Kleisli.mk (m) (Œ± : Type u) : Kleisli m := Œ±
instance Kleisli.category_struct {m} [monad.{u v} m] : category_struct (Kleisli m) :=
{ hom := Œª Œ± Œ≤, Œ± ‚Üí m Œ≤,
  id := Œª Œ± x, pure x,
  comp := Œª X Y Z f g, f >=> g }
instance Kleisli.category {m} [monad.{u v} m] [is_lawful_monad m] : category (Kleisli m) :=
by refine { id_comp' := _, comp_id' := _, assoc' := _ };
   intros; ext; unfold_projs; simp only [(>=>)] with functor_norm
@[simp] lemma Kleisli.id_def {m} [monad m] (Œ± : Kleisli m) :
  ùüô Œ± = @pure m _ Œ± := rfl
lemma Kleisli.comp_def {m} [monad m] (Œ± Œ≤ Œ≥ : Kleisli m)
  (xs : Œ± ‚ü∂ Œ≤) (ys : Œ≤ ‚ü∂ Œ≥) (a : Œ±) :
  (xs ‚â´ ys) a = xs a >>= ys := rfl
instance : inhabited (Kleisli id) := ‚ü®punit‚ü©
instance {Œ± : Type u} [inhabited Œ±] : inhabited (Kleisli.mk id Œ±) := ‚ü®show Œ±, from default‚ü©
end category_theory
