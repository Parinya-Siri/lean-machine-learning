import data.mv_polynomial.basic
namespace mv_polynomial
open function
variables (A B R : Type*) [comm_semiring A] [comm_semiring B] [comm_ring R] [algebra A B]
noncomputable def acounit : mv_polynomial B A →ₐ[A] B :=
aeval id
variables {B}
@[simp] lemma acounit_X (b : B) : acounit A B (X b) = b := aeval_X _ b
variables {A} (B)
@[simp] lemma acounit_C (a : A) : acounit A B (C a) = algebra_map A B a := aeval_C _ a
variables (A)
lemma acounit_surjective : surjective (acounit A B) := λ b, ⟨X b, acounit_X A b⟩
noncomputable def counit : mv_polynomial R ℤ →+* R :=
acounit ℤ R
noncomputable def counit_nat : mv_polynomial A ℕ →+* A :=
acounit ℕ A
lemma counit_surjective : surjective (counit R) := acounit_surjective ℤ R
lemma counit_nat_surjective : surjective (counit_nat A) := acounit_surjective ℕ A
lemma counit_C (n : ℤ) : counit R (C n) = n := acounit_C _ _
lemma counit_nat_C (n : ℕ) : counit_nat A (C n) = n := acounit_C _ _
variables {R A}
@[simp] lemma counit_X (r : R) : counit R (X r) = r := acounit_X _ _
@[simp] lemma counit_nat_X (a : A) : counit_nat A (X a) = a := acounit_X _ _
end mv_polynomial
