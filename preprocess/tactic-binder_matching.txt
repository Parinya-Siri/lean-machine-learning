import data.option.defs
import meta.expr
namespace tactic
open expr
@[inline] meta def get_binder (do_whnf : option (transparency × bool))
  (pi_or_lambda : bool) (e : expr) :
  tactic (option (name × binder_info × expr × expr)) := do
  e ← do_whnf.elim (pure e) (λ p, whnf e p.1 p.2),
  pure $ if pi_or_lambda then match_pi e else match_lam e
meta def mk_binder_replacement (local_or_meta : bool) (b : binder) :
  tactic expr :=
if local_or_meta then mk_local' b.name b.info b.type else mk_meta_var b.type
meta def open_binders (do_whnf : option (transparency × bool))
  (pis_or_lambdas : bool) (locals_or_metas : bool) :
  expr → tactic (list expr × expr) :=
λ e, do
  some (name, bi, type, body) ← get_binder do_whnf pis_or_lambdas e
    | pure ([], e),
  replacement ← mk_binder_replacement locals_or_metas ⟨name, bi, type⟩,
  (rs, rest) ← open_binders (body.instantiate_var replacement),
  pure (replacement :: rs, rest)
meta def open_n_binders (do_whnf : option (transparency × bool))
  (pis_or_lambdas : bool) (locals_or_metas : bool) :
  expr → ℕ → tactic (list expr × expr)
| e 0 := pure ([], e)
| e (d + 1) := do
  some (name, bi, type, body) ← get_binder do_whnf pis_or_lambdas e | failed,
  replacement ← mk_binder_replacement locals_or_metas ⟨name, bi, type⟩,
  (rs, rest) ← open_n_binders (body.instantiate_var replacement) d,
  pure (replacement :: rs, rest)
meta abbreviation open_pis : expr → tactic (list expr × expr) :=
mk_local_pis
meta def open_pis_metas : expr → tactic (list expr × expr) :=
open_binders none tt ff
meta def open_n_pis : expr → ℕ → tactic (list expr × expr) :=
open_n_binders none tt tt
meta def open_n_pis_metas : expr → ℕ → tactic (list expr × expr) :=
open_n_binders none tt ff
meta def open_pis_whnf (e : expr) (md := semireducible)
  (unfold_ginductive := tt) : tactic (list expr × expr) :=
open_binders (some (md, unfold_ginductive)) tt tt e
meta def open_pis_metas_whnf (e : expr) (md := semireducible)
  (unfold_ginductive := tt) : tactic (list expr × expr) :=
open_binders (some (md, unfold_ginductive)) tt ff e
meta def open_n_pis_whnf (e : expr) (n : ℕ) (md := semireducible)
  (unfold_ginductive := tt) : tactic (list expr × expr) :=
open_n_binders (some (md, unfold_ginductive)) tt tt e n
meta def open_n_pis_metas_whnf (e : expr) (n : ℕ) (md := semireducible)
  (unfold_ginductive := tt) : tactic (list expr × expr) :=
open_n_binders (some (md, unfold_ginductive)) tt ff e n
meta def get_pi_binders (e : expr) : tactic (list binder × expr) := do
  (lcs, rest) ← open_pis e,
  pure (lcs.map to_binder, rest)
private meta def get_pi_binders_nondep_aux :
  ℕ → expr → tactic (list (ℕ × binder) × expr) :=
λ i e, do
  some (name, bi, type, body) ← get_binder none tt e | pure ([], e),
  replacement ← mk_local' name bi type,
  (rs, rest) ←
    get_pi_binders_nondep_aux (i + 1) (body.instantiate_var replacement),
  let rs' := if body.has_var then rs else (i, replacement.to_binder) :: rs,
  pure (rs', rest)
meta def get_pi_binders_nondep : expr → tactic (list (ℕ × binder) × expr) :=
get_pi_binders_nondep_aux 0
meta def open_lambdas : expr → tactic (list expr × expr) :=
open_binders none ff tt
meta def open_lambdas_metas : expr → tactic (list expr × expr) :=
open_binders none ff ff
meta def open_n_lambdas : expr → ℕ → tactic (list expr × expr) :=
open_n_binders none ff tt
meta def open_n_lambdas_metas : expr → ℕ → tactic (list expr × expr) :=
open_n_binders none ff ff
meta def open_lambdas_whnf (e : expr) (md := semireducible)
  (unfold_ginductive := tt) : tactic (list expr × expr) :=
open_binders (some (md, unfold_ginductive)) ff tt e
meta def open_lambdas_metas_whnf (e : expr) (md := semireducible)
  (unfold_ginductive := tt) : tactic (list expr × expr) :=
open_binders (some (md, unfold_ginductive)) ff ff e
meta def open_n_lambdas_whnf (e : expr) (n : ℕ) (md := semireducible)
  (unfold_ginductive := tt) : tactic (list expr × expr) :=
open_n_binders (some (md, unfold_ginductive)) ff tt e n
meta def open_n_lambdas_metas_whnf (e : expr) (n : ℕ) (md := semireducible)
  (unfold_ginductive := tt) : tactic (list expr × expr) :=
open_n_binders (some (md, unfold_ginductive)) ff ff e n
meta def open_pis_whnf_dep :
  expr → tactic (list (expr × bool) × expr) := λ e, do
  e' ← whnf e,
  match e' with
  | (pi n bi t rest) := do
    c ← mk_local' n bi t,
    let dep := rest.has_var,
    (cs, rest) ← open_pis_whnf_dep $ rest.instantiate_var c,
    pure ((c, dep) :: cs, rest)
  | _ := pure ([], e)
  end
meta def open_n_pis_metas' :
  expr → ℕ → tactic (list (expr × name × binder_info) × expr)
| e 0 := pure ([], e)
| (pi nam bi t rest) (n + 1) := do
  m ← mk_meta_var t,
  (ms, rest) ← open_n_pis_metas' (rest.instantiate_var m) n,
  pure ((m, nam, bi) :: ms, rest)
| e (n + 1) := fail $
  to_fmt "expected an expression starting with a Π, but got: " ++ to_fmt e
end tactic
