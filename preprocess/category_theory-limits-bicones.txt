import category_theory.limits.cones
import category_theory.structured_arrow
import category_theory.fin_category
universes v‚ÇÅ u‚ÇÅ
noncomputable theory
open category_theory.limits
open_locale classical
namespace category_theory
section bicone
variables (J : Type u‚ÇÅ)
@[derive decidable_eq]
inductive bicone
| left : bicone
| right : bicone
| diagram (val : J) : bicone
instance : inhabited (bicone J) := ‚ü®bicone.left‚ü©
instance fin_bicone [fintype J] : fintype (bicone J) :=
{ elems := [bicone.left, bicone.right].to_finset ‚à™ finset.image bicone.diagram (fintype.elems J),
  complete := Œª j, by { cases j; simp, exact fintype.complete j, }, }
variables [category.{v‚ÇÅ} J]
inductive bicone_hom : bicone J ‚Üí bicone J ‚Üí Type (max u‚ÇÅ v‚ÇÅ)
| left_id  : bicone_hom bicone.left bicone.left
| right_id : bicone_hom bicone.right bicone.right
| left (j : J) : bicone_hom bicone.left (bicone.diagram j)
| right (j : J) : bicone_hom bicone.right (bicone.diagram j)
| diagram {j k : J} (f : j ‚ü∂ k) : bicone_hom (bicone.diagram j) (bicone.diagram k)
instance : inhabited (bicone_hom J bicone.left bicone.left) := ‚ü®bicone_hom.left_id‚ü©
instance bicone_hom.decidable_eq {j k : bicone J} : decidable_eq (bicone_hom J j k) :=
Œª f g, by { cases f; cases g; simp; apply_instance }
@[simps]
instance bicone_category_struct : category_struct (bicone J) :=
{ hom := bicone_hom J,
  id := Œª j, bicone.cases_on j
    bicone_hom.left_id bicone_hom.right_id (Œª k, bicone_hom.diagram (ùüô k)),
  comp := Œª X Y Z f g, by
  { cases f, exact g, exact g,
    cases g, exact bicone_hom.left g_k,
    cases g, exact bicone_hom.right g_k,
    cases g, exact bicone_hom.diagram (f_f ‚â´ g_f) } }
instance bicone_category : category (bicone J) :=
{ id_comp' := Œª X Y f, by { cases f; simp },
  comp_id' := Œª X Y f, by { cases f; simp },
  assoc' := Œª W X Y Z f g h, by { cases f; cases g; cases h; simp } }
end bicone
section small_category
variables (J : Type v‚ÇÅ) [small_category J]
@[simps] def bicone_mk {C : Type u‚ÇÅ} [category.{v‚ÇÅ} C]
  {F : J ‚•§ C} (c‚ÇÅ c‚ÇÇ : cone F) : bicone J ‚•§ C :=
{ obj := Œª X, bicone.cases_on X c‚ÇÅ.X c‚ÇÇ.X (Œª j, F.obj j),
  map := Œª X Y f, by
  { cases f, exact (ùüô _), exact (ùüô _),
    exact c‚ÇÅ.œÄ.app f_1,
    exact c‚ÇÇ.œÄ.app f_1,
    exact F.map f_f, },
  map_id' := Œª X, by { cases X; simp },
  map_comp' := Œª X Y Z f g, by
  { cases f,
    exact (category.id_comp _).symm,
    exact (category.id_comp _).symm,
    cases g, exact (category.id_comp _).symm.trans (c‚ÇÅ.œÄ.naturality g_f : _),
    cases g, exact (category.id_comp _).symm.trans (c‚ÇÇ.œÄ.naturality g_f : _),
    cases g, exact F.map_comp _ _ } }
instance fin_bicone_hom [fin_category J] (j k : bicone J) : fintype (j ‚ü∂ k) :=
begin
  cases j; cases k,
  exact { elems := {bicone_hom.left_id}, complete := Œª f, by { cases f, simp } },
  exact { elems := ‚àÖ, complete := Œª f, by { cases f } },
  exact { elems := {bicone_hom.left k}, complete := Œª f, by { cases f, simp } },
  exact { elems := ‚àÖ, complete := Œª f, by { cases f } },
  exact { elems := {bicone_hom.right_id}, complete := Œª f, by { cases f, simp } },
  exact { elems := {bicone_hom.right k}, complete := Œª f, by { cases f, simp } },
  exact { elems := ‚àÖ, complete := Œª f, by { cases f } },
  exact { elems := ‚àÖ, complete := Œª f, by { cases f } },
  exact { elems := finset.image (bicone_hom.diagram) (fintype.elems (j ‚ü∂ k)),
          complete := Œª f, by
            { cases f, simp only [finset.mem_image], use f_f, simpa using fintype.complete _, } },
end
instance bicone_small_category : small_category (bicone J) :=
category_theory.bicone_category J
instance bicone_fin_category [fin_category J] : fin_category (bicone J) := {}
end small_category
end category_theory
