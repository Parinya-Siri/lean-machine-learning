import analysis.special_functions.bernstein
import topology.algebra.algebra
open continuous_map filter
open_locale unit_interval
theorem polynomial_functions_closure_eq_top' :
  (polynomial_functions I).topological_closure = ⊤ :=
begin
  apply eq_top_iff.mpr,
  rintros f -,
  refine filter.frequently.mem_closure _,
  refine filter.tendsto.frequently (bernstein_approximation_uniform f) _,
  apply frequently_of_forall,
  intro n,
  simp only [set_like.mem_coe],
  apply subalgebra.sum_mem,
  rintro n -,
  apply subalgebra.smul_mem,
  dsimp [bernstein, polynomial_functions],
  simp,
end
theorem polynomial_functions_closure_eq_top (a b : ℝ) :
  (polynomial_functions (set.Icc a b)).topological_closure = ⊤ :=
begin
theorem continuous_map_mem_polynomial_functions_closure (a b : ℝ) (f : C(set.Icc a b, ℝ)) :
  f ∈ (polynomial_functions (set.Icc a b)).topological_closure :=
begin
  rw polynomial_functions_closure_eq_top _ _,
  simp,
end
theorem exists_polynomial_near_continuous_map (a b : ℝ) (f : C(set.Icc a b, ℝ))
  (ε : ℝ) (pos : 0 < ε) :
  ∃ (p : polynomial ℝ), ∥p.to_continuous_map_on _ - f∥ < ε :=
begin
  have w := mem_closure_iff_frequently.mp (continuous_map_mem_polynomial_functions_closure _ _ f),
  rw metric.nhds_basis_ball.frequently_iff at w,
  obtain ⟨-, H, ⟨m, ⟨-, rfl⟩⟩⟩ := w ε pos,
  rw [metric.mem_ball, dist_eq_norm] at H,
  exact ⟨m, H⟩,
end
theorem exists_polynomial_near_of_continuous_on
  (a b : ℝ) (f : ℝ → ℝ) (c : continuous_on f (set.Icc a b)) (ε : ℝ) (pos : 0 < ε) :
  ∃ (p : polynomial ℝ), ∀ x ∈ set.Icc a b, |p.eval x - f x| < ε :=
begin
  let f' : C(set.Icc a b, ℝ) := ⟨λ x, f x, continuous_on_iff_continuous_restrict.mp c⟩,
  obtain ⟨p, b⟩ := exists_polynomial_near_continuous_map a b f' ε pos,
  use p,
  rw norm_lt_iff _ pos at b,
  intros x m,
  exact b ⟨x, m⟩,
end
