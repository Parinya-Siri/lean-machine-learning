import algebra.free
import algebra.monoid_algebra.basic
universes u v w
noncomputable theory
variables (R : Type u) (X : Type v) [semiring R]
abbreviation free_non_unital_non_assoc_algebra := monoid_algebra R (free_magma X)
namespace free_non_unital_non_assoc_algebra
variables {X}
def of : X → free_non_unital_non_assoc_algebra R X :=
(monoid_algebra.of_magma R _) ∘ free_magma.of
variables {A : Type w} [non_unital_non_assoc_semiring A]
variables [module R A] [is_scalar_tower R A A] [smul_comm_class R A A]
def lift : (X → A) ≃ (free_non_unital_non_assoc_algebra R X →ₙₐ[R] A) :=
free_magma.lift.trans (monoid_algebra.lift_magma R)
@[simp] lemma lift_symm_apply (F : free_non_unital_non_assoc_algebra R X →ₙₐ[R] A) :
  (lift R).symm F = F ∘ (of R) :=
rfl
@[simp] lemma of_comp_lift (f : X → A) : (lift R f) ∘ (of R) = f :=
(lift R).left_inv f
@[simp] lemma lift_unique
  (f : X → A) (F : free_non_unital_non_assoc_algebra R X →ₙₐ[R] A) :
  F ∘ (of R) = f ↔ F = lift R f :=
(lift R).symm_apply_eq
@[simp] lemma lift_of_apply (f : X → A) (x) : lift R f (of R x) = f x :=
congr_fun (of_comp_lift _ f) x
@[simp] lemma lift_comp_of (F : free_non_unital_non_assoc_algebra R X →ₙₐ[R] A) :
  lift R (F ∘ (of R)) = F :=
(lift R).apply_symm_apply F
@[ext] lemma hom_ext {F₁ F₂ : free_non_unital_non_assoc_algebra R X →ₙₐ[R] A}
  (h : ∀ x, F₁ (of R x) = F₂ (of R x)) : F₁ = F₂ :=
(lift R).symm.injective $ funext h
end free_non_unital_non_assoc_algebra
