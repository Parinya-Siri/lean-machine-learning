import topology.bases
import topology.dense_embedding
noncomputable theory
open filter set
open_locale topological_space
universes u v
section ultrafilter
def ultrafilter_basis (Œ± : Type u) : set (set (ultrafilter Œ±)) :=
range $ Œª s : set Œ±, {u | s ‚àà u}
variables {Œ± : Type u}
instance : topological_space (ultrafilter Œ±) :=
topological_space.generate_from (ultrafilter_basis Œ±)
lemma ultrafilter_basis_is_basis :
  topological_space.is_topological_basis (ultrafilter_basis Œ±) :=
‚ü®begin
   rintros _ ‚ü®a, rfl‚ü© _ ‚ü®b, rfl‚ü© u ‚ü®ua, ub‚ü©,
   refine ‚ü®_, ‚ü®a ‚à© b, rfl‚ü©, inter_mem ua ub, assume v hv, ‚ü®_, _‚ü©‚ü©;
     apply mem_of_superset hv; simp [inter_subset_right a b]
 end,
 eq_univ_of_univ_subset $ subset_sUnion_of_mem $
   ‚ü®univ, eq_univ_of_forall (Œª u, univ_mem)‚ü©,
 rfl‚ü©
lemma ultrafilter_is_open_basic (s : set Œ±) :
  is_open {u : ultrafilter Œ± | s ‚àà u} :=
ultrafilter_basis_is_basis.is_open ‚ü®s, rfl‚ü©
lemma ultrafilter_is_closed_basic (s : set Œ±) :
  is_closed {u : ultrafilter Œ± | s ‚àà u} :=
begin
  rw ‚Üê is_open_compl_iff,
  convert ultrafilter_is_open_basic s·∂ú,
  ext u,
  exact ultrafilter.compl_mem_iff_not_mem.symm
end
lemma ultrafilter_converges_iff {u : ultrafilter (ultrafilter Œ±)} {x : ultrafilter Œ±} :
  ‚Üëu ‚â§ ùìù x ‚Üî x = mjoin u :=
begin
  rw [eq_comm, ‚Üê ultrafilter.coe_le_coe],
  change ‚Üëu ‚â§ ùìù x ‚Üî ‚àÄ s ‚àà x, {v : ultrafilter Œ± | s ‚àà v} ‚àà u,
  simp only [topological_space.nhds_generate_from, le_infi_iff, ultrafilter_basis,
    le_principal_iff, mem_set_of_eq],
  split,
  { intros h a ha, exact h _ ‚ü®ha, a, rfl‚ü© },
  { rintros h a ‚ü®xi, a, rfl‚ü©, exact h _ xi }
end
instance ultrafilter_compact : compact_space (ultrafilter Œ±) :=
‚ü®is_compact_iff_ultrafilter_le_nhds.mpr $ assume f _,
   ‚ü®mjoin f, trivial, ultrafilter_converges_iff.mpr rfl‚ü©‚ü©
instance ultrafilter.t2_space : t2_space (ultrafilter Œ±) :=
t2_iff_ultrafilter.mpr $ assume x y f fx fy,
  have hx : x = mjoin f, from ultrafilter_converges_iff.mp fx,
  have hy : y = mjoin f, from ultrafilter_converges_iff.mp fy,
  hx.trans hy.symm
instance : totally_disconnected_space (ultrafilter Œ±) :=
begin
  rw totally_disconnected_space_iff_connected_component_singleton,
  intro A,
  simp only [set.eq_singleton_iff_unique_mem, mem_connected_component, true_and],
  intros B hB,
  rw ‚Üê ultrafilter.coe_le_coe,
  intros s hs,
  rw [connected_component_eq_Inter_clopen, set.mem_Inter] at hB,
  let Z := { F : ultrafilter Œ± | s ‚àà F },
  have hZ : is_clopen Z := ‚ü®ultrafilter_is_open_basic s, ultrafilter_is_closed_basic s‚ü©,
  exact hB ‚ü®Z, hZ, hs‚ü©,
end
lemma ultrafilter_comap_pure_nhds (b : ultrafilter Œ±) : comap pure (ùìù b) ‚â§ b :=
begin
  rw topological_space.nhds_generate_from,
  simp only [comap_infi, comap_principal],
  intros s hs,
  rw ‚Üêle_principal_iff,
  refine infi_le_of_le {u | s ‚àà u} _,
  refine infi_le_of_le ‚ü®hs, ‚ü®s, rfl‚ü©‚ü© _,
  exact principal_mono.2 (Œª a, id)
end
section embedding
lemma ultrafilter_pure_injective : function.injective (pure : Œ± ‚Üí ultrafilter Œ±) :=
begin
  intros x y h,
  have : {x} ‚àà (pure x : ultrafilter Œ±) := singleton_mem_pure,
  rw h at this,
  exact (mem_singleton_iff.mp (mem_pure.mp this)).symm
end
open topological_space
lemma dense_range_pure : dense_range (pure : Œ± ‚Üí ultrafilter Œ±) :=
Œª x, mem_closure_iff_ultrafilter.mpr
       ‚ü®x.map pure, range_mem_map, ultrafilter_converges_iff.mpr (bind_pure x).symm‚ü©
lemma induced_topology_pure :
  topological_space.induced (pure : Œ± ‚Üí ultrafilter Œ±) ultrafilter.topological_space = ‚ä• :=
begin
  apply eq_bot_of_singletons_open,
  intros x,
  use [{u : ultrafilter Œ± | {x} ‚àà u}, ultrafilter_is_open_basic _],
  simp,
end
lemma dense_inducing_pure : @dense_inducing _ _ ‚ä• _ (pure : Œ± ‚Üí ultrafilter Œ±) :=
by letI : topological_space Œ± := ‚ä•; exact ‚ü®‚ü®induced_topology_pure.symm‚ü©, dense_range_pure‚ü©
lemma dense_embedding_pure : @dense_embedding _ _ ‚ä• _ (pure : Œ± ‚Üí ultrafilter Œ±) :=
by letI : topological_space Œ± := ‚ä• ;
exact { inj := ultrafilter_pure_injective, ..dense_inducing_pure }
end embedding
section extension
variables {Œ≥ : Type*} [topological_space Œ≥]
def ultrafilter.extend (f : Œ± ‚Üí Œ≥) : ultrafilter Œ± ‚Üí Œ≥ :=
by letI : topological_space Œ± := ‚ä•; exact dense_inducing_pure.extend f
variables [t2_space Œ≥]
lemma ultrafilter_extend_extends (f : Œ± ‚Üí Œ≥) : ultrafilter.extend f ‚àò pure = f :=
begin
  letI : topological_space Œ± := ‚ä•,
  haveI : discrete_topology Œ± := ‚ü®rfl‚ü©,
  exact funext (dense_inducing_pure.extend_eq continuous_of_discrete_topology)
end
variables  [compact_space Œ≥]
lemma continuous_ultrafilter_extend (f : Œ± ‚Üí Œ≥) : continuous (ultrafilter.extend f) :=
have ‚àÄ (b : ultrafilter Œ±), ‚àÉ c, tendsto f (comap pure (ùìù b)) (ùìù c) := assume b,
lemma ultrafilter_extend_eq_iff {f : Œ± ‚Üí Œ≥} {b : ultrafilter Œ±} {c : Œ≥} :
  ultrafilter.extend f b = c ‚Üî ‚Üë(b.map f) ‚â§ ùìù c :=
‚ü®assume h, begin
variables (Œ± : Type u) [topological_space Œ±]
instance stone_cech_setoid : setoid (ultrafilter Œ±) :=
{ r := Œª x y, ‚àÄ (Œ≥ : Type u) [topological_space Œ≥], by exactI
    ‚àÄ [t2_space Œ≥] [compact_space Œ≥] (f : Œ± ‚Üí Œ≥) (hf : continuous f),
    ultrafilter.extend f x = ultrafilter.extend f y,
  iseqv :=
    ‚ü®assume x Œ≥ tŒ≥ h‚ÇÅ h‚ÇÇ f hf, rfl,
     assume x y xy Œ≥ tŒ≥ h‚ÇÅ h‚ÇÇ f hf, by exactI (xy Œ≥ f hf).symm,
     assume x y z xy yz Œ≥ tŒ≥ h‚ÇÅ h‚ÇÇ f hf, by exactI (xy Œ≥ f hf).trans (yz Œ≥ f hf)‚ü© }
def stone_cech : Type u := quotient (stone_cech_setoid Œ±)
variables {Œ±}
instance : topological_space (stone_cech Œ±) := by unfold stone_cech; apply_instance
instance [inhabited Œ±] : inhabited (stone_cech Œ±) := by unfold stone_cech; apply_instance
def stone_cech_unit (x : Œ±) : stone_cech Œ± := ‚ü¶pure x‚üß
lemma dense_range_stone_cech_unit : dense_range (stone_cech_unit : Œ± ‚Üí stone_cech Œ±) :=
dense_range_pure.quotient
section extension
variables {Œ≥ : Type u} [topological_space Œ≥] [t2_space Œ≥] [compact_space Œ≥]
variables {Œ≥' : Type u} [topological_space Œ≥'] [t2_space Œ≥']
variables {f : Œ± ‚Üí Œ≥} (hf : continuous f)
local attribute [elab_with_expected_type] quotient.lift
def stone_cech_extend : stone_cech Œ± ‚Üí Œ≥ :=
quotient.lift (ultrafilter.extend f) (Œª x y xy, xy Œ≥ f hf)
lemma stone_cech_extend_extends : stone_cech_extend hf ‚àò stone_cech_unit = f :=
ultrafilter_extend_extends f
lemma continuous_stone_cech_extend : continuous (stone_cech_extend hf) :=
continuous_quot_lift _ (continuous_ultrafilter_extend f)
lemma stone_cech_hom_ext {g‚ÇÅ g‚ÇÇ : stone_cech Œ± ‚Üí Œ≥'}
  (h‚ÇÅ : continuous g‚ÇÅ) (h‚ÇÇ : continuous g‚ÇÇ)
  (h : g‚ÇÅ ‚àò stone_cech_unit = g‚ÇÇ ‚àò stone_cech_unit) : g‚ÇÅ = g‚ÇÇ :=
begin
  apply continuous.ext_on dense_range_stone_cech_unit h‚ÇÅ h‚ÇÇ,
  rintros x ‚ü®x, rfl‚ü©,
  apply (congr_fun h x)
end
end extension
lemma convergent_eqv_pure {u : ultrafilter Œ±} {x : Œ±} (ux : ‚Üëu ‚â§ ùìù x) : u ‚âà pure x :=
assume Œ≥ tŒ≥ h‚ÇÅ h‚ÇÇ f hf, begin
  resetI,
  transitivity f x, swap, symmetry,
  all_goals { refine ultrafilter_extend_eq_iff.mpr (le_trans (map_mono _) (hf.tendsto _)) },
  { apply pure_le_nhds }, { exact ux }
end
lemma continuous_stone_cech_unit : continuous (stone_cech_unit : Œ± ‚Üí stone_cech Œ±) :=
continuous_iff_ultrafilter.mpr $ Œª x g gx,
  have ‚Üë(g.map pure) ‚â§ ùìù g,
    by rw ultrafilter_converges_iff; exact (bind_pure _).symm,
  have (g.map stone_cech_unit : filter (stone_cech Œ±)) ‚â§ ùìù ‚ü¶g‚üß, from
    continuous_at_iff_ultrafilter.mp (continuous_quotient_mk.tendsto g) _ this,
  by rwa (show ‚ü¶g‚üß = ‚ü¶pure x‚üß, from quotient.sound $ convergent_eqv_pure gx) at this
instance stone_cech.t2_space : t2_space (stone_cech Œ±) :=
begin
  rw t2_iff_ultrafilter,
  rintros ‚ü®x‚ü© ‚ü®y‚ü© g gx gy,
  apply quotient.sound,
  intros Œ≥ tŒ≥ h‚ÇÅ h‚ÇÇ f hf,
  resetI,
  let ff := stone_cech_extend hf,
  change ff ‚ü¶x‚üß = ff ‚ü¶y‚üß,
  have lim := Œª (z : ultrafilter Œ±) (gz : (g : filter (stone_cech Œ±)) ‚â§ ùìù ‚ü¶z‚üß),
    ((continuous_stone_cech_extend hf).tendsto _).mono_left gz,
  exact tendsto_nhds_unique (lim x gx) (lim y gy)
end
instance stone_cech.compact_space : compact_space (stone_cech Œ±) :=
quotient.compact_space
end stone_cech
