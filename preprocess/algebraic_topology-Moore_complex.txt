import algebra.homology.homological_complex
import algebraic_topology.simplicial_object
import category_theory.abelian.basic
universes v u
noncomputable theory
open category_theory category_theory.limits
open opposite
namespace algebraic_topology
variables {C : Type*} [category C] [abelian C]
local attribute [instance] abelian.has_pullbacks
namespace normalized_Moore_complex
open category_theory.subobject
variables (X : simplicial_object C)
@[simp]
def obj_X : Π n : ℕ, subobject (X.obj (op (simplex_category.mk n)))
| 0 := ⊤
| (n+1) := finset.univ.inf (λ k : fin (n+1), kernel_subobject (X.δ k.succ))
@[simp]
def obj_d : Π n : ℕ, (obj_X X (n+1) : C) ⟶ (obj_X X n : C)
| 0 := subobject.arrow _ ≫ X.δ (0 : fin 2) ≫ inv ((⊤ : subobject _).arrow)
| (n+1) :=
begin
@[simps]
def obj (X : simplicial_object C) : chain_complex C ℕ :=
@[simps]
def map (f : X ⟶ Y) : obj X ⟶ obj Y :=
chain_complex.of_hom _ _ _ _ _ _
  (λ n, begin
    refine factor_thru _ (arrow _ ≫ f.app (op (simplex_category.mk n))) _,
    cases n; dsimp,
    { apply top_factors, },
    { refine (finset_inf_factors _).mpr (λ i m, _),
      apply kernel_subobject_factors,
      slice_lhs 2 3 { erw ←f.naturality, },
      rw ←factor_thru_arrow _ _ (finset_inf_arrow_factors finset.univ _ i (by simp)),
      slice_lhs 2 3 { erw [kernel_subobject_arrow_comp], },
      simp, }
  end)
  (λ n, begin
    cases n; dsimp,
    { ext, simp, erw f.naturality, refl, },
    { ext, simp, erw f.naturality, refl, },
  end)
end normalized_Moore_complex
open normalized_Moore_complex
variables (C)
@[simps]
def normalized_Moore_complex : simplicial_object C ⥤ chain_complex C ℕ :=
{ obj := obj,
  map := λ X Y f, map f,
  map_id' := λ X, by { ext n, cases n; { dsimp, simp, }, },
  map_comp' := λ X Y Z f g, by { ext n, cases n; simp, }, }
end algebraic_topology
